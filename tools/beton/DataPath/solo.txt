ifndef FPGA:
    echo You use old version of MAC-Bringup. Please update it.
    exit

echo Start solo

#Device parameters
tpbsize = 160 
rpbsize = 336
txRingSize = 512#4096
rxRingSize = 512#4096
txRingBufSize = 2048
rxRingBufSize = 2048

#maxtc = 4                    # TC count 4 or 8
mac.get txDcbTcCount -n maxtc -l nul
ringPerTc = (32 // $maxtc)
testRing = 0                 # Number of test ring

#mac.set no_mcp_link True -l nul
loopback = 'None' #'None', 'Shallow', 'Deep', 'Msm', 'Serdes'. 'Msm' and 'Serdes' - requires not mcp link
link = 'Auto' # 'None', '100M', '1G', '2.5G', '5G', '10G', 'Auto'
interrupts = 'Auto' # 'Auto', 'Single', 'None'

#Test parameters
itr = 100                 # Send iteration count
minSize = 64              # Min packet size
maxSize = 9000            # Max packet size
minSegCount = 1              # Min segment count
maxSegCount = 16              # Max segment count
minBatchCount = 1           # Min packet count in iteration
maxBatchCount = 500         # Max packet count in iteration
minOffset = 0                # Min offset
maxOffset = -1              # Max offset(negative value: preallocated buffer size + $maxOffset)
useBackPreassure = 1         #
onlyBackPreassure = 0        # Always use back preassure
loopbackPause = 50          #
maxWaitCount = 30           #
txInterruptMark = 2           # 0 - Each descriptor, 1 - Each packet, 2 - Each batch
rxInterruptMark = 2           # 0 - Each descriptor, 1 - Low threshold, 2 - Empty
lowThreshold = 64

marginSize=0xb
maxSize = min($maxSize, 1024*(min($tpbsize, $rpbsize)//$maxtc) - ($marginSize + 1 + 16)*16)

echo Send iteration count           : $itr
echo Packet min/max size            : $minSize/$maxSize
echo Segment count min/max          : $minSegCount/$maxSegCount
echo Iteration packet count min/max : $minBatchCount/$maxBatchCount
echo Offset in buffer               : $minOffset/$maxOffset
echo TX/RX DMA Buf size             : $txRingBufSize/$rxRingBufSize
if $loopback != 'Shallow':
    useBackPreassure = 0
    onlyBackPreassure = 0
    echo No back-preassure for loopback type: $loopback
else:
    echo Use/Only use back-preassure    : $useBackPreassure/$onlyBackPreassure

loopbackMode = ('System DMA' if $loopback == 'Shallow' else 'System Packet' if $loopback == 'Deep' else 'None')

mac.get link -l nul -n prevlink
if '$loopbackMode' != 'None':
    link = 'None'
    echo Disable link for internal MAC loopbacks

mac.set loopback $loopbackMode -l nul
lbmode = ($loopback)
echo Loopback                       : $lbmode

echo Test ring                      : $testRing

tpbPerTcSize = ($tpbsize/$maxtc)
rpbPerTcSize = ($rpbsize/$maxtc)
mac.txpb[0:$maxtc].set -l nul size $tpbPerTcSize
mac.rxpb[0:$maxtc].set -l nul size $rpbPerTcSize
echo TC number $maxtc. TPB/RPB per TC    : $tpbPerTcSize/$rpbPerTcSize

scmp.clean
scmp.autofill -l -L 1_to_1

if $interrupts != 'None':
    interruptState = ('Single' if $interrupts == 'Single' else 'Multi-Vector')
    mac.isr.set Mode $interruptState -l nul
    mac.isr.get Mode -n interruptState -l nul

if $loopback == 'Msm':
    if $link == 'None':
        link='Auto'
    mac.set no_mcp_link True -l nul
    mac.mpi.msm.set syslb_en True -l nul
elif $loopback == 'Serdes':
    if $link == 'None':
        link='Auto'
    mac.set no_mcp_link True -l nul
    mac.mpi.tkl.set TKLPCSSystemLoopbackEnable True -l nul
    mac.mpi.rkl.set RKLPCSSystemLoopbackEnable True -l nul

        
setlink = ($link)
mac.set link $setlink -l nul
    
mac.get no_mcp_link -l nul -n mcp_link_ctrl

if not $mcp_link_ctrl:
    mac.set glb_reg_reset_dis False -l nul
mac.init

# Enable TPO2 and RPF2
exec $(PWD)/helpers/enableTPO2.txt
exec $(PWD)/helpers/enableRPF2.txt

if $link != 'None':
    for i = 0; $i < 10; i += 1:
        mac.read link
        mac.get link -n linkState -l nul
        if '$linkState' != 'None':
            break
        pause 1

    if '$linkState' == 'None':
        echo Error! No link!
        mac.uninit
        exit
else:
    linkState = ($link)

echo Link                           : $setlink/$linkState
if '$REVISION' == 'A0' and $link != 'None':
    echo Apply MSM fix for bug 4731
    readreg msm 0x8 -n msm_ctrl -l nul
    msm_ctrl = $msm_ctrl | (1 << 26)
    writereg msm 0x8 $msm_ctrl -l nul

if $interrupts == 'None':
    interruptState = Disabled
    mac.isr.disable

echo Interrupts                     : $interruptState


if $txInterruptMark == 1:
    markStateTx = Each packet
    wbthreshold = 0
elif $txInterruptMark == 2:
    markStateTx = Each batch
    wbthreshold = 0
else:
    markStateTx = Each descriptor
    wbthreshold = 1

mac.txring[$testRing].set wbThreshold $wbthreshold -l nul
mac.txring[$testRing].set bufSize $txRingBufSize -l nul
mac.txring[$testRing].set maxDmaSize $txRingBufSize -l nul
mac.rxring[$testRing].set bufSize $rxRingBufSize -l nul

ifdef txRingSize:
    mac.txring[$testRing].set -l nul size $txRingSize
ifdef rxRingSize:
    mac.rxring[$testRing].set -l nul size $rxRingSize

if $txInterruptMark != 0:
    vc = $testRing#(31 - $testRing)
    mac.txring[$testRing].set map2vector $vc -l nul
    mac.txring[$testRing].set map2cause $vc -l nul
if $rxInterruptMark != 0:
    vc = $testRing#(31 - $testRing)
    mac.rxring[$testRing].set map2vector $vc -l nul
    mac.rxring[$testRing].set map2cause $vc -l nul

if $rxInterruptMark == 1:
    mac.rxring[$testRing].set desc_lo_thresh $lowThreshold -l nul
    rxwrbEnable = False
    rxnEmptyEn = True
    rxEmptyEn = False
    markStateRx = Non empty $lowThreshold descs
elif $rxInterruptMark == 2:
    rxwrbEnable = False
    rxnEmptyEn = False
    rxEmptyEn = True
    markStateRx = Empty
elif $rxInterruptMark == 0:
    rxwrbEnable = True
    rxnEmptyEn = False
    rxEmptyEn = False
    markStateRx = Each writeback

mac.set int_rx_desc_wrb_en $rxwrbEnable -l nul
mac.set int_rx_desc_nempty_en $rxnEmptyEn -l nul
mac.set int_rx_desc_empty_en $rxEmptyEn -l nul

echo Interrupt Mark Tx/Rx           : $markStateTx/$markStateRx

mac.txinit
mac.rxinit

if '$REVISION' == 'A0':
    echo Apply Gurumany's fix for TDM/TPB margin size bug 4731
    val1 = 0x80000008 | ($marginSize << 4)
    val2 = 0x00000008 | ($marginSize << 4)
    writereg 0x8920 $val1 -l nul
    writereg 0x8920 $val2 -l nul

if $FPGA and '$REVISION' == 'B0':
    echo Apply Kiran's fix for TPB parity error in FPGA bug 5011
    readreg 0x7900 -n tpb_init -l nul
    tpb_init = $tpb_init | (1 << 3)
    writereg 0x7900 $tpb_init -l nul

mac.rxring[$testRing].set -l nul batchFill 0 #Disable autofill after interrupt
mac.txring[$testRing].enable
mac.rxring[$testRing].enable

ifndef txRingSize:
    mac.txring[$testRing].get -l nul -n txRingSize size
ifndef rxRingSize:
    mac.rxring[$testRing].get -l nul -n rxRingSize size
maxOffset = ($maxOffset if $maxOffset >= 0 else $txRingBufSize + $maxOffset)

echo TX/RX Ring size (desc count)   : $txRingSize/$rxRingSize

rxRingSizeM1 = ($rxRingSize - 1)
mac.llh -v txExpectHead tdmTxDescriptorHeadPointerGet $testRing
mac.llh -v rxExpectHead rdmRxDescriptorHeadPointerGet $testRing

txHead = $txExpectHead
rxHead = $rxExpectHead

#for packet and desc counting
curr_tx_headptr = 0
prev_tx_headptr = 0
curr_rx_headptr = 0
prev_rx_headptr = 0
successfulPacketCount = 0
successfulTxCount = 0
successfulRxCount = 0
lastBatchCount = 0

#echo txExpectHead $txExpectHead, rxExpectHead $rxExpectHead
echo Start loop
for i = 0; $i < $itr; i += 1:
    getch -n key #-l cli
    if $key == ord('q'):
        break
    if ($i % ($itr/10)) == 0:
        #mac.txring[0].status
        #mac.rxring[0].status
        progress = $i * 100 / $itr
        echo Progress: $progress%

    count = random.randint($minBatchCount, $maxBatchCount)
    txcount = 0
    rxcount = 0
    txbytesize = 0
    
    for j = 0; $j < $count and $rxcount < $rxRingSize - 1 and $minSegCount < $txRingSize - $txcount; j += 1:
        maxSegCountItr = min($txRingSize - 1 - $txcount, $maxSegCount)
        minSegCountItr = min($minSegCount, $maxSegCountItr)

        segcount = random.randint($minSegCountItr, $maxSegCountItr)
        packetSize = random.randint($minSize, min($maxSize, $segcount*$txRingBufSize))
        restSize = $packetSize
        minSegSize = 6
        maxSegSize = min($maxSize, $txRingBufSize)
        for k = 0; $k < $segcount and $restSize > 0; k += 1:
            params = -p $packetSize
            segSize = random.randint($minSegSize, $maxSegSize)

            segSize = max($segSize, $txRingBufSize if $txRingBufSize < ($restSize + $txRingBufSize - $segSize + $segcount - $k - 1)/($segcount - $k) else 0)
            if $restSize < $segSize or $k >= $segcount - 1:
                segSize = $restSize

            offset = random.randint($minOffset, max($minOffset, $maxOffset-$segSize))
            if $offset + $segSize > $txRingBufSize:
                echo Warning! Wrong offset $offset and segsize $segSize
                if $k < $segcount - 1:
                    segSize = ($txRingBufSize - $offset)
                else:
                    offset = ($txRingBufSize - $segSize)

            restSize -= $segSize
            minSegSize = 1
            maxSegSize = min($restSize, $txRingBufSize)

            params = -p $packetSize -o $offset

            if $restSize > 0:
                params = $params -e 0
            else:
                rxcount += ($packetSize + $(rxRingBufSize) - 1) // $(rxRingBufSize)
                if $txInterruptMark == 1:
                    params = $params -w 1
                    #echo mark packet
                elif $txInterruptMark == 2 and not ($j + 1 < $count and $rxcount < $rxRingSize - 1 and $minSegCount < $txRingSize - $txcount - 1):
                    params = $params -w 1
                    #echo mark batch tx $txcount rx $rxcount j $j count $count rxRingSize $rxRingSize txRingSize $txRingSize

            params = $params -b $segSize

            #echo mac.txring[$testRing].insert $params
            mac.txring[$testRing].insert $params
            txcount += 1
            txbytesize += $segSize
            #params = -T 1 -l dumptx
            #mac.txring[$testRing].dumpdesc $params
            #mac.txring[$testRing].dumpbuf $params
    lastBatchCount = $j  #for packet and desc counting

    #echo tx $txcount rx $rxcount j $j count $count rxRingSize $rxRingSize txRingSize $txRingSize

    mac.rxring[$testRing].fill $rxcount
    rxExpectHead = ($rxExpectHead + $rxcount) % $rxRingSize
    txExpectHead = ($txExpectHead + $txcount) % $txRingSize

    bp = 0
    if $useBackPreassure > 0:
        bp = random.randint($onlyBackPreassure, $useBackPreassure)

    #Send/receive data
    if $bp == 0:
        mac.rxring[$testRing].commit

    mac.txring[$testRing].commit

    #for packet and desc counting
    prev_tx_headptr = $curr_tx_headptr  #for packet and desc counting
	
    if $bp > 0:
        mac.rxring[$testRing].commit


    for j = 0; $j < $maxWaitCount; j += 1:
        error = 0

        mac.llh -v txHead tdmTxDescriptorHeadPointerGet $testRing
        if $txHead == $txExpectHead:
            break
        error = 1
        pause $loopbackPause ms
    curr_tx_headptr = $txHead  #for packet and desc counting

    if $error > 0:
        echo txHead = $txHead txExpectHead = $txExpectHead
        mac.txring[$testRing].clean
        mac.txring[$testRing].status
        break

    #for packet and desc counting
    prev_rx_headptr = $curr_rx_headptr
    for j = 0; $j < $maxWaitCount; j += 1:
        error = 0

        mac.llh -v rxHead rdmRxDescriptorHeadPointerGet $testRing
        if $rxHead == $rxExpectHead:
            break
        error = 1
        pause $loopbackPause ms

    #for packet and desc counting
    curr_rx_headptr = $rxHead

    if $error > 0:
        echo rxHead = $rxHead rxExpectHead = $rxExpectHead
        mac.rxring[$testRing].clean
        mac.rxring[$testRing].status
        break

    if $interrupts == 'None':
        mac.txring[$testRing].clean
        mac.rxring[$testRing].clean

    for j = 0; $j < $maxWaitCount; j += 1:
        error = 0
        mac.txring[$testRing].isEmpty -l nul -n txempty
        mac.rxring[$testRing].isEmpty -l nul -n rxempty
        if $txempty == True and $rxempty == True:
            break
        pause $loopbackPause ms
        if $interrupts == 'None':
            if not $txempty:
                mac.txring[$testRing].clean
            if not $rxempty:
                mac.rxring[$testRing].clean
        error = 1

    if $error > 0:
        if not $txempty and not $rxempty:
            nonempty = 'Both TX and RX'
        elif not $txempty:
            nonempty = 'TX'
        else:# not $rxempty:
            nonempty = 'RX'

        echo $nonempty rings are not empty.
        mac.txring[$testRing].status -l cli
        mac.rxring[$testRing].status -l cli
        break

	for tc = 0; $tc < $maxtc; tc += 1:
        if $tc * $ringPerTc > $testRing or ($tc + 1) * $ringPerTc < $testRing:
            continue
		mac.llhcache invalidate
		mac.llh -C tpbTxBufferParityErrorGet $tc -v parityError$tc
		if $(parityError$tc) != 0 and not ($FPGA and '$REVISION' == 'B0'):
			echo Parity error in TPB TC $tc!!!
			dbgTpbVal = 0x30 | $tc
			writereg 0x8510 $dbgTpbVal -l nul
			readreg 0x8508 -l nul -n dbgTpbRes
			dbgOut = 'Debug register value: 0x%x' % $dbgTpbRes
			echo $dbgOut
			
		mac.llh -C rpbRxBufferParityErrorGet $tc -v parityError$tc
		if $(parityError$(tc)) != 0:
			echo Parity error in RPB TC $tc!!!
        break

    #for packet and desc counting
    successfulPacketCount += $lastBatchCount
    successfulTxCount += $txcount
    successfulRxCount += $rxcount

#for packet and desc counting
tx_total_pkts = $successfulPacketCount
tx_total_desc = $successfulTxCount
failedTxCount = 0
if $txHead != $txExpectHead:
    if $curr_tx_headptr < $prev_tx_headptr:
        failedTxCount = $txRingSize - ($txRingSize - $curr_tx_headptr)
    else:
        failedTxCount = ($curr_tx_headptr - $prev_tx_headptr)
    tx_total_pkts += $failedTxCount // ($txcount / $lastBatchCount) #get an inexact average of failed packets
    tx_total_desc += $failedTxCount
elif $error > 0:
    tx_total_pkts += $lastBatchCount
    tx_total_desc += $txcount

rx_total_pkts = $successfulPacketCount
rx_total_desc = $successfulRxCount
failedRxCount = 0
if $rxHead != $rxExpectHead:
    if $curr_rx_headptr < $prev_rx_headptr:
        failedRxCount = $rxRingSize - ($rxRingSize - $curr_rx_headptr)
    else:
        failedRxCount = ($curr_rx_headptr - $prev_rx_headptr)
    rx_avg_desc = ($rxcount / $lastBatchCount)
    rx_total_pkts += $failedRxCount // $rx_avg_desc if $rx_avg_desc > 0 else $failedRxCount #get an inexact average of failed packets
    rx_total_desc += $failedRxCount

echo TX Desc/Packets, RX Desc/Packets : $tx_total_desc/$tx_total_pkts, $rx_total_desc/$rx_total_pkts

if $testRing < 10:
    testGroup = acRing0$testRing
else:
    testGroup = acRing$testRing

scmp.isEmpty -g $testGroup -l cli -n scmperror
scmp.status -g $testGroup -l scmp

if $error > 0 or $scmperror > 0:
    echo FAILED
    #cmd
    exec Legacy/Samples/readstat.txt
else:
    echo OK

if $link != 'None':
    if $loopback == 'Msm':
        mac.set no_mcp_link False -l nul
        mac.mpi.msm.set syslb_en False -l nul
    if $loopback == 'Serdes':
        mac.set no_mcp_link False -l nul
        mac.mpi.tkl.set TKLPCSSystemLoopbackEnable False -l nul
        mac.mpi.rkl.set RKLPCSSystemLoopbackEnable False -l nul

ifdef prevlink:
    mac.set link -l nul $prevlink
    echo Restore link settings
    undef -n prevlink -l nul

mac.txuninit
mac.rxuninit
mac.uninit

if not $mcp_link_ctrl:
    mac.set glb_reg_reset_dis True -l nul
    mac.set no_mcp_link False -l nul
    mac.mcp.run

