# $File: //depot/icm/proj/Atlantic/rev1.0/software/Software/Test/AtlanticTestbench/Flash/flashWrite.txt $
# $Revision: #5 $
# $DateTime: 2016/05/06 20:56:05 $
# $Author: ryanv $
#
# sample auto-test script sample, ready to copy&paste
#
log.hw Disable #disabled to speed up test

ok = 1
flash.init
flash.get jedecid -n FLASH_CONST_JEDECID -l nul
flash.get flashSize -n FLASH_CONST_FLASH_SIZE -l nul
flash.get dataChunkSize -n FLASH_CONST_DATA_CHUNK_SIZE -l nul
flash.get pageSize -n FLASH_CONST_PAGE_SIZE -l nul
flash.get pagesPerSmallestGroup -n FLASH_CONST_PAGES_PER_GROUP -l nul

finalReport = []                               #mandatory clear, empty means tests passed.
flashSizeBytes = $FLASH_CONST_FLASH_SIZE
id = 0x0

if flashSizeBytes < ($FLASH_CONST_PAGE_SIZE * $FLASH_CONST_DATA_CHUNK_SIZE):
    finalReport = $finalReport + ['(0) Incorrect test condition']
    ok = 0

flash.getPower2Status -n flashPageSizeIsPowerOf2
if not $flashPageSizeIsPowerOf2:
    echo Flash page size is not a power of 2! Setting to power of 2 now...
    flash.setPower2 -n setPower2Successful
    if not $setPower2Successful:
        echo Setting flash page size to power of 2 was not successful. Aborting script...
        finalReport = $finalReport + ['(1) Flash page size was not power of 2 and attempt to force it to power of 2 failed.']
        ok = 0

if $ok == 1:
    #flash.init
    flash.jedecid -n id

if $id != $FLASH_CONST_JEDECID and $ok == 1:
    hex_var = hex($FLASH_CONST_JEDECID)
    finalReport = $finalReport + ['(2) JEDECID not equal to $hex_var']
    ok = 0

if $ok == 1:
    flash.erase -s 0

sizeCode = 0

for addr = 0; $addr < $flashSizeBytes and $ok == 1; addr+= ($FLASH_CONST_PAGE_SIZE * $FLASH_CONST_DATA_CHUNK_SIZE): 
    if ($addr % 102400) == 0:
        echo .
    if ($addr % 1024000) == 0:
        echo addr = $addr
    if $sizeCode == 0:
        unitSize = 1
        sizeCode = 1
    elif $sizeCode == 1:
        unitSize = 2
        sizeCode = 2
    else:
        unitSize = 64
        sizeCode = 0
    units = ($FLASH_CONST_PAGE_SIZE // $unitSize)
    
    #First step - write odd blocks
    for unit=0; $unit < $units and $ok == 1; unit+=2:
        currentAddr= $addr + ($unit * $unitSize * $FLASH_CONST_DATA_CHUNK_SIZE)
        currentData = $currentAddr ^ 0xAAAAAAAA
        flash.program -a $currentAddr -c $unitSize $currentData
        ifndef hideResult:
            echo write odd: $currentAddr
    
    for unit=0; $unit < $units and $ok == 1; unit+=2:
        currentAddr = $addr + ($unit * $unitSize * $FLASH_CONST_DATA_CHUNK_SIZE)
        currentData = $currentAddr ^ 0xAAAAAAAA
        flash.read -a $currentAddr -s $unitSize -n data
        if $unitSize > 1:
            for d in $data:
                if $d != $currentData:
                    finalReport = $finalReport + ['(3) Fail on write/read test in units of $unitSize DWORDs on address $currentAddr']
                    ok = 0
                    break
        else:
            if $data != $currentData:
                finalReport = $finalReport + ['(3) Fail on write/read test in units of $unitSize DWORDs on address $currentAddr']
                ok = 0
                break
        
        ifndef hideResult:
            echo check write/read odd: $currentAddr
                
    for unit=1; $unit < $units and $ok == 1; unit+=2:
        currentAddr = $addr + ($unit * $unitSize * $FLASH_CONST_DATA_CHUNK_SIZE)
        currentData = 0xFFFFFFFF
        flash.read -a $currentAddr -s $unitSize -n data
        if $unitSize > 1:
            for d in $data:
                if $d != $currentData:
                    finalReport = $finalReport + ['(4.1) Fail on read test of unmodifyed space in units of $unitSize DWORDs on address $currentAddr']
                    ok = 0
                    break
        else:
            if $data != $currentData:
                finalReport = $finalReport + ['(4.2) Fail on read test of unmodifyed space in units of $unitSize DWORDs on address $currentAddr']
                ok = 0
                break
        ifndef hideResult:
            echo check remain even: $currentAddr
    
    #Second step - write even blocks
    
    for unit=1; $unit < $units; unit+=2:
        currentAddr= $addr + ($unit * $unitSize * $FLASH_CONST_DATA_CHUNK_SIZE)
        currentData = $currentAddr ^ 0xAAAAAAAA
        flash.program -a $currentAddr -c $unitSize $currentData
        ifndef hideResult:
            echo write even $currentAddr
    
    for unit=0; $unit < $units and $ok == 1; unit+=2:
        currentAddr = $addr + ($unit * $unitSize * $FLASH_CONST_DATA_CHUNK_SIZE)
        currentData = $currentAddr ^ 0xAAAAAAAA
        flash.read -a $currentAddr -s $unitSize -n data
        if $unitSize > 1:
            for d in $data:
                if $d != $currentData:
                    finalReport = $finalReport + ['(5) Fail on write/read test in units of $unitSize DWORDs on address $currentAddr']
                    ok = 0
                    break
        else:
            if $data != $currentData:
                finalReport = $finalReport + ['(5) Fail on write/read test in units of $unitSize DWORDs on address $currentAddr']
                ok = 0
                break
        ifndef hideResult:
            echo check read odd: $currentAddr
                
    for unit=1; $unit < $units and $ok == 1; unit+=2:
        currentAddr = $addr + ($unit * $unitSize * $FLASH_CONST_DATA_CHUNK_SIZE)
        currentData = $currentAddr ^ 0xAAAAAAAA
        flash.read -a $currentAddr -s $unitSize -n data
        if $unitSize > 1:
            for d in $data:
                if $d != $currentData:
                    finalReport = $finalReport + ['(6) Fail on write/read test in units of $unitSize DWORDs on address $currentAddr']
                    ok = 0
                    break
        else:
            if $data != $currentData:
                finalReport = $finalReport + ['(6) Fail on write/read test in units of $unitSize DWORDs on address $currentAddr']
                ok = 0
                break
        ifndef hideResult:
            echo check write/read even: $currentAddr

exec $PWD/helpers/showTestResult.txt
log.hw Enable