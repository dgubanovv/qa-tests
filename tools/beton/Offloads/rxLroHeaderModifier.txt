# $File: //depot/icm/proj/Atlantic/rev1.0/software/Software/Test/AtlanticTestbench/Offloads/rxLroHeaderModifier.txt $
# $Revision: #9 $
# $DateTime: 2016/09/06 10:04:58 $
# $Author: vryabov $

seed = random.randint(0, 2 ** 32 - 1)
temp = random.seed($seed)

finalReport = []

ifndef test_num:
    test_num_ndef = True

ifndef test_num_ndef:
    test_num_ndef = False

if $test_num_ndef:
    echo !!!DEFAULT PARAMS APPLIED!!!
    logTag = -l cli
    maxTxPacketCount = 14
    givenTxHeaderLen = 54
    minTxPayloadLen = 128
    maxTxPayloadLen = 1460
    useACKOnly = False
    usePaddedPackets = False
    TPO2 = True
    RPF2 = True
else:
    maxTxPacketCount = 14
    givenTxHeaderLen = 54
    minTxPayloadLen = 128
    maxTxPayloadLen = 1460
    useACKOnly = False
    usePaddedPackets = False
    TPO2 = True
    RPF2 = True
    ifndef logTag:
        logTag = -l cli

ifndef TPO2:
    TPO2 = False 

ifndef RPF2:
    RPF2 = False 

useIPv6 = True
#useACKOnly = False
#usePaddedPackets = True

if $useACKOnly and $usePaddedPackets:
    echo INVALID CONFIGURATION. EXITING
    exit

itr = 100

choiceList = [True, False] if $useIPv6 else [False]
ipv6List = [random.choice($choiceList) for _ in xrange($itr)]
lroMinPayloadOfFirstPacket = 0

# Probability of appearing PUSH flag (1 of value)
pushProbability = 10

if $useACKOnly:
    mac.llh rpoLroAckPacketDisableSet 0
    minTxPayloadLen = 0
    maxTxPayloadLen = 0
else:
    mac.llh rpoLroAckPacketDisableSet 1

if $usePaddedPackets:
    echo USING PADDED PACKETS. NEED TO USE SFP LOOPBACK
    useIPv6 = False
    minTxPayloadLen = 1
    maxTxPayloadLen = 5
    loopback = None
    link = Auto
else:
    loopback = System Packet
    link = None

mac.llh rpoLroMinPayloadOfFirstPacketSet $lroMinPayloadOfFirstPacket
mac.llh rpfL2PromiscuousModeEnableSet 1

mac.llh rpfL2BroadcastCountThresholdSet 1
mac.llh rpfL2BroadcastFilterActionSet 1
mac.llh rpfL2BroadcastEnableSet 1

for _ in range($itr):
    ipv6 = $ipv6List[$_]
    if $ipv6:
        givenTxHeaderLen = 74
    else:
        givenTxHeaderLen = 54
    
    mac.set loopback $loopback $logTag
    mac.set link $link
    mac.init
    mac.txinit
    mac.rxinit
    mac.isr.disable
    
    if $FPGA and '$REVISION' == 'B0' and $usePaddedPackets:
        echo Apply Kiran's fix for TPB parity error in FPGA bug 5011
        readreg 0x7900 -n tpb_init -l nul
        tpb_init = $tpb_init | (1 << 3)
        tpb_init = $tpb_init & 0xFFFFFFF7
        writereg 0x7900 $tpb_init -l nul
        
        #readreg 0x8 -n enableTxPadding -l nul
        #enableTxPadding = $enableTxPadding | (1 << 0xB)
        #writereg 0x8 $enableTxPadding
    
    if $TPO2:
        exec $(PWD)/helpers/enableTPO2.txt

    if $RPF2:
        exec $(PWD)/helpers/enableRPF2.txt
    
    mac.txring[0].enable
    mac.txring[0].set PacketMark None
    mac.rxring[0].enable
    mac.rxring[0].fill
    mac.rxring[0].commit
    
    readreg 0x5030 -n bit5030
    bit5030 = ($bit5030 >> 1) << 1
    writereg 0x5030 $bit5030 
    
    #Timers.
    writereg 0x5620 0xc3500005
    writereg 0x00005590 0xFFFFFFFF
    
    numberOfDescriptorsPerLRO = random.randint(0, 3)
    
    mac.llh -v rxHeadBefore rdmRxDescriptorHeadPointerGet 0
    mac.llh rpoLroMaxNumberOfDescriptorsSet $numberOfDescriptorsPerLRO 0
    
    mac.rxring[0].get bufSize -n rxRingBufSize $logTag
    
    numberOfDescriptorsPerLRO = (2 ** ($numberOfDescriptorsPerLRO + 1))
    maxCoalescedPacketSize = ($numberOfDescriptorsPerLRO * $rxRingBufSize) - 1
    
    initialSeqNo = random.randint(0, 0xFFFF)
    initialAckNo = random.randint(0, 0xFFFF)
    payloads = []
    expectedWindows = []
    windows = []
    acks = []
    pushes = []
    expectedPushes = []
    totalPayload = 0
    packetPayload = 0
    
    seqNo = $initialSeqNo
    ackNo = $initialAckNo
    
    expectedPacketCount = 0
    packetCount = random.randint(3, $maxTxPacketCount)
    
    ttlsList = random.sample(range(0, 255), $packetCount)
    
    segmentPayload = []
    divider = []
    
    packetsCoalesced = []
    
    window = 0
    
    for i = 0; $i < $packetCount; i += 1:
        #echo PACKET COUNT: $packetCount
        ttl = $ttlsList[$i]
        rxTTLs = []
        payload = random.randint($minTxPayloadLen, $maxTxPayloadLen)
        echo PAYLOAD: $payload
        segmentPayload += [$payload]
        
        ack = random.randint(1, ((2 ** 15) - 1))
        ackNo = ($ackNo + $ack)# % (2 ** 16)
        acks += [$ackNo]
        
        window = random.randint(0, ((2 ** 15) - 1))
        windows += [$window]
        
        
        push = random.choice([True] + [False] * ($pushProbability - 1))
        
        if (($payload + $totalPayload + $givenTxHeaderLen) > $maxCoalescedPacketSize):
            payloads += [$totalPayload]
            expectedWindows += [$windows[$i - 1]]
            expectedPushes += [0]
            totalPayload = $payload
            divider += [($i - 1)]
            packetsCoalesced += [($i - 1)]
        else:
            totalPayload += $payload
        
        if $push:
            payloads += [$totalPayload]
            totalPayload = 0
            expectedWindows += [$windows[$i]]
            expectedPushes += [1 if ($push) else 0]
            divider += [$i]
            packetsCoalesced += [$i]
            
        if ($i == ($packetCount - 1)) and ($totalPayload != 0):
            payloads += [$totalPayload]
            expectedWindows += [$windows[$i]]
            expectedPushes += [0]
            divider = $divider + [$i] if $i not in $divider else $divider
            packetsCoalesced += [$i]
        
        flags = 0x10
        if $push:
            flags = $flags | 0x8
        pushes += [$push]
        
        fullSize = $payload + $givenTxHeaderLen
        pkt.new -n pkt$i -p $payload
        if $useACKOnly:
            pkt.layer -i $(pkt$i) -L 50 -t TCP sport=1234 dport=5000 ack=$ackNo flags=$flags
        else:
            pkt.layer -i $(pkt$i) -L 50 -t TCP sport=1234 dport=5000 seq=$seqNo ack=$ackNo flags=$flags window=$window
        if $ipv6:
            pkt.layer -i $(pkt$i) -L 30 -t IPv6 hlim=$ttl
        else:
            pkt.layer -i $(pkt$i) -L 30 -t IP ttl=$ttl
        pkt.layer -i $(pkt$i) -L 20 -t Ether
        mac.txring[0].insert -i $(pkt$i) -p $fullSize -b $fullSize
        seqNo = ($seqNo + $payload) % (2 ** 32)
    
    mac.txring[0].commit
    #BufDumpRange = ($packetCount - 1)
    #mac.txring[0].dumpbuf -T 0:$BufDumpRange
    #mac.txring[0].dumpdesc -T 0:$BufDumpRange
    #mac.txring[0].clean
    #mac.txring[0].status
    
    rxDescCounts = [0]
    
    for payloadSize in $payloads:
        packetSize = $payloadSize + $givenTxHeaderLen
        rxDescCounts += [(($packetSize // $rxRingBufSize) + 1 if (($packetSize % $rxRingBufSize) > 0) else 0)]
    
    expectedRxDescCount = sum($rxDescCounts)
    rxDescCounts = $rxDescCounts[:-1]
    
    mac.rxring[0].clean
    #mac.rxring[0].status 
    mac.llh -v rxHeadAfter rdmRxDescriptorHeadPointerGet 0
    
    actualPositions = []
    ackPositions = []
    
    for d in $divider:
        ackPositions += [$acks[$d]]
    
    if ($rxHeadAfter != $expectedRxDescCount) and not($useACKOnly):
        finalReport += ["(0) Incorrect buffer count, Expected = $expectedRxDescCount, actual = $rxHeadAfter"]
        mac.rxring[0].dumpbuf -H 1:$rxHeadAfter --size 80
        mac.rxring[0].dumpdesc -H 1:$rxHeadAfter
    else:
        ii = 0
        iSum = 0
        oldThisCoalescedPackets = 0
        for i in $rxDescCounts:
            iSum += $i
            actualPosition = ($rxHeadAfter - $iSum)
            actualPositions += [$actualPosition]
            mac.rxring[0].getdescval -H $actualPosition -f bufferAddress -n addr $logTag
            
            # READING FULL HEADER
            if $ipv6:
                limit = 75
            else:
                limit = 55
            
            for a = 0; $a < $limit; a += 1:
                mem.get -p $addr -s 1 -n data
                bufStr$a = $data
                addr += 1
            
            # LOOKING FOR IPv4 TTL/IPv6 HOP LIMIT
            if $ipv6:
                start = 21
            else:
                start = 22
            len = 1
            end = $start + $len
            for a in range($start, $end):
                ttlHL = int(hex($(bufStr$a))[2:].zfill(2), 16)
            
            thisCoalescedPackets = $packetsCoalesced[$ii] + 1
            thisTTLs = $ttlsList[$oldThisCoalescedPackets:$thisCoalescedPackets]
            expectedTTLHL = min($thisTTLs)
            oldThisCoalescedPackets = $thisCoalescedPackets
            
            # LOOKING FOR IPV4 TOTAL LENGTH/IPv6 PAYLOAD LENGTH
            length = $payloads[$ii]
            if $ipv6:
                start = 18
                expectedLength = ($length + 20)
            else:
                start = 16
                expectedLength = ($length + 40)
            thisIndex = $start
            nextIndex = $thisIndex + 1
            thisByte = int(hex($(bufStr$thisIndex))[2:].zfill(2), 16)
            nextByte = int(hex($(bufStr$nextIndex))[2:].zfill(2), 16)
            totalLenth = $thisByte << 8 | $nextByte
            #echo TOTAL LENGTH: $totalLenth
            #echo EXPECTED LENGTH: $expectedLength
            
            # LOOKING FOR SEQUENCE NUMBER
            if $ipv6:
                start = 58
            else:
                start = 38
            len = 4
            end = $start + $len
            aa = 0
            for a in range($start, $end):
                tmp = int(hex($(bufStr$a))[2:].zfill(2), 16)
                bit$aa = $tmp
                aa += 1
            sequenceNumber = $bit0 << 24 | $bit1 << 16 | $bit2 << 8 | $bit3
            
            # LOOKING FOR ACKNOWNLEDGEMENT NUMBER
            if $ipv6:
                start = 62
            else:
                start = 42
            end = $start + $len
            aa = 0
            for a in range($start, $end):
                tmp = int(hex($(bufStr$a))[2:].zfill(2), 16)
                bit$aa = $tmp
                aa += 1
            acknowledgementNumber = $bit0 << 24 | $bit1 << 16 | $bit2 << 8 | $bit3
            
            # LOOKING FOR WINDOW SIZE
            if $ipv6:
                start = 68
            else:
                start = 48
            len = 2
            end = $start + $len
            aa = 0
            for a in range($start, $end):
                tmp = int(hex($(bufStr$a))[2:].zfill(2), 16)
                bit$aa = $tmp
                aa += 1
            windowSize = $bit0 << 8 | $bit1
            expectedWindowSize = $expectedWindows[$ii]
            
            # LOOKING FOR PUSH FLAG
            if $ipv6:
                start = 67
            else:
                start = 47
            push = 1 if (int(hex($(bufStr$start))[2:].zfill(2), 16) & 0x8) else 0
            expectedPush = $expectedPushes[$ii]
            
            if not($useACKOnly):
                prevValue = $ii - 1
                if $prevValue < 0:
                    currentPayload = $initialSeqNo
                else:
                    currentPayload += $payloads[$prevValue]
                
                if ($currentPayload != $sequenceNumber):
                    finalReport += ["(1) Incorrcet SEQ field in TCP header, Expected = $currentPayload, actual = $sequenceNumber. Descriptor: $actualPosition"]
            
                if ($expectedTTLHL != $ttlHL):
                    finalReport += ["(3) Incorrcet IPv4 TTL / IPv6 HOP LIMIT field in IP header, Expected = $expectedTTLHL, actual = $ttlHL. Descriptor: $actualPosition"]
                
                if ($expectedLength != $totalLenth):
                    finalReport += ["(4) Incorrcet IPv4 TOTAL LENGTH / IPv6 PAYLOAD LENGTH field in IP header, Expected = $expectedLength, actual = $totalLenth. Descriptor: $actualPosition"]
                    
                if ($expectedWindowSize != $windowSize):
                    finalReport += ["(5) Incorrcet WINDOW SIZE field in TCP header, Expected = $expectedWindowSize, actual = $windowSize. Descriptor: $actualPosition"]
                
                if ($expectedPush != $push):
                    finalReport += ["(6) Incorrcet PUSH flag in TCP header, Expected = $expectedPush, actual = $push. Descriptor: $actualPosition"]
            
            currentAck = $ackPositions[$ii]
            
            if ($currentAck != $acknowledgementNumber):
                finalReport += ["(2) Incorrcet ACK field in TCP header, Expected = $currentAck, actual = $acknowledgementNumber. Descriptor: $actualPosition"]
                
            ii += 1
    
    readreg 0x8800 # Tx Packet Count. (TDM)
    readreg 0x6800 # Rx Packet Count. (RDM)
    readreg 0x5794 # RPB Packet Count.
    readreg 0x6820 # Coalesced Packet Count (RRO).
    readreg 0x6828 # Abort Count (RRO).
    readreg 0x6830 # Coalesce Event Count (RRO).
    readreg 0x7900
    #mac.rxring[0].dumpbuf -H 1:$rxHeadAfter
    #mac.rxring[0].dumpdesc -H 1:$rxHeadAfter
    #mac.mpi.msm.counters
    #readreg 0x8808 -n goodOctetsDMA -l nul
    #goodOctetsDMA = hex($goodOctetsDMA)
    #echo DMA OCTETS: $goodOctetsDMA

    readreg 0x7040
    readreg 0x5040
    mac.uninit

exec $(PWD)/helpers/showTestResult.txt
