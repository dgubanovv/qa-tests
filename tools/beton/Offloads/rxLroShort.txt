# $File: //depot/icm/proj/Atlantic/rev1.0/software/Software/Test/AtlanticTestbench/Offloads/rxLroShort.txt $
# $Revision: #8 $
# $DateTime: 2016/11/07 03:19:21 $
# $Author: vryabov $
#
# Sends batch of short 240+54b TCP packets, which will be gathered on Rx in one normal 1494b packet + 4b for 802.1q

# WW stuf {
finalReport = []

ifndef test_num:
    test_num_ndef = True

ifndef test_num_ndef:
    test_num_ndef = False

if $test_num_ndef:
    echo !!!DEFAULT PARAMS APPLIED!!!
    logTag = -l cli
    givenTxPacketCount = 6
    givenTxHeaderLen = 54
    givenTxPayloadLen = 240
    givenTxPacketLen = $givenTxHeaderLen + $givenTxPayloadLen
    TPO2 = False
    RPF2 = False
else:
    givenTxPacketCount = 6
    givenTxHeaderLen = 54
    givenTxPayloadLen = 240
    givenTxPacketLen = $givenTxHeaderLen + $givenTxPayloadLen
    ifndef logTag:
        logTag = -l cli
# WW stuf }
ifndef TPO2:
    TPO2 = False 

ifndef RPF2:
    RPF2 = False


recvTc = 1
ringNo = 10
vlan_tag = 1

mac.get rxDcbTcCount -n rxTc -l nul

expectedRxPacketCount = 1
expectedRxHeaderLen = $givenTxHeaderLen
expectedRxPayloadLen = $givenTxPacketCount * $givenTxPayloadLen
expectedRxPacketLen = $expectedRxHeaderLen + $expectedRxPayloadLen + 4

mac.set loopback System Packet $logTag
mac.rfc.rss.enable

mac.init
mac.txinit
mac.rxinit
mac.isr.disable

if $TPO2:
    exec $(PWD)/helpers/enableTPO2.txt

if $RPF2:
    exec $(PWD)/helpers/enableRPF2.txt

mac.txring[$ringNo].enable
mac.txring[$ringNo].set PacketMark None

mac.rxring[0:31].enable
mac.rxring[0:31].fill
mac.rxring[0:31].commit

readreg 0x5030 -n bit5030
bit5030 = ($bit5030 >> 1) << 1
writereg 0x5030 $bit5030

writereg 0x00005590 0xFFFFFFFF
if 0: #llh bug
    mac.llh rpoLroAckPacketDisableSet 1
else:
    readreg 0x00005594 -n val
    val = $val| (1<<0xA)
    writereg 0x00005594 $val

mac.llh -v rxHeadBefore rdmRxDescriptorHeadPointerGet 0
mac.llh rpoLroMaxNumberOfDescriptorsSet 3 0
seqNo = 10

for i = 0; $i < $givenTxPacketCount; i += 1:
    pkt.new -n pkt$i -p $givenTxPayloadLen
    pkt.layer -i $(pkt$i) -L 50 -t TCP seq=$seqNo flags=0
    pkt.layer -i $(pkt$i) -L 30 -t IP 
    pkt.layer -i $(pkt$i) -L 20 -t Ether
    pkt.layer -i $(pkt$i) -L 50 seq=$seqNo
    pkt.rss -i $(pkt$i) -n hashKey$i
    seqNo += $givenTxPayloadLen

full_vlan_tag = $vlan_tag | ($recvTc << 13)
mac.txring[$ringNo].insertcontext -I 0 -V $full_vlan_tag

for i = 0; $i < $givenTxPacketCount; i += 1:
    mac.txring[$ringNo].insert -i $(pkt$i) -p $givenTxPacketLen -C 0 -v 1

hashKey = $hashKey0

for i = 1; $i < $givenTxPacketCount; i += 1:
    if $(hashKey$i) != $hashKey:
        echo SOMETHING MIGHT GO WRONG

rssRing = $recvTc * (4 if $rxTc > 4 else 8) + ($hashKey & (0x3 if $rxTc > 4 else 0x7))

echo RSS RING: $rssRing

mac.txring[$ringNo].commit
mac.txring[$ringNo].clean
mac.txring[$ringNo].status

mac.rxring[$rssRing].clean
mac.rxring[$rssRing].status
mac.llh -v rxHeadAfter rdmRxDescriptorHeadPointerGet $rssRing
actualRxPacketCount = ($rxHeadAfter - $rxHeadBefore )
if $expectedRxPacketCount != $actualRxPacketCount:
    finalReport += ["(0)Incorrect packet count, Expected = 1, actual = $actualRxPacketCount"]
else:
    mac.rxring[$rssRing].getdescval -f PKT_LEN -n actualRxPacketLen
    if $expectedRxPacketLen != $actualRxPacketLen:
        finalReport += ["(1)Incorrect packet len, Expected = $expectedRxPacketLen, actual = $actualRxPacketLen"]

readreg 0x000055B4
readreg 0x000055C0
readreg 0x00005598
readreg 0x00005594
readreg 0x00005590
readreg 0x000055A0

readreg 0x7040
readreg 0x5040
exec $(PWD)/helpers/showTestResult.txt
mac.uninit
