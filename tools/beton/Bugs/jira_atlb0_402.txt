finalReport = []

echo Start monoboost

###############################################################################
#Device parameters
tpbsize = 4
rpbsize = 8
txRingSize = 256
rxRingSize = 8
txRingBufSize = 2048
rxRingBufSize = 2048

maxtc = 4                    # TC count 4 or 8
testRing = 0                 # Number of test ring
booststat = False
dmastat = True
msmstat = False

#Set link/loopback/fc settings
mac.set -l nul no_mcp_link True
mac.set -l nul link        10G # None, 100M, 1G, 2.5G, 5G, 10G, Auto
mac.set -l nul loopback    Deep # None, Shallow, Deep, Msm, Serdes, PHY SIF, PHY NET. PHY SIF, PHY NET - stubs for future
mac.set -l nul fc          None # None, link, pfc
#mac.mpi.set mode           XFI  # XFI, SGMII, USXGMII

interrupts = 'Auto' # 'Auto', 'Single'

###############################################################################
#
if $maxtc == 8:
    q_ct = 4
else:
    q_ct = 8
###############################################################################
#Stream parameters

l2src = "30:e0:3e:11:22:33"
l2dst = "30:e0:3e:99:88:77"
l3Gen = 1
l3Src = "169.254.1.2"
l3Dst = "169.254.9.8"
noPayLoad = True
l4Gen = 1
l4Src = 0x1234

#Range for RSS
minl4Dst = 0x5678
maxl4Dst = 0x6789

###############################################################################
#Test parameters
boosttime = 10

integrity = True

tx_desc_cnt = 10000
rx_desc_cnt = 0#0x1000000

rxpause = 0 #100 nanosec intervals
rxinterpause = 0 #100 nanosec intervals

ifndef pktSize:
    echo Packet size is not set! Exiting
    exit

minSize = $pktSize              # Min packet size
maxSize = $pktSize            # Max packet size
minSegCount = 1              # Min segment count
maxSegCount = 1              # Max segment count
minOffset = 0                # Min offset
maxOffset = -1               # Max offset
loopbackPause = 50          #
maxWaitCount = 30           #
low_trsh_prc = 50           # RPB low level
high_trsh_prc = 66          # RPB high level

###############################################################################
# Fix max packet size and apply TPB/RPB settings
maxSize = min($maxSize, 1024*(min($tpbsize, $rpbsize)//$maxtc) - 18*16)
tpbPerTcSize = ($tpbsize//$maxtc)
rpbPerTcSize = ($rpbsize//$maxtc)
mac.set txDcbTcCount $maxtc -l nul
mac.set rxDcbTcCount $maxtc -l nul

mac.txpb[0:$maxtc].set -l nul size $tpbPerTcSize
mac.rxpb[0:$maxtc].set -l nul size $rpbPerTcSize
if $maxtc < 8:
    mac.txpb[$maxtc:8].set -l nul size 0
    mac.rxpb[$maxtc:8].set -l nul size 0

low_trsh = ($low_trsh_prc * ($rpbsize * 1024 // $maxtc) // 100) & 0x1FFE0
high_trsh = ($high_trsh_prc * ($rpbsize * 1024 // $maxtc) // 100) & 0x1FFE0

curtc = ($testRing // $q_ct)
mac.rpb[$curtc].set enableXoff True -l nul
mac.rpb[$curtc].set lowWaterMark $low_trsh -l nul
mac.rpb[$curtc].set hiWaterMark $high_trsh -l nul

tx_desc_cnt_str = '%d' % ($tx_desc_cnt) if $tx_desc_cnt > 0 else 'inf'
rx_desc_cnt_str = '%d' % ($rx_desc_cnt) if $rx_desc_cnt > 0 else 'inf'

###############################################################################
echo Boost time                     : $boosttime sec
echo Tx/Rx Descriptor Count         : $tx_desc_cnt_str/$rx_desc_cnt_str
echo Packet min/max size            : $minSize/$maxSize
echo Segment count min/max          : $minSegCount/$maxSegCount
echo Offset in buffer               : $minOffset/$maxOffset
echo TX/RX DMA Buf size             : $txRingBufSize/$rxRingBufSize
echo RPB Thresholds in percents     : $low_trsh_prc/$high_trsh_prc
echo TC number $maxtc. TPB/RPB per TC    : $tpbPerTcSize/$rpbPerTcSize

echo Test rings                     : $testRing

###############################################################################
#Enable rss and generate packets
mac.rfc.rss.enable -l nul

rssMask = (0x7 if $maxtc == 4 else 0x3)
echo Enable RSS                     : True

packetName = pkt$(testRing)_i
packetIndex = 0
packetCount = 1
vlanGen = 1
minPktSize = $minSize
maxPktSize = $maxSize

rssGen = ($testRing & $rssMask)
vlanPriority = ($testRing//$q_ct)
#dot
#echo $newline

exec $(PWD)/helpers/packetgen.txt
pkt$(testRing)Max = 1 #$uniqPacketPerRing
pkt$(testRing)Cur = 0

###############################################################################
# Apply settings for loopback and flow control
mac.get -l nul -n loopback loopback
mac.get -l nul -n flowControl fc
if '$loopback' in ['Deep'] or $flowControl is None:
    rxpause      = 0
    rxinterpause = 0
    echo No back-preassure for loopback type: $loopback
else:
    rxpstring = '%1.3f' % ($rxpause.0/10000000.0)
    rxipstring = '%1.3f' % ($rxinterpause.0/10000000.0)
    echo RPB back-preassure             : $rxpstring/$rxipstring sec

echo Loopback                       : $loopback
echo Flow Control                   : $flowControl

###############################################################################
# Apply interrupt settings
interruptState = ('Single' if $interrupts == 'Single' else 'Multi-Vector')
mac.isr.set Mode $interruptState -l nul
mac.isr.get Mode -n interruptState -l nul

###############################################################################
mac.init
###############################################################################

###############################################################################
# Enable interrupt booster and apply interrupt settings
mac.isr.vc -l nul -n vc
for i = 0; $i < $vc; i += 1:
    mac.isr.boost -v $i -e 1

echo Interrupts                     : $interruptState

mac.txring[$testRing].set wbThreshold 0 -l nul
vcr = ($testRing) % $vc#(31 - $testRing)
mac.txring[$testRing].set map2vector $vcr -l nul
mac.txring[$testRing].set map2cause $vcr -l nul

vcr = ($testRing + 1) % $vc#(31 - $testRing)
mac.rxring[$testRing].set map2vector $vcr -l nul
mac.rxring[$testRing].set map2cause $vcr -l nul

mac.set int_rx_desc_wrb_en False -l nul
mac.set int_rx_desc_nempty_en False -l nul
mac.set int_rx_desc_empty_en True -l nul

rxInterruptThreshold = 64

#Debug interrupts
#writereg 0x2a00 0xC0000000 -l nul #Enable debug counter for TDM 0
#writereg 0x2a04 0xC1000000 -l nul #Enable debug counter for RDM 0
#writereg 0x2a08 0xCD010000 -l nul #Enable debug counter for PHI INTERRUPT OUTPUT 0
#writereg 0x2a0C 0xCF010000 -l nul #Enable debug counter for MAPPED INTERRUPTS 0

###############################################################################
# Apply ring sizes and sizes of buffer for rings
mac.txring[$testRing].set bufSize $txRingBufSize -l nul
mac.txring[$testRing].set maxDmaSize $txRingBufSize -l nul
mac.rxring[$testRing].set bufSize $rxRingBufSize -l nul

ifdef txRingSize:
    mac.txring[$testRing].set -l nul size $txRingSize
ifdef rxRingSize:
    mac.rxring[$testRing].set -l nul size $rxRingSize

###############################################################################
mac.txinit
mac.rxinit
###############################################################################
#Kiran: try margin
#writereg 0x7904 0x86

###############################################################################
# Apply workarounds
if '$REVISION' == 'B0' and $FPGA:
    echo Apply Kiran's fix for TPB parity error in FPGA bug 5011
    readreg 0x7900 -n tpb_init -l nul
    tpb_init = $tpb_init & (~(1 << 3))
    writereg 0x7900 $tpb_init -l nul
    pause 10 ms

###############################################################################
# Enable rings and get ring size

mac.rxring[$testRing].set batchFill 0 -l nul #Disable autofill after interrupt
mac.txring[$testRing].set headWbEnable True -l nul
mac.rxring[$testRing].set wholeRing True -l nul #Fill whole ring

mac.txring[$testRing].enable
mac.rxring[$testRing].enable

ifndef txRingSize:
    mac.txring[$testRing].get -l nul -n txRingSize size
ifndef rxRingSize:
    mac.rxring[$testRing].get -l nul -n rxRingSize size
maxOffset = ($maxOffset if $maxOffset >= 0 else $txRingBufSize + $maxOffset)
mac.rxring[$testRing].set desc_lo_thresh $rxInterruptThreshold -l nul

echo TX/RX Ring size (desc count)   : $txRingSize/$rxRingSize

###############################################################################
#Enable link after rx ring enabling
linkstate = None
#mac.get -l nul -n setlink link
#mac.link Up -n linkstate -l nul
#if '$setlink' != 'None' and '$linkstate' == 'None' and not '$loopback' in ['Shallow', 'Deep']:
#    echo Error! No link!
#    mac.uninit
#    exit
#echo Link                           : $setlink/$linkstate

###############################################################################
echo Fill rings
#count = random.randint($minBatchCount, $maxBatchCount) + $maxBatchCount
txcount = 0
rxcount = 0
txbytesize = 0
prev_done_percent = 0
for j = 0; $j < $txRingSize and $txcount <= $txRingSize; j += 1: #$j < $count and
    done_percent = ($txcount * 40)/$txRingSize
    if $prev_done_percent != $done_percent:
        dot $done_percent
        prev_done_percent = $done_percent

    maxSegCountItr = min($txRingSize - $txcount, $maxSegCount)
    minSegCountItr = min($minSegCount, $maxSegCountItr)

    segcount = random.randint($minSegCountItr, $maxSegCountItr)
    curPktIdTag = pkt$(testRing)_i$(pkt$(testRing)Cur)
    packetSize = $minSize if random.randint(0, 1) == 1 else $maxSize#random.randint($minSize, min($maxSize, $segcount*$txRingBufSize))
    pkt.len -i $($curPktIdTag) -n hdr_size -l nul
    pay_len = ($packetSize - $hdr_size)
    pkt.layer -i $($curPktIdTag) -L 200 -t HEX -f rand_crc --pay_len $pay_len

    restSize = $packetSize
    minSegSize = 1
    maxSegSize = min($maxSize, $txRingBufSize)
    for k = 0; $k < $segcount and $restSize > 0; k += 1:
        params = -p $packetSize
        segSize = random.randint($minSegSize, $maxSegSize)

        segSize = max($segSize, $txRingBufSize if $txRingBufSize < ($restSize + $txRingBufSize - $segSize + $segcount - $k - 1)/($segcount - $k) else 0)
        if $restSize < $segSize or $k >= $segcount - 1:
            segSize = $restSize

        offset = random.randint($minOffset, max($minOffset, $maxOffset-$segSize))
        if $offset + $segSize > $txRingBufSize:
            echo Warning! Wrong offset $offset and segsize $segSize
            if $k < $segcount - 1:
                segSize = ($txRingBufSize - $offset)
            else:
                offset = ($txRingBufSize - $segSize)

        pktOffset = ($packetSize - $restSize)
        restSize -= $segSize
        maxSegSize = min($restSize, $txRingBufSize)

        params = -p $packetSize -o $offset -O $pktOffset -i $($curPktIdTag)

        if $restSize > 0:
            params = $params -e 0
        #else:
        #    rxcount += ($packetSize + $(rxRingBufSize) - 1) // $(rxRingBufSize)
        if ($txcount == 0) or ($txRingSize//2 == $txcount):
            params = $params -w 1
            #echo mark batch tx $txcount rx $rxcount j $j count $count rxRingSize $rxRingSize txRingSize $txRingSize
        params = $params -b $segSize

        #echo mac.txring[$testRing].insert $params
        mac.txring[$testRing].insert $params
        txcount += 1
        txbytesize += $segSize
        #params = -T 1 -l dumptx
        #mac.txring[$testRing].dumpdesc $params
        #mac.txring[$testRing].dumpbuf $params
    pkt.delayer -i $($curPktIdTag) -L 200

lastBatchCount = $j  #for packet and desc counting
mac.rxring[$testRing].fill $rxRingSize
mac.rxring[$testRing].dumpdesc 0:$rxRingSize -l nul
#echo tx $txcount rx $rxcount j $j count $count rxRingSize $rxRingSize txRingSize $txRingSize
txDmaPacketCounter = 0
rxDmaPacketCounter = 0
txDmaBytesCounter = 0
rxDmaBytesCounter = 0
txMsmPacketCounter = 0
rxMsmPacketCounter = 0
txMsmBytesCounter = 0
rxMsmBytesCounter = 0

###############################################################################
echo Start boost
rxboostparam = -e 1 -s 65536 -c $rx_desc_cnt -p $rxpause -i $rxinterpause
if $integrity:
    rxboostparam = $rxboostparam -v
else:
    rxboostparam = $rxboostparam -t wrong_desc

log.hw disable
#mac.rxring[$testRing].boost $rxboostparam
log.boost disable
#pause
#echo TX/RX MSM PAUSE
#mac.mpi.msm.counters -a pause

mac.txring[$testRing].boost -e 1 -c $tx_desc_cnt

txBoostEnable = True
rxBoostTotalPackets = 0
rxBoostTotalBytes = 0
txBoostTotalPackets = 0
txBoostTotalBytes = 0
txLastBoostTotalBytes = 0
txLastBoostTotalPackets = 0
rxLastBoostTotalBytes = 0
rxLastBoostTotalPackets = 0
lastBoostTxTime = 0
lastBoostRxTime = 0
lastRxWrongPacketCount = 0

###############################################################################
# Main loop/waiting
if $boosttime > 0:
    for i = 0; $i <= $boosttime; i += 1:
        pause 1
		echo Time: $i s
        readreg 0x7918 -n err_check
        err = $err_check & 0x200
        if $err == 0x200:
            readreg 0x7918
			finalReport += ['TPB overflow bit is active!']
            break

###############################################################################
# Stop boosting
mac.txring[$testRing].boost -e 0
pause 10
mac.rxring[$testRing].boost -e 0
log.hw enable
log.boost enable
mac.txring[$testRing].clean
echo Stop boost

echo Get statistic
mac.txring[$testRing].boostStat -t boostTxTime -H boostTxHead -c boostTxCount
mac.rxring[$testRing].boostStat -t boostRxTime -H boostRxHead -c boostRxCount -s rxBoostTotalBytes -w rxWrongDescCount -W rxWrongPacketCount

if $rxWrongPacketCount > 0:
    echo Warning! Received $rxWrongPacketCount packets with wrong crc!

txBoostTotalBytes = $txbytesize * $boostTxCount + $txbytesize * $boostTxHead // $txRingSize
txBoostTotalPackets = $lastBatchCount * $boostTxCount + $lastBatchCount * $boostTxHead // $txRingSize

echo Boost resuslts

if $boostTxTime != 0:
    txBoostAvgMpps = '%01.03f' % ($txBoostTotalPackets * 10.0 / $boostTxTime)
    txBoostAvgGbps = '%01.03f' % ($txBoostTotalBytes * 80000000.0 / ($boostTxTime * 1000 * 1000 * 1000))
    txBoostTxTimeSec = '%01.03f' % ($boostTxTime / 10000000.0)
    echo TX Boost: ~$txBoostAvgMpps Mpps, ~$txBoostAvgGbps Gbps for $txBoostTxTimeSec sec
else:
    echo TX Raw: Time $boostTxTime (100 ns), counter $boostTxCount (of $lastBatchCount packets), head $boostTxHead

if $boostRxTime:
    rxBoostTotalPackets = $rxRingSize * $boostRxCount + $boostRxHead - $rxWrongDescCount
    rxBoostAvgMpps = '%01.03f' % ($rxBoostTotalPackets * 10.0 / $boostRxTime)
    rxBoostAvgGbps = '%01.03f' % ($rxBoostTotalBytes * 80000000.0 / ($boostRxTime * 1000 * 1000 * 1000))
    rxBoostRxTimeSec = '%01.03f' % ($boostRxTime / 10000000.0)

    echo RX Boost: ~$rxBoostAvgMpps Mpps, ~$rxBoostAvgGbps Gbps for $rxBoostRxTimeSec sec
else:
    echo RX Raw: Time $boostRxTime (100 ns), counter $boostRxCount (of $rxRingSize descriptors), head $boostRxHead, received data size $rxBoostTotalBytes, wrong descriptor count $rxWrongDescCount

if $boostTxTime != 0 and $boostRxTime:
	echo Boost Packet/Bytes Counters: TX $txBoostTotalPackets/$txBoostTotalBytes, RX $rxBoostTotalPackets/$rxBoostTotalBytes

echo TX DMA
readreg 0x8800:0x880c
echo RX DMA
readreg 0x6800:0x680c

echo TX/RX MSM PKT/OCT
mac.mpi.msm.counters -a base

echo TX/RX MSM PAUSE
mac.mpi.msm.counters -a pause

#mac.mpi.msm.counters

#Debug interrupts
#readreg 0x2a00:0x2a0c
#writereg 0x2a00:0x2a0c 0x10000000 -l nul #Disable debug counters

#exec Legacy/Samples/readstat.txt
#readreg 0x0:0x8ffc
#writereg 0x3a0:0x3ac 1 -l nul
#readreg msm 0x0:0x350
#dumpNWL -c 32

for i = 0; $i < $vc; i += 1:
    mac.isr.boost -v $i -e 0
mac.txring[$testRing].set wbThreshold 1 -l nul
mac.rxring[$testRing].set -l nul wholeRing False #Fill whole ring

rr 0x7918
#bit 9
mac.txuninit
mac.rxuninit
mac.uninit

exec $PWD/helpers/showTestResult.txt

undef -n pktSize