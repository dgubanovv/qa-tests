# $File: //depot/icm/proj/Atlantic/rev1.0/software/Software/Test/AtlanticTestbench/Bugs/bug5069.txt $
# $Revision: #3 $
# $DateTime: 2016/06/27 06:23:00 $
# $Author: oxy $
#
# bug5069: Test IPv6+OPT  TCP checksum offload (compares tx packet vs rx one with RPO/TPO checksum offloads turned on & off for valid/invalid checksum in packet)

finalReport = []

test_num_ndef = False
ifndef test_num:
    test_num_ndef = True

if $test_num_ndef:
    echo !!!DEFAULT PARAMS APPLIED!!!
    ringNo = 0
    logTag = -l cli
else:
    ifndef ringNo:
        ringNo = 0
    ifndef logTag:
        logTag = -l cli


mac.uninit
mac.init

mac.isr.disable
mac.set loopback System Packet $logTag

#prepare txring
mac.txinit
mac.txring[$ringNo].enable

#prepare rxring to get loopbacked packet
mac.rxinit
mac.rxring[$ringNo].enable

#enable parsing of IP v6 extension headers (turn on Wesley secret bit)
readreg 0x5104 -n reg5104 $logTag
en_ip_v6_parse = $reg5104 | 0x40
writereg 0x5104 $en_ip_v6_parse $logTag
readreg 0x5104 -n reg5104 $logTag

exec $(PWD)/helpers/versionSpecificInit.txt

#initial TCP checksum 0x77 0xae is invalid
givenPacket = 0x30 0x0e 0xe3 0xb0 0xab 0xcd 0xa0 0x36 0x9f 0x3e 0x49 0xac 0x86 0xdd 0x6a 0x00 0x79 0xab 0x00 0xca 0x3c 0xff 0xfe 0x80 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x01 0xfe 0x80 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x02 0x06 0x02 0x01 0x02 0xef 0xbe 0xad 0x01 0xef 0xbe 0xad 0xde 0xef 0xbe 0xad 0xde 0xef 0xbe 0xad 0xde 0xef 0xbe 0xad 0xde 0xff 0x7f 0xff 0x7f 0x00 0x00 0x06 0x2c 0x00 0x00 0x00 0x00 0x50 0x00 0x02 0x00 0x77 0xae 0x00 0x00 0x4e 0x44 0x49 0x53 0x01 0x79 0x8a 0x00 0xa0 0x67 0x1b 0x87 0x0d 0x00 0x00 0x00 0x14 0x00 0x00 0x00 0x79 0x7a 0x7b 0x7c 0x7d 0x7e 0x7f 0x80 0x81 0x82 0x83 0x84 0x85 0x86 0x87 0x88 0x89 0x8a 0x8b 0x8c 0x8d 0x8e 0x8f 0x90 0x91 0x92 0x93 0x94 0x95 0x96 0x97 0x98 0x99 0x9a 0x9b 0x9c 0x9d 0x9e 0x9f 0xa0 0xa1 0xa2 0xa3 0xa4 0xa5 0xa6 0xa7 0xa8 0xa9 0xaa 0xab 0xac 0xad 0xae 0xaf 0xb0 0xb1 0xb2 0xb3 0xb4 0xb5 0xb6 0xb7 0xb8 0xb9 0xba 0xbb 0xbc 0xbd 0xbe 0xbf 0xc0 0xc1 0xc2 0xc3 0xc4 0xc5 0xc6 0xc7 0xc8 0xc9 0xca 0xcb 0xcc 0xcd 0xce 0xcf 0xd0 0xd1 0xd2 0xd3 0xd4 0xd5 0xd6 0xd7 0xd8 0xd9 0xda 0xdb 0xdc 0xdd 0xde 0xdf 0xe0 0xe1 0xe2 0xe3 0xe4 0xe5 0xe6 0xe7 0xe8 0xe9 0xea 0xeb 0xec 0xed 0xee 0xef 0xf0 0xf1 0xf2 0xf3 0xf4 0xf5 0xf6 0xf7 0xf8 0xf9 0xfa 0xfb 0xfc 0xfd 0xfe 0xff 0x00 0x01 0x02
givenChecksumOffset = 0x5e
expectedChecksum = 0x88 0xae
expectedChecksum_byte0 = 0x88
expectedChecksum_byte1 = 0xae
packetLen = '$givenPacket'.count('0x')

# select RPO block (debug only)
#hw_options = B0RRO


# --- varying code below ---
# set variables for pkt helpers
setChecksumToCorrectValue = 0
checksumShouldBeCorrected = 0
txRingInsertParams = -b $packetLen -p $packetLen -f indexed_uniq_ramp -u 1 -s 1

### 1 ###
# SETTINGS == offloads: TPO=0 RPO=1, sent packet check_sum invalid
# TPO/RPO checksum offloads setup
mac.llh tpoTcpUdpChecksumOffloadEnableSet 0
mac.llh rpoTcpUdpChecksumOffloadEnableSet 1

exec $(PWD)/helpers/pkt_send.txt # fill one packet and send it

#compare received packet vs transmitted
mem.cmp -s $packetLen -p $pAddrRx -p2 $pAddrTx -n checkSumCompareResult $logTag
#check for Rx descriptor w/b format bits RX_STAT
if ($rx_cntl & 0x2) and (not ($rx_stat & 0xc)):
    finalReport += ['(0) TPO TCP checksum offload is off, RPO TCP checksum offload is on, received packet had invalid TCP checksum, ']
    finalReport += ['   but writebacked RX descriptor field RX_STAT bits 2-3 (TCP/UDP checksum error) are not set:']
#mem.dump -p $pAddrRxChecksum -s 2 $logTag

exec $(PWD)/helpers/pkt_bytes_cmp.txt


checksumShouldBeCorrected = 1
### 2 ###
# SETTINGS == offloads: TPO=1 RPO=0, sent packet check_sum invalid
# TPO/RPO checksum offloads setup
mac.llh tpoTcpUdpChecksumOffloadEnableSet 1
mac.llh rpoTcpUdpChecksumOffloadEnableSet 0

exec $(PWD)/helpers/pkt_send.txt # fill one packet and send it

#compare received packet vs transmitted
mem.cmp -s $packetLen -p $pAddrRx -p2 $pAddrTx -n checkSumCompareResult $logTag
exec $(PWD)/helpers/pkt_bytes_cmp.txt

if $checkSumCompareResult:
    finalReport += ['(1) TPO TCP checksum offload is on, RPO TCP checksum offload is off, received TCP checksum equals to transmitted (invalid) checksum']



checksumShouldBeCorrected = 0
setChecksumToCorrectValue = 1
### 3 ###
# SETTINGS == offloads: TPO=0 RPO=1, sent packet check_sum valid
# TPO/RPO checksum offloads setup
mac.llh tpoTcpUdpChecksumOffloadEnableSet 0
mac.llh rpoTcpUdpChecksumOffloadEnableSet 1

exec $(PWD)/helpers/pkt_send.txt # fill one packet and send it

#compare received packet vs transmitted
mem.cmp -s $packetLen -p $pAddrRx -p2 $pAddrTx -n checkSumCompareResult $logTag
#check for Rx descriptor w/b format bits RX_STAT
if ($rx_cntl & 0x2) and ($rx_stat & 0xc):
    finalReport += ['(2) TPO TCP checksum offload is off, RPO TCP checksum offload is on, received packet had valid TCP checksum, ']
    finalReport += ['   but writebacked RX descriptor field RX_STAT bits 2-3 (TCP/UDP checksum error) are set']
#mem.dump -p $pAddrRxChecksum -s 2 $logTag

exec $(PWD)/helpers/pkt_bytes_cmp.txt

if not $checkSumCompareResult:
    finalReport += ['(3) TPO TCP checksum offload is off, RPO TCP checksum offload is on, received TCP checksum is not equal to transmitted (valid) checksum']


checksumShouldBeCorrected = 1
### 4 ###
# SETTINGS == offloads: TPO=1 RPO=0, sent packet check_sum valid
# TPO/RPO checksum offloads setup
mac.llh tpoTcpUdpChecksumOffloadEnableSet 1
mac.llh rpoTcpUdpChecksumOffloadEnableSet 0

exec $(PWD)/helpers/pkt_send.txt # fill one packet and send it

#compare received packet vs transmitted
mem.cmp -s $packetLen -p $pAddrRx -p2 $pAddrTx -n checkSumCompareResult $logTag
#check for Rx descriptor w/b format bits RX_STAT
if ($rx_cntl & 0x2) and ($rx_stat & 0xc):
    finalReport += ['(4) TPO TCP checksum offload is on, RPO TCP checksum offload is off, received packet had valid TCP checksum, ']
    finalReport += ['   but writebacked RX descriptor field RX_STAT bits 2-3 (TCP/UDP checksum error) are set']
#mem.dump -p $pAddrRxChecksum -s 2 $logTag

exec $(PWD)/helpers/pkt_bytes_cmp.txt

if not $checkSumCompareResult:
    finalReport += ['(5) TPO TCP checksum offload is on, RPO TCP checksum offload is off, received TCP checksum is not equal to transmitted (valid) checksum']

exec $(PWD)/helpers/showTestResult.txt

mac.txuninit
mac.rxuninit
mac.uninit
