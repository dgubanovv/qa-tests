# Script for testing Checksum error feature of extraction on mng queue0 using mac filter

hostAlreadyInitiated = False
txRingNo = 0
logTag = -l cli

# Packet send prepare
if $hostAlreadyInitiated == False:
    mac.set loopback System Packet $logTag           # No loopback
    mac.rxring[$rxRingNo].get splitHeaderSize -n splitHeaderSize $logTag
    if $splitHeaderSize == None:
        mac.rxring[$rxRingNo].set splitHeaderSize 256 $logTag
    
    mac.init

    mac.txinit
    mac.txring[$txRingNo].enable    # Prepare Tx ring
    mac.rxinit
    mac.rxring[$txRingNo].enable
    mac.rxring[$txRingNo].fill
    mac.rxring[$txRingNo].commit

    mac.llh rpfL2PromiscuousModeEnableSet 1
    mac.llh rpfVlanPromiscuousModeEnableSet 1

etherPacket = 0x74 0xd4 0x35 0xe8 0xfe 0x9f 0x00 0x07 0x43 0x14 0xe9 0xe8 0x81 0x00 0xa0 0x00 0x00 0x32 0xaa 0xaa 0x03 0x00 0x00 0x00 0x81 0x37 0x4e 0x44 0x49 0x53 0x08 0x5e 0x0e 0x00 0x82 0x54 0x00 0x00 0x63 0x00 0x00 0x00 0x05 0x00 0x02 0x00 0xa0 0xdc 0x08 0xe0 0x8d 0x16 0x00 0x00 0x5e 0x5f 0x60 0x61 0x62 0x63 0x64 0x65 0x66 0x67 0x68 0x69 0x6a 0x6b 0xb4 0x0e 0xa8 0xf6
#etherPacket = 0x10 0xdd 0xb1 0xb0 0x37 0xd3 0x10 0xfe 0xed 0x02 0x32 0x59 0x08 0x00 0x45 0x00 0x00 0x34 0x4c 0x88 0x00 0x00 0x80 0x11 0x5f 0xa8 0xac 0x1b 0x1b 0x2a 0xac 0x1b 0x1b 0x28 0xc4 0x6c 0xe3 0x93 0x00 0x20 0xe9 0x10 0x00 0x00 0x00 0x00 0x41 0x0c 0x01 0x00 0xdf 0x20 0x00 0x17 0x24 0x6f 0x08 0x00 0x20 0x86 0x00 0x80 0x70 0xda 0x00 0x80

finalReport = [] # final report is useful when command line window has huge output


packetLen = '$etherPacket'.count('0x')
mac.txring[$txRingNo].insert -b $packetLen -p $packetLen -f indexed_uniq_ramp
mac.txring[$txRingNo].getdescval -T 1 -f bufferAddress -n pAddr $logTag
# Insert packet
mem.put $etherPacket -s 1 -p $pAddr

mac.txring[$txRingNo].status $logTag
mac.rxring[$txRingNo].status $logTag


mac.txring[$txRingNo].dumpdesc -T 1 $logTag
mac.txring[$txRingNo].dumpbuf -T 1 $logTag
mac.txring[$txRingNo].commit
mac.txring[$txRingNo].clean
mac.rxring[$txRingNo].clean
mac.txring[$txRingNo].status $logTag

mac.rxring[$txRingNo].status
mac.rxring[$txRingNo].getdescval -H 1 -f HDR_LEN -n hdrSize
mac.rxring[$txRingNo].getdescval -H 1 -f PKT_LEN -n pktLen
echo $pktLen
if $packetLen != $pktLen:
    finalReport += ["Incorrect packet length $pktLen, expected($packetLen)"]
if $hdrSize != 26:
    finalReport += ["Incorrect header length $hdrSize, expected(26)"]
mac.rxring[$txRingNo].dumpbuf -H 1 $logTag
mac.txring[$txRingNo].dumpdesc -H 1 $logTag

mac.uninit
mac.rxring[$rxRingNo].set splitHeaderSize None $logTag
exec $(PWD)/helpers/showTestResult.txt