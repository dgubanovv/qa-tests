# $File: //depot/icm/proj/Atlantic/rev1.0/software/Software/Test/AtlanticTestbench/Bugs/bug5138.txt $
# $Revision: #2 $
# $DateTime: 2016/06/27 06:47:16 $
# $Author: oxy $
#
# bug5138: Test IPv4 checksum offload (compares tx packet vs rx one with RPO/TPO checksum offloads turned on & off for valid/invalid checksum in packet)

finalReport = []

test_num_ndef = False
ifndef test_num:
    test_num_ndef = True

if $test_num_ndef:
    echo !!!DEFAULT PARAMS APPLIED!!!
    ringNo = 0
    logTag = -l cli
else:
    ifndef ringNo:
        ringNo = 0
    ifndef logTag:
        logTag = -l cli


mac.uninit
mac.init

mac.isr.disable
mac.set loopback System Packet $logTag

#prepare txring
mac.txinit
mac.txring[$ringNo].enable

#prepare rxring to get loopbacked packet
mac.rxinit
mac.rxring[$ringNo].enable

exec $(PWD)/helpers/versionSpecificInit.txt

#initial IPv4 header checksum 0xc3 0xbb is invalid
givenPacket = 0xa0 0x36 0x9f 0x3e 0x49 0xac 0x30 0x0e 0xe3 0xb0 0xb6 0x9e 0x08 0x00 0x4f 0xa8 0x00 0x3d 0x00 0x00 0x40 0x00 0x05 0xff 0xc3 0xbb 0x1a 0x2a 0x3a 0x4a 0x1b 0x2b 0x3b 0x4b 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0xa8
givenChecksumOffset = 0x18
expectedChecksum = 0xbf 0x30
expectedChecksum_byte0 = 0xbf
expectedChecksum_byte1 = 0x30
packetLen = '$givenPacket'.count('0x')

# select RPO block (debug only)
#hw_options = B0RRO


# --- varying code below --- 
# set variables for pkt helpers
setChecksumToCorrectValue = 0
checksumShouldBeCorrected = 0
txRingInsertParams = -b $packetLen -p $packetLen -f indexed_uniq_ramp -u 1 -s 1

### 1 ###
# SETTINGS == offloads: TPO=0 RPO=1, sent packet check_sum invalid
# TPO/RPO checksum offloads setup
mac.llh tpoIpv4HeaderChecksumOffloadEnableSet 0
mac.llh rpoIpv4HeaderChecksumOffloadEnableSet 1

exec $(PWD)/helpers/pkt_send.txt # fill one packet and send it

#compare received packet vs transmitted
mem.cmp -s $packetLen -p $pAddrRx -p2 $pAddrTx -n checkSumCompareResult $logTag
#check for Rx descriptor w/b format bits RX_STAT
if ($rx_cntl & 0x1) and (not ($rx_stat & 0x2)):
    finalReport += ['(0) TPO IPv4 header checksum offload is off, RPO IPv4 header checksum offload is on, received packet had invalid IPv4 header checksum, ']
    finalReport += ['   but writebacked RX descriptor field RX_STAT bit 1 (IPv4 header checksum error) is not set']
#mem.dump -p $pAddrRxChecksum -s 2 $logTag

exec $(PWD)/helpers/pkt_bytes_cmp.txt


checksumShouldBeCorrected = 1
### 2 ###
# SETTINGS == offloads: TPO=1 RPO=0, sent packet check_sum invalid
# TPO/RPO checksum offloads setup
mac.llh tpoIpv4HeaderChecksumOffloadEnableSet 1
mac.llh rpoIpv4HeaderChecksumOffloadEnableSet 0

exec $(PWD)/helpers/pkt_send.txt # fill one packet and send it

#compare received packet vs transmitted
mem.cmp -s $packetLen -p $pAddrRx -p2 $pAddrTx -n checkSumCompareResult $logTag
exec $(PWD)/helpers/pkt_bytes_cmp.txt

if $checkSumCompareResult:
    finalReport += ['(1) TPO IPv4 header checksum offload is on, RPO IPv4 header checksum offload is off, received IPv4 header checksum equals to transmitted (invalid) checksum']



checksumShouldBeCorrected = 0
setChecksumToCorrectValue = 1
### 3 ###
# SETTINGS == offloads: TPO=0 RPO=1, sent packet check_sum valid
# TPO/RPO checksum offloads setup
mac.llh tpoIpv4HeaderChecksumOffloadEnableSet 0
mac.llh rpoIpv4HeaderChecksumOffloadEnableSet 1

exec $(PWD)/helpers/pkt_send.txt # fill one packet and send it

#compare received packet vs transmitted
mem.cmp -s $packetLen -p $pAddrRx -p2 $pAddrTx -n checkSumCompareResult $logTag
#check for Rx descriptor w/b format bits RX_STAT
if ($rx_cntl & 0x1) and ($rx_stat & 0x2):
    finalReport += ['(2) TPO IPv4 header checksum offload is off, RPO IPv4 header checksum offload is on, received packet had valid IPv4 header checksum, ']
    finalReport += ['   but writebacked RX descriptor field RX_STAT bit 1 (IPv4 header checksum error) is set']
#mem.dump -p $pAddrRxChecksum -s 2 $logTag

exec $(PWD)/helpers/pkt_bytes_cmp.txt

if not $checkSumCompareResult:
    finalReport += ['(3) TPO IPv4 header checksum offload is off, RPO IPv4 header checksum offload is on, received IPv4 header checksum is not equal to transmitted (valid) checksum']


checksumShouldBeCorrected = 1
### 4 ###
# SETTINGS == offloads: TPO=1 RPO=0, sent packet check_sum valid
# TPO/RPO checksum offloads setup
mac.llh tpoIpv4HeaderChecksumOffloadEnableSet 1
mac.llh rpoIpv4HeaderChecksumOffloadEnableSet 0

exec $(PWD)/helpers/pkt_send.txt # fill one packet and send it

#compare received packet vs transmitted
mem.cmp -s $packetLen -p $pAddrRx -p2 $pAddrTx -n checkSumCompareResult $logTag
#check for Rx descriptor w/b format bits RX_STAT
if ($rx_cntl & 0x1) and ($rx_stat & 0x2):
    finalReport += ['(4) TPO IPv4 header checksum offload is on, RPO IPv4 header checksum offload is off, received packet had valid IPv4 header checksum, ']
    finalReport += ['   but writebacked RX descriptor field RX_STAT bit 1 (IPv4 header checksum error) is set']
#mem.dump -p $pAddrRxChecksum -s 2 $logTag

exec $(PWD)/helpers/pkt_bytes_cmp.txt

if not $checkSumCompareResult:
    finalReport += ['(5) TPO IPv4 header checksum offload is on, RPO IPv4 header checksum offload is off, received IPv4 header checksum is not equal to transmitted (valid) checksum']

exec $(PWD)/helpers/showTestResult.txt

mac.txuninit
mac.rxuninit
mac.uninit
