# $File: //depot/icm/proj/Atlantic/rev1.0/software/Software/Test/AtlanticTestbench/Bugs/bug4646.txt $
# $Revision: #1 $
# $DateTime: 2016/03/16 09:43:27 $
# $Author: pbelous $
#
# RPF: Need "ALL MULTUCAST" filter bit to pass WHQL

finalReport = [] #mandatory clear, empty means tests passed.

ifndef logTag:
    logTag = -l cli
ifndef rxRingNo:
    rxRingNo = 0
ifndef txRingNo:
    txRingNo = 0
    
mac.set loopback System Packet $logTag #deep loopback


mac.init
mac.txinit
mac.txring[$txRingNo].enable

mac.rxinit
mac.rxring[$rxRingNo].enable
mac.rxring[$rxRingNo].fill
mac.rxring[$rxRingNo].commit

#Disable Promisc

mac.llhcache on
mac.llh -C rpfL2BroadcastCountThresholdSet 256
mac.llh -C rpfL2BroadcastFilterActionSet 1
mac.llh -C rpfRxPathByteSwapEnableSet 0
mac.llh -C rpfL2PromiscuousModeEnableSet 0
mac.llh -C rpfL2BroadcastEnableSet 0
mac.llh -C rpfVlanPromiscuousModeEnableSet 1
mac.llh -C rpfDoubleVlanEnableSet 0
mac.llhcache off



#configure multicast filter for IPv4 multicasts
filterMulticastIndex = 0
filterMulticastEnable = 1
filterMulticastAction = 1
filterMulticastMacAddr = 0x010

#L2 Multicast Destination Address Offset
#0 = bits[47:36]
#1 = bits[46:35]
#2 = bits[45:34]
#3 = bits[43:32]
mac.llh -C rpfL2MulticastDestinationAddressOffsetSet 0

mac.llh rpfL2MulticastDestinationAddressMaskSet 0xfff
mac.llh rpfL2AcceptAllMulticastPacketsSet 1

exec $(PWD)/helpers/filtersConfigurators/rxMulticastFilter.txt


#create unicast packet
macAddrSrcStr = '[0x21,0x22,0x23,0x24,0x25,0x26]'
macAddrDstStrs = ['[0x80,0x00,0x20,0x14,0x15,0x16]', '[0xff,0xff,0xff,0xff,0xff,0xff]', '[0x01,0x00,0x5e,0x01,0x02,0x03]','[0x01,0x80,0xC2,0x00,0x00,0x00]','[0x33,0x33,0x11,0x22,0x33,0x44]']

packetTypesStr = ['Unicast','Broadcast','Multicast IPv4 (filter match)', 'Spanning Tree (filter not match)', 'Multicast IPv6']

espectRxCount = [0,0,1,1,1]
#espectRxCount = [1,1,0,0,0] #fail

countPackets = 0

for macAddrDstStr in $macAddrDstStrs :
    # Get Rx head before packet insertion
    mac.llh -v rxHeadBefore rdmRxDescriptorHeadPointerGet $rxRingNo

    pkt.new -n pkt$countPackets -p 32
    pkt.layer -i $(pkt$countPackets) -L 60 -t ICMP
    pkt.layer -i $(pkt$countPackets) -L 50 -t IP
    pkt.layer -i $(pkt$countPackets) -L 25 -t Ether src=$macAddrSrcStr type=0x800 dst=$macAddrDstStr

    mac.txring[$txRingNo].insert -i $(pkt$countPackets) -b 74

    mac.txring[$txRingNo].commit
    mac.txring[$txRingNo].clean
    mac.rxring[$rxRingNo].clean

    mac.txring[$txRingNo].status $logTag
    mac.rxring[$rxRingNo].status $logTag
    
    #Check packet in rx ring
    mac.llh -v rxHeadGood rdmRxDescriptorHeadPointerGet $rxRingNo
    
    rxCount = ($rxHeadGood - $rxHeadBefore)
    if $rxCount != $espectRxCount[$countPackets]:
        packetType = $packetTypesStr[$countPackets]
        if $rxCount == 0 :
            finalReport += ['($countPackets)$packetType packet was not received']
        else :
            finalReport += ['($countPackets)$packetType packet was received']

    countPackets += 1


#Show result
exec $(PWD)/helpers/showTestResult.txt


mac.uninit
