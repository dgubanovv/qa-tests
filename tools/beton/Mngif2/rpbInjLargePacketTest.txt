# Script for large packets injection on mng queue0
# To make test packets unique, $mark variable is used. It is incremented on every run.
# But it should be initialized with start value before first run, e.g. mark = 0 in cli
# or by pseudo-condition in this script

finalReport = []
hostAlreadyInitiated = False

ifndef test_num:
    test_num_ndef = True

ifndef test_num_ndef:
    test_num_ndef = False

if $test_num_ndef:
    echo !!!DEFAULT PARAMS APPLIED!!!
    rxRingNo = 0
    queue = 0
    injType = rx
    packetMaxSizeKB = 1
    logTag = -l cli
else:
    ifndef rxRingNo:
        rxRingNo = 0
    ifndef queue:
        queue = 0
    ifndef injType:
        injType = rx
    ifndef packetMaxSizeKB:
        packetMaxSizeKB = 1
    ifndef logTag:
        logTag = -l cli

truncatePackets = True

ifndef mark:
    mark = 0
    
expectedFreeByteCount = 512*16 #counter in unit 16b

injType = rx
txRingNo = 0

# Packet receive prepare
if $hostAlreadyInitiated == False:
    if '$injType' == 'tx':
        mac.set loopback System Packet $logTag # deep loopback
    else:
        mac.set loopback None $logTag # No loopback
    mac.init
    mac.isr.disable
    if '$injType' == 'tx':
        mac.txinit
        mac.txring[$txRingNo].enable # Prepare Tx ring
    mac.rxinit
    mac.rxring[$rxRingNo].enable # Prepare Rx ring
    mac.rxring[$rxRingNo].fill # Without parameters: by default 0xFFFF
    mac.rxring[$rxRingNo].commit # Without parameters: by default 0xFFFF

exec $(PWD)/helpers/versionSpecificInit.txt
exec $(PWD)/helpers/workaroundBug3991.txt
exec $(PWD)/helpers/enableTPO2.txt

mac.rxring[$rxRingNo].status -l cli

mark = $mark + 1

if '$injType' == 'tx':
    exec $(PWD)/helpers/tpbInjectorLlhNames.txt
else:
    exec $(PWD)/helpers/rpbInjectorLlhNames.txt
# Rx Injector prepare

pktType = 0

# Set mode

if '$injType' == 'tx':
    mac.llh rpfL2PromiscuousModeEnableSet 1
    mac.llh rpfVlanPromiscuousModeEnableSet 1
    mac.llh rpfL2BroadcastCountThresholdSet 256
    mac.llh rpfL2BroadcastFilterActionSet 2
    mac.llh rpfL2BroadcastCountResetSet 0
    mac.llh rpfRxPathByteSwapEnableSet 0
    mac.llh rpfL2BroadcastEnableSet 0

if $packetMaxSizeKB == 1:
    maxPacketLen = 1024
else:
    maxPacketLen = 2048

if '$injType' == 'tx':
    headerLen = 12
else:
    headerLen = 16
# removed header len subtraction after fix
# packetLen = ($maxPacketLen - $headerLen)
packetLen = $maxPacketLen

mac.llh -v rxHeadBefore rdmRxDescriptorHeadPointerGet $rxRingNo
# Inject

# Select injection queue
mac.llh $injectionSelectSet $(queue)

# SOP = 1
mac.llh $injectionPacketSopSet 1

# Packet Len Header Word
if '$injType' == 'tx':
    headerWord = $packetLen
else:
    headerWord = ($packetLen << 16)
mac.llh $injectionPacketDataSet $headerWord

# SOP = 0
mac.llh $injectionPacketSopSet 0

rpbHdrQueueNumShift = 12
rpbHdrPktTypeShift = 4
# Header Rest

for hdrByteCnt = 4; $hdrByteCnt < $headerLen; hdrByteCnt += 4:
    if $hdrByteCnt == 8:
        headerWord = ($rxRingNo << $rpbHdrQueueNumShift) | ($pktType << $rpbHdrPktTypeShift)
    else:
        headerWord = 0
    mac.llh $injectionPacketDataSet $headerWord
if '$injType' == 'rx':
    expectedFreeByteCount = ($expectedFreeByteCount - 4)

bufStr = ' '
for byteCount = 0; $byteCount < $packetLen; byteCount += 4:
    if $byteCount + 4 >= $packetLen:
        # EOP = 1
        mac.llh $injectionPacketEopSet 1
        byte3 = $mark
        expectedPacketOffset = 0
        expectedFreeByteCount = 512*16
    else:
        byte3 = $byteCount + 3
        expectedPacketOffset = ($byteCount + $headerLen + 4) / 4
        expectedFreeByteCount = ($expectedFreeByteCount - 4)

    byte0 = $byteCount
    byte1 = $byteCount + 1
    byte2 = $byteCount + 2
    packetWord = (($byte3 << 24) & 0xFF000000) | (($byte2 << 16) & 0x00FF0000) | (($byte1 << 8) & 0x00000FF00) | ($byte0 & 0x0000000FF)
    bufStr = '$bufStr' + ' ' + hex($packetWord)
    if '$injType' == 'tx': #TODO
        packetWord = (($byte3 << 24) & 0xFF000000) | (($byte2 << 16) & 0x00FF0000) | (($byte1 << 8) & 0x00000FF00) | ($byte0 & 0x0000000FF)
    
#    if '$injType' == 'tx': #TODO
#        packetWord = (($byte0 << 24) & 0xFF000000) | (($byte1 << 16) & 0x00FF0000) | (($byte2 << 8) & 0x00000FF00) | ($byte3 & 0x0000000FF)
#    
    mac.llh $injectionPacketDataSet $packetWord
    expectedIsFull = 0
    expectedTruncationError = 0
    expectedOverflowError = 0
    expectedParityError = 0
    stringId = '(1)'
    exec $(PWD)/helpers/checkInjQueueErrors.txt
    if '$injType' == 'rx':
        mac.llh -v uCount rpbRxInjectionQueueFreeWordCountGet $queue
        if $uCount < 512:
            if $uCount != $expectedFreeByteCount/16:
                mac.rxring[$rxRingNo].status -l cli
                finalReport += ['(2) Unexpected free byte count = $uCount (expected $expectedFreeByteCount)']
# EOP = 0
mac.llh $injectionPacketEopSet 0
mac.rxring[$rxRingNo].status -l cli

# Check errors
mac.llh -v rxHeadAfter rdmRxDescriptorHeadPointerGet $rxRingNo
if $rxHeadAfter != $rxHeadBefore + 1:
    finalReport +=  ['(3) After injection head not updated']

expectedPacketOffset = 0
if '$injType' == 'rx':
    expectedIsFull = 0
expectedTruncationError = 0
expectedOverflowError = 0
expectedParityError = 0
stringId = '(4)'
exec $(PWD)/helpers/checkInjQueueErrors.txt

# Packet Show

mac.rxring[$rxRingNo].clean
mac.rxring[$rxRingNo].status -l cli
mac.rxring[$rxRingNo].dumpdesc -H 1 -l cli
mac.rxring[$rxRingNo].dumpbuf -H 1 -l cli --size 80

mac.rxring[$rxRingNo].getdescval -H 1 -f bufferAddress -n pAddr -l cli
mac.rxring[$rxRingNo].getdescval -H 1 -f size -n byteCnt -l cli

# Check received data
if $byteCnt != $packetLen:
    finalReport += ['(4) Wrong byte count $byteCnt received']

mem.cmp -p $pAddr -s $packetLen -V $bufStr -n compareResult $logTag
#mem.dump -p $pAddr -s $byteCnt -l cli

if $compareResult != True:
    finalReport += ['(5) Memory compare failed']

readreg 0x7040	    
mac.uninit
exec $(PWD)/helpers/showTestResult.txt
#if '$injType' == 'tx':
#    echo TODO: byte-order - done by A. K.