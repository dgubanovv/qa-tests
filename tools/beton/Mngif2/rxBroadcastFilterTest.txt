# Script for one packet extraction with ARP filter

finalReport = []
hostAlreadyInitiated = False

ifndef test_num:
    test_num_ndef = True

ifndef test_num_ndef:
    test_num_ndef = False

if $test_num_ndef:
    echo !!!DEFAULT PARAMS APPLIED!!!
    txRingNo = 0
    rxRingNo = 0
    queue = 0
    logTag = -l cli
    RPF2 = False
else:
    ifndef txRingNo:
        txRingNo = 0
    ifndef rxRingNo:
        rxRingNo = 0
    ifndef queue:
        queue = 0
    ifndef logTag:
        logTag = -l cli

ifndef RPF2:
    RPF2 = False


filterActionDiscard = 0
filterActionHost = 1
filterActionManagement = 2
filterActionHostManagement = 3
filterActionWoL = 4
filterActionReserved = 5

mac.set glb_reg_reset_dis False
mac.set tx_reg_rst_dis False
mac.set rx_reg_rst_dis False


# Packet send prepare
if $hostAlreadyInitiated == False:
    #mac.set loopback System DMA            # No loopback
    mac.set loopback System Packet   #Depp loopback for testing Rx filters
    mac.init
    writereg 0x430 0x1#Fix reading previous value
    
    mac.txinit
    mac.txring[$txRingNo].enable    # Prepare Tx ring
    mac.txring[$txRingNo].set PacketMark uniq
    
    mac.rxinit
    mac.rxring[$rxRingNo].enable    # Prepare Rx ring
    mac.rxring[$rxRingNo].fill
    mac.rxring[$rxRingNo].commit
    #mac.isr.disable



if $RPF2:
    exec $(PWD)/helpers/enableRPF2.txt

exec $(PWD)/helpers/versionSpecificInit.txt
exec $(PWD)/helpers/workaroundBug3991.txt

mac.rxring[$rxRingNo].get -n rxRingSize size

exec $(PWD)/helpers/rpoExtractorLlhNames.txt
#Configure filters
mac.llhcache on
mac.llh -C rpfL2PromiscuousModeEnableSet 0
mac.llh -C rpfL2BroadcastEnableSet 0
mac.llh -C rpfVlanPromiscuousModeEnableSet 1
mac.llh -C rpfDoubleVlanEnableSet 0
mac.llhcache off

Vlans = ['NoVlan', 'Vlan', 'Vlan10']
Types = ['Broadcast', 'Multicast', 'Unicast']
#Format of test:
#(action, threshold, reset)
tests = [ [3, 1, 1 ], [3, 0, 1 ], [2, 1, 1 ], [2, 0, 1 ], [1, 1, 1 ], [1, 1, 0 ], [1, 0, 1 ],[1, 0, 0 ], [0, 1, 1 ]]

numberOfPackets = 10
testNumber = 0
mac.llh rpfL2BroadcastEnableSet 1

#create packets
for daddr in $Types:
    for vlan in $Vlans:
        pkt.new -n packet$vlan$daddr -p 32
        pkt.layer -i $(packet$vlan$daddr) -L 60 -t ICMP
        pkt.layer -i $(packet$vlan$daddr) -L 50 -t IP
        if '$vlan' == 'Vlan':
            pkt.layer -i $(packet$vlan$daddr) -L 40 -t IP -L 40 -t Dot1Q
            protoIcmpFullLen = 78
        elif '$vlan' == 'Vlan10':
            pkt.layer -i $(packet$vlan$daddr) -L 40 -t IP -L 40 -t Dot1Q prio=6 type=0x800 vlan=0x0a
            protoIcmpFullLen = 78
        else:
            protoIcmpFullLen = 74
        if '$daddr' == 'Broadcast':
            pkt.layer -i $(packet$vlan$daddr) -L 25 -t Ether src="10:dd:b1:e6:1e:a5" type=0x800 dst="FF:FF:FF:FF:FF:FF"
        elif '$daddr' == 'Muticast':
            pkt.layer -i $(packet$vlan$daddr) -L 25 -t Ether src="10:dd:b1:e6:1e:a5" type=0x800 dst="01:FF:FF:FF:FF:FF"
        elif '$daddr' == 'Unicast':
            pkt.layer -i $(packet$vlan$daddr) -L 25 -t Ether src="10:dd:b1:e6:1e:a5" type=0x800 dst="10:dd:b1:e6:1d:ad"
        if '$daddr' == 'Broadcast':
            mac.llhcache on
            mac.llh rpfL2BroadcastCountThresholdSet 0
            mac.llhcache off        
            # Get Rx head before packet insertion
            mac.llh -v rxHeadBefore rdmRxDescriptorHeadPointerGet $rxRingNo
            # Insert packet and get buffer address
            mac.txring[$txRingNo].insert -i $(packet$vlan$daddr) -b $protoIcmpFullLen
            mac.txring[$txRingNo].status
            mac.rxring[$rxRingNo].status
            mac.txring[$txRingNo].getdescval -T 1 -f bufferAddress -n pAddr

            mac.txring[$txRingNo].dumpbuf -T 1 -l dumptx --size 80
            mac.txring[$txRingNo].commit
            mac.txring[$txRingNo].clean
            mac.rxring[$rxRingNo].clean

            mac.txring[$txRingNo].status -l cli
            mac.rxring[$rxRingNo].status -l cli

            expectedPacketCount = 0
            stringId = '(1)'
            mac.llhcache on
            exec $(PWD)/helpers/extractorCheckers/checkPacketCount.txt

            mac.llh -v rxHeadGood rdmRxDescriptorHeadPointerGet $rxRingNo
            if $rxHeadGood != $rxHeadBefore:
                finalReport += ['(2)Head not equal to expected $rxHeadGood != $rxHeadBefore']


            for test in $tests:
                if len($finalReport) > 0:
                    break;
                action = $test[0]
                threshold = $test[1]
                reset = $test[2]
                
                mac.llhcache on
                mac.llh rpfL2BroadcastFilterActionSet $action
                mac.llh rpfL2BroadcastCountThresholdSet $threshold
                mac.llhcache off

                if $action == $filterActionHost:
                    mac.llh -v rxHeadBefore rdmRxDescriptorHeadPointerGet $rxRingNo
                    mac.rxring[$rxRingNo].status -l cli
                    for count = 0; $count < $threshold * 255 + 10; count += 1:
                        mac.txring[$txRingNo].insert -i $(packet$vlan$daddr) -b $protoIcmpFullLen
                        #mac.txring[$txRingNo].status
                        #mac.rxring[$rxRingNo].status
                        mac.txring[$txRingNo].getdescval -T 1 -f bufferAddress -n pAddr
                    
                        #mac.txring[$txRingNo].dumpbuf -T 1 -l dumptx
                        
                    mac.txring[$txRingNo].commit 64
                    mac.rxring[$rxRingNo].fill 64
                    mac.rxring[$rxRingNo].commit 64
                    
                    mac.txring[$txRingNo].clean
                    mac.rxring[$rxRingNo].clean
                    mac.llh -v rxHead rdmRxDescriptorHeadPointerGet $rxRingNo
                    expectedPackets = 64
                        
                    if $rxHead != $rxHeadBefore + $expectedPackets:
                        if $rxHead != $rxHeadBefore + $expectedPackets - $rxRingSize:
                            finalReport += ['(3)Head not equal to expected']
                    mac.rxring[$rxRingNo].status -l cli
                    rxHeadBefore = $rxHead
                    if $reset:
                        mac.llh rpfL2BroadcastCountResetSet $reset
                        mac.llh rpfL2BroadcastCountResetSet 0
                        expectedPackets = $threshold * 255 + 10 - $expectedPackets
                    else:
                        expectedPackets = $threshold * 255 - $expectedPackets

                    mac.txring[$txRingNo].commit
                    mac.rxring[$rxRingNo].fill
                    mac.rxring[$rxRingNo].commit
                    mac.txring[$txRingNo].clean
                    #mac.rxring[$rxRingNo].clean
                    #mac.rxring[$rxRingNo].status -l cli
                    #mac.llh -v rxHead rdmRxDescriptorHeadPointerGet $rxRingNo
                    for attempt = 0; $attempt < 5; attempt += 1:
                        mac.rxring[$rxRingNo].clean
                        mac.rxring[$rxRingNo].status -l cli
                        mac.llh -v rxHead rdmRxDescriptorHeadPointerGet $rxRingNo
                        if $rxHead != $rxHeadBefore + $expectedPackets:
                            expectedRxHead = $rxHeadBefore + $expectedPackets - $rxRingSize
                            if $rxHead == $expectedRxHead:
                                break
                    if $rxHead != $rxHeadBefore + $expectedPackets:
                        expectedRxHead = $rxHeadBefore + $expectedPackets - $rxRingSize
                        if $rxHead != $expectedRxHead:
                            finalReport += ['(4)Head ($rxHead) not equal to expected ($expectedRxHead)']
                    break
                else:
                    # Send one packet for each filter, and extract it right after sending
                    for count = 0; $count < $numberOfPackets; count += 1:
                        # Get Rx head before packet insertion
                        mac.llh -v rxHeadBefore rdmRxDescriptorHeadPointerGet $rxRingNo
                        # Insert packet and get buffer address
                        mac.txring[$txRingNo].insert -i $(packet$vlan$daddr) -b $protoIcmpFullLen
                        #mac.txring[$txRingNo].status
                        #mac.rxring[$rxRingNo].status
                        mac.txring[$txRingNo].getdescval -T 1 -f bufferAddress -n pAddr
                        
                        mac.txring[$txRingNo].dumpbuf -T 1 -l dumptx --size 80
                        mac.txring[$txRingNo].commit
                        mac.txring[$txRingNo].clean
                        mac.rxring[$rxRingNo].clean
                
                        mac.txring[$txRingNo].status -l cli
                        mac.rxring[$rxRingNo].status -l cli
                        if ($test[0] == $filterActionHostManagement or $test[0] == $filterActionManagement) and $threshold != 0:
                            expectedPacketCount = 1
                        else:
                            expectedPacketCount = 0
                        # Check extractor right now
                        stringId = '(5)'
                        mac.llhcache on
                        exec $(PWD)/helpers/extractorCheckers/checkPacketCount.txt
                        if $packetCount == 1:
                            exec $(PWD)/helpers/extractAndCompare.txt
                        #Check packet in rx ring
                       
                        mac.llh -v rxHeadGood rdmRxDescriptorHeadPointerGet $rxRingNo
                            
                        if ($test[0] == $filterActionHostManagement or $test[0] == $filterActionHost) and $threshold != 0:
                            if $rxHeadBefore == ($rxRingSize-1):
                                $rxHeadBefore = -1
                            rxCount = $rxHeadGood + 0 - $rxHeadBefore
                            if $rxCount != 1:
                                finalReport += ['(6)Wrong packet number($rxCount) routed to host']
                                break
                            
                            mac.rxring[$rxRingNo].clean
                            #mac.rxring[$rxRingNo].status

                            mac.rxring[$rxRingNo].getdescval -H 1 -f bufferAddress -n rxAddr
                            mac.rxring[$rxRingNo].getdescval -H 1 -f size -n rxPacketSize
                            if $protoIcmpFullLen != $rxPacketSize:
                                finalReport += ['(7)Wrong packet size on Rx']
                                break
                            mem.cmp -p $pAddr -p2 $rxAddr -s $rxPacketSize -l nul -n cmpRes
                            if $cmpRes == False:
                                finalReport += ['(8)txPacket and rxPacket differs']
                            mac.rxring[$rxRingNo].fill 1
                            mac.rxring[$rxRingNo].commit 1
                        else:
                            if $rxHeadGood != $rxHeadBefore:
                                finalReport += ['(9)Unexpected packet in Rx ring']
                                break
                testNumber += 1
        else:
            if len($finalReport) > 0:
                break;
            mac.llh -v rxHeadBefore rdmRxDescriptorHeadPointerGet $rxRingNo
            mac.llhcache on
            mac.llh rpfL2BroadcastFilterActionSet 3
            mac.llh rpfL2BroadcastCountThresholdSet 1
            mac.llhcache off
            for count = 0; $count < 255 + 10; count += 1:
                mac.txring[$txRingNo].insert -i $(packet$vlan$daddr) -b $protoIcmpFullLen
                mac.txring[$txRingNo].getdescval -T 1 -f bufferAddress -n pAddr
            bc = Broadcast
            mac.txring[$txRingNo].insert -i $(packet$vlan$bc) -b $protoIcmpFullLen
            mac.txring[$txRingNo].getdescval -T 1 -f bufferAddress -n pAddr
            mac.txring[$txRingNo].commit
            mac.rxring[$rxRingNo].fill
            mac.rxring[$rxRingNo].commit
            mac.txring[$txRingNo].clean
            mac.rxring[$rxRingNo].clean
            mac.rxring[$rxRingNo].status -l cli
            expectedPackets = 1
            mac.llh -v rxHead rdmRxDescriptorHeadPointerGet $rxRingNo
            if $rxHead != $rxHeadBefore + $expectedPackets:
                if $rxHead != $rxHeadBefore + $expectedPackets - $rxRingSize:
                    finalReport += ['(10)Head not equal to expected']
            break


readreg 0x5040 $logTag
exec $(PWD)/helpers/showTestResult.txt
mac.uninit
