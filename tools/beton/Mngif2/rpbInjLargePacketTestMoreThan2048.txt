# $File: //depot/icm/proj/Atlantic/rev1.0/software/Software/Test/AtlanticTestbench/Mngif2/rpbInjLargePacketTestMoreThan2048.txt $
# $Revision: #15 $
# $DateTime: 2016/08/11 02:22:39 $
# $Author: dgubanov $
#
# Script for large packets injection on mng queue0
# To make test packets unique, $mark variable is used. It is incremented on every run.
# But it should be initialized with start value before first run, e.g. mark = 0 in cli
# or by pseudo-condition in this script

finalReport = []
hostAlreadyInitiated = False

ifndef test_num:
    test_num_ndef = True

ifndef test_num_ndef:
    test_num_ndef = False

if $test_num_ndef:
    echo !!!DEFAULT PARAMS APPLIED!!!
    txRingNo = 0
    rxRingNo = 0
    queue = 0
    injType = tx
    mark = 0
    logTag = -l cli
else:
    ifndef txRingNo:
        txRingNo = 0
    ifndef rxRingNo:
        rxRingNo = 0
    ifndef queue:
        queue = 0
    ifndef injType:
        injType = rx
    ifndef mark:
        mark = 0
    ifndef logTag:
        logTag = -l cli

# Packet receive prepare
if $hostAlreadyInitiated == False:
    if '$injType' == 'tx':
        mac.set loopback System Packet $logTag # deep loopback
    else:
        mac.set loopback None $logTag # No loopback
    mac.init
    if '$injType' == 'tx':
        mac.txinit
        mac.txring[$txRingNo].enable    # Prepare Tx ring
    mac.rxinit
    mac.rxring[$rxRingNo].set bufSize 8192 $logTag
    mac.rxring[$rxRingNo].set maxDmaSize 8192 $logTag
    mac.rxring[$rxRingNo].enable    # Prepare Rx ring
   # # mac.rxring[$rxRingNo].fill       # Without parameters: by default 0xFFFF
    # mac.rxring[$rxRingNo].commit    # Without parameters: by default 0xFFFF

exec $(PWD)/helpers/versionSpecificInit.txt
exec $(PWD)/helpers/enableTPO2.txt

# Rx Injector prepare
pktType = 0

if '$injType' == 'tx':
    exec $(PWD)/helpers/tpbInjectorLlhNames.txt
    mac.llh tpbTxInjectionQueueLimitSet 1 $queue
    mac.llh tpbTxInjectionQueueMaxSizeSet 1 $queue
else:
    exec $(PWD)/helpers/rpbInjectorLlhNames.txt

if '$injType' == 'tx':
    mac.llh rpfL2PromiscuousModeEnableSet 1
    mac.llh rpfVlanPromiscuousModeEnableSet 1
    mac.llh rpfL2BroadcastCountThresholdSet 256
    mac.llh rpfL2BroadcastFilterActionSet 2
    mac.llh rpfL2BroadcastCountResetSet 0
    mac.llh rpfRxPathByteSwapEnableSet 0
    mac.llh rpfL2BroadcastEnableSet 0

rpbHdrQueueNumShift = 12
rpbHdrPktTypeShift = 4

if '$injType' == 'tx':
    headerLen = 12
else:
    headerLen = 16

#actual for rpb injector
packetLengthWhenFullIndicated = 8161
packetLengthWhenFullNotIndicated = 8160 

    
packetLengthWhenAnySmallPacket = 128

if '$injType' == 'tx':
    maxPacketLength = 2036 #max size which can inject(2048 - headerLength(12))
    packetLengthWhenTruncation = 2100 #size when packet truncated (2036 - no truncation, 2037 - truncation)
else:
    maxPacketLength = 8176 #max size which can inject
    packetLengthWhenTruncation = 8177 #size when packet truncated 
    packetLengthWhenTruncation2 = 8198 #size when packet truncated for bug 4345    

# Inject
if '$injType' == 'tx':
    packetLengths = [$maxPacketLength, $packetLengthWhenAnySmallPacket, $packetLengthWhenTruncation, $packetLengthWhenAnySmallPacket, $packetLengthWhenAnySmallPacket]
else:
    packetLengths = [$maxPacketLength, $packetLengthWhenAnySmallPacket, $packetLengthWhenFullIndicated, $packetLengthWhenAnySmallPacket, $packetLengthWhenFullNotIndicated, $packetLengthWhenAnySmallPacket, $packetLengthWhenTruncation, $packetLengthWhenTruncation2, $packetLengthWhenAnySmallPacket, $packetLengthWhenAnySmallPacket, $packetLengthWhenFullNotIndicated]

# Select injection queue
mac.llh $injectionSelectSet $queue

for packetLen in $packetLengths:
    compareLen = $packetLen
    if $packetLen >= $packetLengthWhenFullIndicated:
        expectedIsFull = 1
    else:
        expectedIsFull = 0
 
    if '$injType' == 'tx':       
        if $packetLen == $packetLengthWhenTruncation:               
            expectedTruncationError = 1
            compareLen = $maxPacketLength
        else:
            expectedTruncationError = 0
    else:
        if $packetLen == $packetLengthWhenTruncation or $packetLen == $packetLengthWhenTruncation2:               
            expectedTruncationError = 1
            compareLen = $maxPacketLength
        else:
            expectedTruncationError = 0       
    # 1. Injection (same for trunc and non-trunc, $packetLen is used)
    mark = $mark + 1
    
    # SOP = 1
    mac.llh $injectionPacketSopSet 1

    # Packet Len Header Word
    if '$injType' == 'tx':
        headerWord = $packetLen
    else:
        headerWord = ($packetLen << 16)

    mac.llh $injectionPacketDataSet $headerWord

    # SOP = 0
    mac.llh $injectionPacketSopSet 0

    # Header Rest
    for hdrByteCnt = 4; $hdrByteCnt < $headerLen; hdrByteCnt += 4:
        if $hdrByteCnt == 8:
            headerWord = ($rxRingNo << $rpbHdrQueueNumShift) | ($pktType << $rpbHdrPktTypeShift)
        else:
            headerWord = 0
        mac.llh $injectionPacketDataSet $headerWord
        
    bufStr = ' '
    for byteCount = 0; $byteCount < $packetLen; byteCount += 4:
        if $byteCount + 4 >= $packetLen:
            # EOP = 1
            mac.llh $injectionPacketEopSet 1
            byte3 = $mark
        else:
            byte3 = $byteCount + 3
        
        byte0 = $byteCount
        byte1 = $byteCount + 1
        byte2 = $byteCount + 2
        
        packetWord = (($byte3 << 24) & 0xFF000000) | (($byte2 << 16) & 0x00FF0000) | (($byte1 << 8) & 0x00000FF00) | ($byte0 & 0x0000000FF)
        
        #if '$injType' == 'tx':
        #    packetWord = (($byte0 << 24) & 0xFF000000) | (($byte1 << 16) & 0x00FF0000) | (($byte2 << 8) & 0x00000FF00) | ($byte3 & 0x0000000FF)
        # else:
        #    packetWord = (($byte3 << 24) & 0xFF000000) | (($byte2 << 16) & 0x00FF0000) | (($byte1 << 8) & 0x00000FF00) | ($byte0 & 0x0000000FF)
        mac.llh $injectionPacketDataSet $packetWord
        packetWordToCompare = (($byte3 << 24) & 0xFF000000) | (($byte2 << 16) & 0x00FF0000) | (($byte1 << 8) & 0x00000FF00) | ($byte0 & 0x0000000FF)
        bufStr = '$bufStr' + ' ' + hex($packetWordToCompare)
        mac.llh -v free rpbRxInjectionQueueFreeWordCountGet $queue
        #echo free = $free

    # EOP = 0
    mac.llh $injectionPacketEopSet 0
    
    
    # 2. Check errors (differences for trunc and non-trunc in Truncation error checking)
    #echo packetNo = $packetNo
    expectedPacketOffset = 0
    expectedOverflowError = 0
    expectedParityError = 0
    expectedPacketCount = 0
    if '$injType' == 'tx':
        expectedEmpty = 0
    stringId = '(2)'
    exec $(PWD)/helpers/checkInjQueueErrors.txt
    #if $expectedTruncationError == 1:
    mac.llh -v truncationError rpbRxInjectionQueueTruncationErrorGet $queue
    echo !!! $truncationError !!!
    
    # For bug 4345
    if '$injType' == 'rx': 
        if '$truncationError' != '$expectedTruncationError':
            str =  '(3)Wrong truncation error $truncationError expected $expectedTruncationError'  
            echo $str
            finalReport = $finalReport + ['$str'] 
        
    mac.llh $injectionQueueResetSet 1 $queue
    mac.llh $injectionQueueResetSet 0 $queue
    mac.rxring[$rxRingNo].fill 1      
    mac.rxring[$rxRingNo].commit 
    # 3. Reception (same for trunc and non-trunc, $compareLen is used)
    
    mac.rxring[$rxRingNo].clean
    mac.rxring[$rxRingNo].status $logTag
    mac.rxring[$rxRingNo].dumpdesc -H 1 -l dumprx
    mac.rxring[$rxRingNo].dumpbuf -H 1 -l dumprx --size 80

    mac.rxring[$rxRingNo].getdescval -H 1 -f bufferAddress -n pAddr $logTag
    mac.rxring[$rxRingNo].getdescval -H 1 -f size -n byteCnt $logTag

    # Check received data
    #if $packetLen != $packetLengthWhenTruncation:
    if $byteCnt != $compareLen:
        str = '(4)Wrong byte count $byteCnt received packetLen = $packetLen'
        echo $str
        finalReport = $finalReport + ['$str']
    else:
        mem.cmp -p $pAddr -s $byteCnt -V $bufStr -n compareResult $logTag
        #mem.dump -p $pAddr -s $packetLen -l cli
        if $compareResult == False:
            finalReport = $finalReport + ['(5) Memory compare failed']

readreg 0x7040
exec $(PWD)/helpers/showTestResult.txt
mac.uninit
