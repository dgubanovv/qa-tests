# $File: //depot/icm/proj/Atlantic/rev1.0/software/Software/Test/AtlanticTestbench/Mngif2/extLargePacketTestMoreThan2048.txt $
# $Revision: #11 $
# $DateTime: 2016/08/11 02:22:39 $
# $Author: dgubanov $
# Script for large packets $extraction on mng queue0 using mac filter

finalReport = []
hostAlreadyInitiated = False

ifndef test_num:
    test_num_ndef = True

ifndef test_num_ndef:
    test_num_ndef = False

if $test_num_ndef:
    echo !!!DEFAULT PARAMS APPLIED!!!
    txRingNo = 0
    segCount = 1 #Number of segments to split packet onto
    extType = tx
    queueActive = [1, 1]
    logTag = -l cli
else:
    ifndef txRingNo:
        txRingNo = 0
    ifndef segCount:
        segCount = 1
    ifndef extType:
        extType = rx
    ifndef queueActive:
        queueActive = [1, 1]
    ifndef logTag:
        logTag = -l cli

checkTruncErrorEarly = False # check truncation error at once
packetLenMoreThan2048 = 3000
nextPacketLen = 125
nextPacketCnt = 1


# Packet send prepare
if $hostAlreadyInitiated == False:
    if '$extType' == 'rx':
        mac.set loopback System Packet $logTag #deep loopback
    else:
        mac.set loopback None $logTag # No loopback
    mac.init
    #mac.isr.disable
    if '$extType' == 'rx':
        mac.rxinit
        mac.rxring[$txRingNo].enable
        mac.rxring[$txRingNo].fill
        
    mac.txinit
    mac.txring[$txRingNo].set bufSize 4096 $logTag
    mac.txring[$txRingNo].set maxDmaSize 4096 $logTag
    mac.txring[$txRingNo].enable    # Prepare Tx ring
    mac.txring[$txRingNo].set PacketMark uniq $logTag

exec $(PWD)/helpers/versionSpecificInit.txt
exec $(PWD)/helpers/workaroundBug3991.txt
exec $(PWD)/helpers/enableTPO2.txt

# Tx Extractor prepare
if '$extType' == 'rx':
    exec $(PWD)/helpers/rpoExtractorLlhNames.txt
else:
    exec $(PWD)/helpers/tpoExtractorLlhNames.txt

for queue = 0; $queue < 2; queue += 1:
    mac.llh -v packetCount $extractionQueuePacketCountGet $queue
    if $packetCount > 0:
        echo Please run script on clear queue
        exit

# Set mode
# Set corresponding filters enable and clear other
if '$extType' == 'rx':
    exec $(PWD)/helpers/configureRxExtFilters.txt
    mac.llh $extractionQueueLimitSet 1 0
    mac.llh $extractionQueueLimitSet 1 1
else:
    exec $(PWD)/helpers/configureTxExtFilters.txt

segmentLen = ($packetLenMoreThan2048 / $segCount / 4) * 4
segmentLenLast = $packetLenMoreThan2048 - ($segmentLen * ($segCount - 1))
pAddrAr0 = []
pAddrAr1 = []

# Packet Send
totalSegs = 0
for queue = 0; $queue < 2; queue += 1:
    if $queueActive[$queue] != 0:
        for segment = 0; $segment < $segCount; segment += 1:
            if $segment < $segCount - 1:
                len = $segmentLen
            else:
                len = $segmentLenLast
            mac.txring[$txRingNo].insert -b $len -p $packetLenMoreThan2048 -f indexed_uniq_ramp
            mac.txring[$txRingNo].getdescval -T 1 -f DATA_BUF_ADDR -n pAddr $logTag

            pAddrAr$queue += [$pAddr]
            str = $macAddrFilters[$queue]
            mem.put $str -s 1 -p $pAddr
            totalSegs += 1
        
mac.txring[$txRingNo].dumpdesc -T 1:$totalSegs -l dumptx $logTag
mac.txring[$txRingNo].dumpbuf -T 1:$totalSegs -l dumptx $logTag --size 80
mac.txring[$txRingNo].commit
mac.txring[$txRingNo].clean
mac.txring[$txRingNo].status $logTag

# Packet Extract
expectedPacketCount = 1
expectedIsReady = 1
expectedTruncationError = 0
expectedOverflowError = 0
expectedLostError = 0
expectedIsInterrupt = 1
expectedParityError = 0
stringId = '(1)'
for queue = 0; $queue < 2; queue += 1:
    if $queueActive[$queue] != 0:
        exec $(PWD)/helpers/checkExtQueueErrors.txt

deltas = []
byteCnts = []

for queue = 0; $queue < 2; queue += 1:
    bufArray = []
    byteCnt = 0
    delta = 0
    if $queueActive[$queue] != 0:
        # Select Queue
        mac.llh $extractionSelectSet $queue

        # for byteCnt = 0; $byteCnt < 2048; byteCnt += 4: # use byteCnt limit to avoid endless loop
        for byteCnt = 0; $byteCnt < 20000; byteCnt += 4: # increase limit for test goals
            # generate rising edge
            mac.llh $extractionReadSet 0
            mac.llh $extractionReadSet 1
            mac.llh -v dataExtracted $extractionQueuePacketDataGet
            if '$extType' == 'rx':
                dataExtracted = ($dataExtracted & 0xFF) << 24 | ($dataExtracted & 0xFF00) << 8 | ($dataExtracted & 0xFF0000) >> 8 | ($dataExtracted & 0xFF000000) >> 24
            bufArray += [$dataExtracted]
            mac.llh -v eop $extractionQueueEopGet
            if $eop <> 0:
                byteCnt += 4
                break
        mac.llh $extractionReadSet 0
        bufArr$(queue) = $bufArray
        
        # Process data_vld field
        delta = 0
        mac.llh -v valid $extractionQueueByteValidGet
        if $valid > 0:
            for workaround = 0; ($valid & 1) == 0; valid = $valid >> 1:
                byteCnt = $byteCnt + 0 - 1
                delta += 1
        else:
            byteCnt = $byteCnt + 0 - 4
            delta += 4

        mac.llh -v extOffset $extractionQueuePacketOffsetGet
        if $extOffset != 0:
            extOffsetStr = hex($extOffset)
            str = '(2)Wrong ext_offset $extOffsetStr after extraction (byteCnt $byteCnt) '
            echo $str
            finalReport = $finalReport + ['$str']

        stringId = '(3)'
        expectedPacketCount = 0
        expectedIsReady = 0
        expectedTruncationError = 1
        expectedOverflowError = 0
        expectedLostError = 0
        expectedIsInterrupt = 0
        if '$hw_options' == 'B0RRO' and '$extType' == 'rx':
            expectedIsInterrupt = 0
        expectedParityError = 0
        exec $(PWD)/helpers/checkExtQueueErrors.txt

        # Check received data
        if ($packetLenMoreThan2048 > 2048 and $byteCnt != 2048) or ($packetLenMoreThan2048 <= 2048 and $byteCnt != $packetLenMoreThan2048):
            str = '(4)Wrong byte count $byteCnt extracted '
            echo $str
            finalReport = $finalReport + ['$str']
    deltas += [$delta]
    byteCnts += [$byteCnt]

#check self clean
stringId = '(5)'
expectedTruncationError = 0
expectedIsInterrupt = 0
for queue = 0; $queue < 2; queue += 1:
    if $queueActive[$queue] != 0:
        exec $(PWD)/helpers/checkExtQueueErrors.txt

for queue = 0; $queue < 2; queue += 1:
    if $queueActive[$queue] != 0:
        arr = $(bufArr$(queue))
        for segment = 0; $segment < $segCount; segment += 1:
            bufStr = ' '
            pAddr = $(pAddrAr$(queue))[$segment]
            if $segment < $segCount - 1:
                len = $segmentLen
            else:
                len = $segmentLenLast
            for dwordCnt = $segment * ($segmentLen / 4); (($dwordCnt < $segment * ($segmentLen / 4) + (($len + $deltas[$queue]) /4)) and ($dwordCnt < ($byteCnts[$queue] / 4))); dwordCnt += 1:
                data = $arr[$dwordCnt]
                hexdata = hex($data)
                bufStr = '$bufStr' + ' ' + '$hexdata'
            if $dwordCnt * 4 >= $byteCnts[$queue]:
                len = ($dwordCnt + 0 - $segment * ($segmentLen / 4)) * 4
            mem.cmp -p $pAddr -s $len -V $bufStr -n compareResult $logTag
            #mem.dump -p $pAddr -s $len -l cli
            if $compareResult != True:
                finalReport = $finalReport + ['(4) Memory compare failed']
            if $dwordCnt * 4 >= $byteCnts[$queue]:
                break

# Next packet (s)
for queue = 0; $queue < 2; queue += 1:
    if $queueActive[$queue] != 0:
        for nextPacketNo = 0; $nextPacketNo < $nextPacketCnt; nextPacketNo += 1:
            mac.txring[$txRingNo].insert -b $nextPacketLen -p $nextPacketLen -f indexed_uniq_ramp
            mac.txring[$txRingNo].getdescval -T 1 -f DATA_BUF_ADDR -n pAddr $logTag
            str = $macAddrFilters[$queue]
            mem.put $str -s 1 -p $pAddr
            mac.txring[$txRingNo].dumpdesc -T 1 -l dumptx $logTag
            mac.txring[$txRingNo].dumpbuf -T 1 -l dumptx  $logTag --size 80
            mac.txring[$txRingNo].commit
            mac.txring[$txRingNo].clean
            mac.txring[$txRingNo].status $logTag
            
            expectedPacketCount = $queueActive[$queue]
            stringId = '(6)'
            exec $(PWD)/helpers/extractorCheckers/checkPacketCount.txt

            if $packetCount > 0:
                # Select Queue
                mac.llh $extractionSelectSet $queue
                bufStr = ' '
                # for byteCnt = 0; $byteCnt < 2048; byteCnt += 4: # use byteCnt limit to avoid endless loop
                for byteCnt = 0; $byteCnt < 2080; byteCnt += 4: # increase limit for test goals
                    # generate rising edge
                    mac.llh $extractionReadSet 0
                    mac.llh $extractionReadSet 1
                    mac.llh -v dataExtracted $extractionQueuePacketDataGet
                    if '$extType' == 'rx':
                        dataExtracted = ($dataExtracted & 0xFF) << 24 | ($dataExtracted & 0xFF00) << 8 | ($dataExtracted & 0xFF0000) >> 8 | ($dataExtracted & 0xFF000000) >> 24
                    bufStr = '$bufStr' + ' ' + hex($dataExtracted)
                    mac.llh -v eop $extractionQueueEopGet
                    if $eop <> 0:
                        byteCnt += 4
                        break
                mac.llh $extractionReadSet 0

                # Process data_vld field
                mac.llh -v valid $extractionQueueByteValidGet
                if $valid > 0:
                    for workaround = 0; ($valid & 1) == 0; valid = $valid >> 1:
                        byteCnt = $byteCnt + 0 - 1
                else:
                    byteCnt = $byteCnt + 0 - 4

                # Check received data
                if $byteCnt != $nextPacketLen:
                    str = '(7) Wrong byte count $byteCnt extracted on next packet $nextPacketNo'
                    echo $str
                    finalReport = $finalReport + ['$str']
                mem.cmp -p $pAddr -s $byteCnt -V $bufStr -n compareResult $logTag
                if $compareResult != True:
                    finalReport = $finalReport + ['(8) Memory compare failed']

                # Check errors

                expectedPacketCount = 0
                expectedIsReady = 0
                expectedTruncationError = 0
                expectedOverflowError = 0
                expectedLostError = 0
                expectedIsInterrupt = 0
                if '$hw_options' == 'B0RRO' and '$extType' == 'rx':
                    expectedIsInterrupt = 0
                expectedParityError = 0
                stringId = '(9)'
                exec $(PWD)/helpers/checkExtQueueErrors.txt

readreg 0x7040				
mac.uninit
exec $(PWD)/helpers/showTestResult.txt