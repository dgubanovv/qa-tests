# Script for large packets extraction on mng queue0 using mac filter

hostAlreadyInitiated = False
txRingNo = 0
truncatePackets = True
segCount = 8 #Number of segments to split packet onto

# Packet send prepare
if $hostAlreadyInitiated == False:
    mac.set loopback MCP            # No loopback
    mac.init

    mac.txinit
    mac.txring[$txRingNo].set bufSize 4096
    mac.txring[$txRingNo].set maxDmaSize 4096
    mac.txring[$txRingNo].enable    # Prepare Tx ring
    mac.txring[$txRingNo].set PacketMark uniq

# Tx Extractor prepare

exec $(SCRIPT_PATH)/txExtRegDefs.txt

readreg $txExtStatus2Reg -n status2Reg
nPackets = $status2Reg & $txExtCntMask
if $nPackets > 0:
    echo Please run script on clear queue
    exit

# Set mode
# Set corresponding filters enable and clear other

readreg $txExtCtrlReg -n txExtCtrl
if $truncatePackets == True:
    txExtCtrl = $txExtCtrl | $txExtLimitMask
else:
    txExtCtrl = $txExtCtrl & ~$txExtLimitMask
txExtCtrl = $txExtCtrl & ~$txExtReplicateMask
txExtCtrl = $txExtCtrl | $txExtMACFilterMask
txExtCtrl = $txExtCtrl & ~$txExtIPFilterMask
txExtCtrl = $txExtCtrl & ~$txExtARPFilterMask
writereg $txExtCtrlReg $txExtCtrl

macFilterLSW = 0x02030405
macFilterMSW = 0x00000001
writereg $txExtMACFilter0LSWReg $macFilterLSW
writereg $txExtMACFilter0MSWReg $macFilterMSW 

# Read status reg1 to self-clear errors
readreg $txExtStatus1Reg

# Read other status regs for information
readreg $txExtStatus2Reg
readreg $txExtStatus3Reg

packetLen2048 = 2048
segmentLen = ($packetLen2048 / $segCount / 4) * 4
segmentLenLast = $packetLen2048 - ($segmentLen * ($segCount - 1))
pAddrAr = []

# Packet Send

for segment = 0; $segment < $segCount; segment += 1:
    if $segment < $segCount - 1:
        len = $segmentLen
    else:
        len = $segmentLenLast
    mac.txring[$txRingNo].insert -b $len -p $packetLen2048 -f indexed_uniq_ramp
    mac.txring[$txRingNo].getdescval -T 1 -f DATA_BUF_ADDR -n pAddr
    pAddrAr += [$pAddr]
mac.txring[$txRingNo].dumpdesc -T 1:$segCount -l dumptx
mac.txring[$txRingNo].dumpbuf -T 1:$segCount -l dumptx
mac.txring[$txRingNo].commit
mac.txring[$txRingNo].clean
mac.txring[$txRingNo].status

# Packet Extract
finalReport = [] # final report is useful when command line window has huge output

readreg $txExtStatus2Reg -n status2Reg
nPackets = $status2Reg & $txExtCntMask
if $nPackets != 1:
    echo Wrong packet count $nPackets
    exit
readreg $txExtStatus1Reg -n status1Reg
if ($status1Reg & $txExtRdyMask) != $txExtRdyMask:
    status1RegStr = hex($status1Reg)
    str = 'Ready bit is not set $status1RegStr (1)'
    echo $str
    finalReport = $finalReport + ['$str']

# Select Queue
txExtCtrl = $txExtCtrl & ~$txExtSelectQueueMask
writereg $txExtCtrlReg $txExtCtrl

# Check errors
readreg $txExtStatus1Reg -n status1Reg
status1RegStr = hex($status1Reg)
if ($status1Reg & $txExtTruncMask) != 0:
    str = 'Truncation Error is set $status1RegStr (2)'
    echo $str
    finalReport = $finalReport + ['$str']
if ($status1Reg & $txExtOfMask) != 0:
    str = 'Overflow Error is set $status1RegStr (3)'
    echo $str
    finalReport = $finalReport + ['$str']

bufArr  = []
txExtCtrl0 = $txExtCtrl & ~$txExtReadMask
txExtCtrl1 = $txExtCtrl | $txExtReadMask
# for byteCnt = 0; $byteCnt < 2048; byteCnt += 4: # use byteCnt limit to avoid endless loop
for byteCnt = 0; $byteCnt < 2080; byteCnt += 4: # increase limit for test goals
    # generate rising edge
    writereg $txExtCtrlReg $txExtCtrl0
    writereg $txExtCtrlReg $txExtCtrl1
    readreg $txExtDataReg -n dataExtracted
    bufArr += [$dataExtracted]

    readreg $txExtStatus2Reg -n status2Reg
    eop = $status2Reg & $txExtEopMask
    if $eop <> 0:
        byteCnt += 4
        break
writereg $txExtCtrlReg $txExtCtrl0

# Process data_vld field
delta = 0
valid = ($status2Reg & $txExtDataValidMask) >> $txExtDataValidShift
if $valid > 0:
    for workaround = 0; ($valid & 1) == 0; valid = $valid >> 1:
        byteCnt = $byteCnt + 0 - 1
        delta += 1
else:
    byteCnt = $byteCnt + 0 - 4
    delta += 4

readreg $txExtStatus3Reg -n extOffset
if $extOffset != 0:
    extOffsetStr = hex($extOffset)
    str = 'Wrong ext_offset $extOffsetStr after extraction (4)'
    echo $str
    finalReport = $finalReport + ['$str']

nPackets = $status2Reg & $txExtCntMask
if $nPackets != 0:
    str = 'Wrong packet count $nPackets after extraction (5)'
    echo $str
    finalReport = $finalReport + ['$str']

# Check received data
# @note: is there any way to acquire mem.cmp result to stop next execution?
if $byteCnt != $packetLen2048:
    str = 'Wrong byte count $byteCnt extracted (6)'
    echo $str
    finalReport = $finalReport + ['$str']

for segment = 0; $segment < $segCount; segment += 1:
    bufStr = ' '
    pAddr = $pAddrAr[$segment]
    if $segment < $segCount - 1:
        len = $segmentLen
    else:
        len = $segmentLenLast
    for dwordCnt = $segment * ($segmentLen / 4); $dwordCnt < $segment * ($segmentLen / 4) + (($len + $delta) /4); dwordCnt += 1:
        data = $bufArr[$dwordCnt]
        hexdata = hex($data)
        bufStr = '$bufStr' + ' ' + '$hexdata'
    mem.cmp -p $pAddr -s $len -V $bufStr -l cli

# Check errors
readreg $txExtStatus1Reg -n status1Reg
if ($status1Reg & $txExtTruncMask) != 0:
    status1RegStr = hex($status1Reg)
    str = 'Truncation Error is set after packet read $status1RegStr (7)'
    echo $str
    finalReport = $finalReport + ['$str']

if len($finalReport) > 0:
    echo
    echo FinalReport:
    for str in $finalReport:
        echo $str
echo Script done
cmd