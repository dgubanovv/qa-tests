# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_hardwareInterfaceFTDI')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_hardwareInterfaceFTDI')
    _hardwareInterfaceFTDI = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_hardwareInterfaceFTDI', [dirname(__file__)])
        except ImportError:
            import _hardwareInterfaceFTDI
            return _hardwareInterfaceFTDI
        try:
            _mod = imp.load_module('_hardwareInterfaceFTDI', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _hardwareInterfaceFTDI = swig_import_helper()
    del swig_import_helper
else:
    import _hardwareInterfaceFTDI
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0


def HW_Initialize():
    return _hardwareInterfaceFTDI.HW_Initialize()
HW_Initialize = _hardwareInterfaceFTDI.HW_Initialize

def HW_NumberOfDevices():
    return _hardwareInterfaceFTDI.HW_NumberOfDevices()
HW_NumberOfDevices = _hardwareInterfaceFTDI.HW_NumberOfDevices

def HW_DeviceList():
    return _hardwareInterfaceFTDI.HW_DeviceList()
HW_DeviceList = _hardwareInterfaceFTDI.HW_DeviceList

def HW_Device(arg1):
    return _hardwareInterfaceFTDI.HW_Device(arg1)
HW_Device = _hardwareInterfaceFTDI.HW_Device

def HW_DeviceNumber(boardName):
    return _hardwareInterfaceFTDI.HW_DeviceNumber(boardName)
HW_DeviceNumber = _hardwareInterfaceFTDI.HW_DeviceNumber

def HW_Open(boardName):
    return _hardwareInterfaceFTDI.HW_Open(boardName)
HW_Open = _hardwareInterfaceFTDI.HW_Open

def HW_Close():
    return _hardwareInterfaceFTDI.HW_Close()
HW_Close = _hardwareInterfaceFTDI.HW_Close

def AQ_API_MDIO_Write(arg1, arg2, arg3, arg4):
    return _hardwareInterfaceFTDI.AQ_API_MDIO_Write(arg1, arg2, arg3, arg4)
AQ_API_MDIO_Write = _hardwareInterfaceFTDI.AQ_API_MDIO_Write

def AQ_API_MDIO_Read(arg1, arg2, arg3):
    return _hardwareInterfaceFTDI.AQ_API_MDIO_Read(arg1, arg2, arg3)
AQ_API_MDIO_Read = _hardwareInterfaceFTDI.AQ_API_MDIO_Read

def HW_GetDefaultAdapter():
    return _hardwareInterfaceFTDI.HW_GetDefaultAdapter()
HW_GetDefaultAdapter = _hardwareInterfaceFTDI.HW_GetDefaultAdapter

def HW_SetDefaultAdapter(adapterNumber):
    return _hardwareInterfaceFTDI.HW_SetDefaultAdapter(adapterNumber)
HW_SetDefaultAdapter = _hardwareInterfaceFTDI.HW_SetDefaultAdapter

def HW_OpenAdapter(adapterNumber):
    return _hardwareInterfaceFTDI.HW_OpenAdapter(adapterNumber)
HW_OpenAdapter = _hardwareInterfaceFTDI.HW_OpenAdapter

def HW_CloseAdapter(adapterNumber):
    return _hardwareInterfaceFTDI.HW_CloseAdapter(adapterNumber)
HW_CloseAdapter = _hardwareInterfaceFTDI.HW_CloseAdapter

def HW_Write(arg1, arg2, arg3, arg4, arg5):
    return _hardwareInterfaceFTDI.HW_Write(arg1, arg2, arg3, arg4, arg5)
HW_Write = _hardwareInterfaceFTDI.HW_Write

def HW_Read(arg1, arg2, arg3, arg4):
    return _hardwareInterfaceFTDI.HW_Read(arg1, arg2, arg3, arg4)
HW_Read = _hardwareInterfaceFTDI.HW_Read

def HW_BlockRead(arg1, arg2, arg3):
    return _hardwareInterfaceFTDI.HW_BlockRead(arg1, arg2, arg3)
HW_BlockRead = _hardwareInterfaceFTDI.HW_BlockRead

def HW_BlockWrite(arg1, arg2, arg3, arg4):
    return _hardwareInterfaceFTDI.HW_BlockWrite(arg1, arg2, arg3, arg4)
HW_BlockWrite = _hardwareInterfaceFTDI.HW_BlockWrite

def HW_BlockOperationExecute(arg1):
    return _hardwareInterfaceFTDI.HW_BlockOperationExecute(arg1)
HW_BlockOperationExecute = _hardwareInterfaceFTDI.HW_BlockOperationExecute

def HW_BlockReadAdapter(arg1, arg2, arg3, arg4):
    return _hardwareInterfaceFTDI.HW_BlockReadAdapter(arg1, arg2, arg3, arg4)
HW_BlockReadAdapter = _hardwareInterfaceFTDI.HW_BlockReadAdapter

def HW_BlockWriteAdapter(arg1, arg2, arg3, arg4, arg5):
    return _hardwareInterfaceFTDI.HW_BlockWriteAdapter(arg1, arg2, arg3, arg4, arg5)
HW_BlockWriteAdapter = _hardwareInterfaceFTDI.HW_BlockWriteAdapter

def HW_BlockOperationExecuteAdapter(arg1, arg2):
    return _hardwareInterfaceFTDI.HW_BlockOperationExecuteAdapter(arg1, arg2)
HW_BlockOperationExecuteAdapter = _hardwareInterfaceFTDI.HW_BlockOperationExecuteAdapter

def HW_Fail():
    return _hardwareInterfaceFTDI.HW_Fail()
HW_Fail = _hardwareInterfaceFTDI.HW_Fail

def HW_Error():
    return _hardwareInterfaceFTDI.HW_Error()
HW_Error = _hardwareInterfaceFTDI.HW_Error

def Board_Write(address, data):
    return _hardwareInterfaceFTDI.Board_Write(address, data)
Board_Write = _hardwareInterfaceFTDI.Board_Write

def Board_Read(address):
    return _hardwareInterfaceFTDI.Board_Read(address)
Board_Read = _hardwareInterfaceFTDI.Board_Read

def Board_WriteAdapter(arg1, arg2, data):
    return _hardwareInterfaceFTDI.Board_WriteAdapter(arg1, arg2, data)
Board_WriteAdapter = _hardwareInterfaceFTDI.Board_WriteAdapter

def Board_ReadAdapter(arg1, arg2):
    return _hardwareInterfaceFTDI.Board_ReadAdapter(arg1, arg2)
Board_ReadAdapter = _hardwareInterfaceFTDI.Board_ReadAdapter

def HW_GetDefault_PHY_ID():
    return _hardwareInterfaceFTDI.HW_GetDefault_PHY_ID()
HW_GetDefault_PHY_ID = _hardwareInterfaceFTDI.HW_GetDefault_PHY_ID

def HW_SetDefault_PHY_ID(PHY_ID):
    return _hardwareInterfaceFTDI.HW_SetDefault_PHY_ID(PHY_ID)
HW_SetDefault_PHY_ID = _hardwareInterfaceFTDI.HW_SetDefault_PHY_ID

def AQ_API_MDIO_Write_Default_PHY_ID(MMD, address, data):
    return _hardwareInterfaceFTDI.AQ_API_MDIO_Write_Default_PHY_ID(MMD, address, data)
AQ_API_MDIO_Write_Default_PHY_ID = _hardwareInterfaceFTDI.AQ_API_MDIO_Write_Default_PHY_ID

def AQ_API_MDIO_Read_Default_PHY_ID(MMD, address):
    return _hardwareInterfaceFTDI.AQ_API_MDIO_Read_Default_PHY_ID(MMD, address)
AQ_API_MDIO_Read_Default_PHY_ID = _hardwareInterfaceFTDI.AQ_API_MDIO_Read_Default_PHY_ID

def AQ_API_MDIO_BlockWrite_Default_PHY_ID(MMD, address, data):
    return _hardwareInterfaceFTDI.AQ_API_MDIO_BlockWrite_Default_PHY_ID(MMD, address, data)
AQ_API_MDIO_BlockWrite_Default_PHY_ID = _hardwareInterfaceFTDI.AQ_API_MDIO_BlockWrite_Default_PHY_ID

def AQ_API_MDIO_BlockRead_Default_PHY_ID(MMD, address):
    return _hardwareInterfaceFTDI.AQ_API_MDIO_BlockRead_Default_PHY_ID(MMD, address)
AQ_API_MDIO_BlockRead_Default_PHY_ID = _hardwareInterfaceFTDI.AQ_API_MDIO_BlockRead_Default_PHY_ID

def HW_BlockRead_Default_PHY_ID(MMD, address):
    return _hardwareInterfaceFTDI.HW_BlockRead_Default_PHY_ID(MMD, address)
HW_BlockRead_Default_PHY_ID = _hardwareInterfaceFTDI.HW_BlockRead_Default_PHY_ID

def HW_BlockWrite_Default_PHY_ID(MMD, address, data):
    return _hardwareInterfaceFTDI.HW_BlockWrite_Default_PHY_ID(MMD, address, data)
HW_BlockWrite_Default_PHY_ID = _hardwareInterfaceFTDI.HW_BlockWrite_Default_PHY_ID

def HW_Read_Default_PHY_ID(MMD, address):
    return _hardwareInterfaceFTDI.HW_Read_Default_PHY_ID(MMD, address)
HW_Read_Default_PHY_ID = _hardwareInterfaceFTDI.HW_Read_Default_PHY_ID

def HW_Write_Default_PHY_ID(MMD, address, data):
    return _hardwareInterfaceFTDI.HW_Write_Default_PHY_ID(MMD, address, data)
HW_Write_Default_PHY_ID = _hardwareInterfaceFTDI.HW_Write_Default_PHY_ID

def AQ_API_MDIO_MaxBlockOperations():
    return _hardwareInterfaceFTDI.AQ_API_MDIO_MaxBlockOperations()
AQ_API_MDIO_MaxBlockOperations = _hardwareInterfaceFTDI.AQ_API_MDIO_MaxBlockOperations

def AQ_API_MDIO_BlockOperationExecute(PHY_ID):
    return _hardwareInterfaceFTDI.AQ_API_MDIO_BlockOperationExecute(PHY_ID)
AQ_API_MDIO_BlockOperationExecute = _hardwareInterfaceFTDI.AQ_API_MDIO_BlockOperationExecute

def AQ_API_MDIO_BlockWrite(PHY_ID, MMD, address, data):
    return _hardwareInterfaceFTDI.AQ_API_MDIO_BlockWrite(PHY_ID, MMD, address, data)
AQ_API_MDIO_BlockWrite = _hardwareInterfaceFTDI.AQ_API_MDIO_BlockWrite

def AQ_API_MDIO_BlockRead(PHY_ID, MMD, address):
    return _hardwareInterfaceFTDI.AQ_API_MDIO_BlockRead(PHY_ID, MMD, address)
AQ_API_MDIO_BlockRead = _hardwareInterfaceFTDI.AQ_API_MDIO_BlockRead

def HW_BlockReadQueueSize():
    return _hardwareInterfaceFTDI.HW_BlockReadQueueSize()
HW_BlockReadQueueSize = _hardwareInterfaceFTDI.HW_BlockReadQueueSize

def HW_EnableLoggingStdout():
    return _hardwareInterfaceFTDI.HW_EnableLoggingStdout()
HW_EnableLoggingStdout = _hardwareInterfaceFTDI.HW_EnableLoggingStdout

def HW_EnableLoggingStderr():
    return _hardwareInterfaceFTDI.HW_EnableLoggingStderr()
HW_EnableLoggingStderr = _hardwareInterfaceFTDI.HW_EnableLoggingStderr

def HW_EnableLogging(arg1):
    return _hardwareInterfaceFTDI.HW_EnableLogging(arg1)
HW_EnableLogging = _hardwareInterfaceFTDI.HW_EnableLogging

def HW_DisableLogging(arg1):
    return _hardwareInterfaceFTDI.HW_DisableLogging(arg1)
HW_DisableLogging = _hardwareInterfaceFTDI.HW_DisableLogging

def HW_LogMsg(msg):
    return _hardwareInterfaceFTDI.HW_LogMsg(msg)
HW_LogMsg = _hardwareInterfaceFTDI.HW_LogMsg
DELEGATE_DEC_NEC_READS = _hardwareInterfaceFTDI.DELEGATE_DEC_NEC_READS
DO_VSEMI_SERDES_REDIRECTION = _hardwareInterfaceFTDI.DO_VSEMI_SERDES_REDIRECTION
DELEGATE_VSEMI_SERDES_REDIRECTION = _hardwareInterfaceFTDI.DELEGATE_VSEMI_SERDES_REDIRECTION
DELEGATE_TGE_REDIRECTION = _hardwareInterfaceFTDI.DELEGATE_TGE_REDIRECTION
DELEGATE_VIRTSERDES_REDIRECTION = _hardwareInterfaceFTDI.DELEGATE_VIRTSERDES_REDIRECTION
class Delegation_Status(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Delegation_Status, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Delegation_Status, name)
    __repr__ = _swig_repr
    __swig_setmethods__["delegateDecNecReads"] = _hardwareInterfaceFTDI.Delegation_Status_delegateDecNecReads_set
    __swig_getmethods__["delegateDecNecReads"] = _hardwareInterfaceFTDI.Delegation_Status_delegateDecNecReads_get
    if _newclass:
        delegateDecNecReads = _swig_property(_hardwareInterfaceFTDI.Delegation_Status_delegateDecNecReads_get, _hardwareInterfaceFTDI.Delegation_Status_delegateDecNecReads_set)
    __swig_setmethods__["doVsemiSerdesRedirection"] = _hardwareInterfaceFTDI.Delegation_Status_doVsemiSerdesRedirection_set
    __swig_getmethods__["doVsemiSerdesRedirection"] = _hardwareInterfaceFTDI.Delegation_Status_doVsemiSerdesRedirection_get
    if _newclass:
        doVsemiSerdesRedirection = _swig_property(_hardwareInterfaceFTDI.Delegation_Status_doVsemiSerdesRedirection_get, _hardwareInterfaceFTDI.Delegation_Status_doVsemiSerdesRedirection_set)
    __swig_setmethods__["delegateVsemiSerdesRedirection"] = _hardwareInterfaceFTDI.Delegation_Status_delegateVsemiSerdesRedirection_set
    __swig_getmethods__["delegateVsemiSerdesRedirection"] = _hardwareInterfaceFTDI.Delegation_Status_delegateVsemiSerdesRedirection_get
    if _newclass:
        delegateVsemiSerdesRedirection = _swig_property(_hardwareInterfaceFTDI.Delegation_Status_delegateVsemiSerdesRedirection_get, _hardwareInterfaceFTDI.Delegation_Status_delegateVsemiSerdesRedirection_set)
    __swig_setmethods__["delegateTgeRedirection"] = _hardwareInterfaceFTDI.Delegation_Status_delegateTgeRedirection_set
    __swig_getmethods__["delegateTgeRedirection"] = _hardwareInterfaceFTDI.Delegation_Status_delegateTgeRedirection_get
    if _newclass:
        delegateTgeRedirection = _swig_property(_hardwareInterfaceFTDI.Delegation_Status_delegateTgeRedirection_get, _hardwareInterfaceFTDI.Delegation_Status_delegateTgeRedirection_set)
    __swig_setmethods__["delegateVirtSerdesRedirection"] = _hardwareInterfaceFTDI.Delegation_Status_delegateVirtSerdesRedirection_set
    __swig_getmethods__["delegateVirtSerdesRedirection"] = _hardwareInterfaceFTDI.Delegation_Status_delegateVirtSerdesRedirection_get
    if _newclass:
        delegateVirtSerdesRedirection = _swig_property(_hardwareInterfaceFTDI.Delegation_Status_delegateVirtSerdesRedirection_get, _hardwareInterfaceFTDI.Delegation_Status_delegateVirtSerdesRedirection_set)

    def __init__(self):
        this = _hardwareInterfaceFTDI.new_Delegation_Status()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _hardwareInterfaceFTDI.delete_Delegation_Status
    __del__ = lambda self: None
Delegation_Status_swigregister = _hardwareInterfaceFTDI.Delegation_Status_swigregister
Delegation_Status_swigregister(Delegation_Status)


def HW_SetDelegationType(delegationType, adapterNumber, state):
    return _hardwareInterfaceFTDI.HW_SetDelegationType(delegationType, adapterNumber, state)
HW_SetDelegationType = _hardwareInterfaceFTDI.HW_SetDelegationType

def HW_GetDelegationType(delegationType, adapterNumber):
    return _hardwareInterfaceFTDI.HW_GetDelegationType(delegationType, adapterNumber)
HW_GetDelegationType = _hardwareInterfaceFTDI.HW_GetDelegationType

def HW_EnableClause45OverClause22(adapterNumber):
    return _hardwareInterfaceFTDI.HW_EnableClause45OverClause22(adapterNumber)
HW_EnableClause45OverClause22 = _hardwareInterfaceFTDI.HW_EnableClause45OverClause22

def HW_DisableClause45OverClause22(adapterNumber):
    return _hardwareInterfaceFTDI.HW_DisableClause45OverClause22(adapterNumber)
HW_DisableClause45OverClause22 = _hardwareInterfaceFTDI.HW_DisableClause45OverClause22

def HW_GetClause45OverClause22State(adapterNumber):
    return _hardwareInterfaceFTDI.HW_GetClause45OverClause22State(adapterNumber)
HW_GetClause45OverClause22State = _hardwareInterfaceFTDI.HW_GetClause45OverClause22State

def HW_EnablePyLogging(logger, levels):
    return _hardwareInterfaceFTDI.HW_EnablePyLogging(logger, levels)
HW_EnablePyLogging = _hardwareInterfaceFTDI.HW_EnablePyLogging

def HW_DisablePyLogging():
    return _hardwareInterfaceFTDI.HW_DisablePyLogging()
HW_DisablePyLogging = _hardwareInterfaceFTDI.HW_DisablePyLogging

def HW_SetExceptionObject(exceptionObject):
    return _hardwareInterfaceFTDI.HW_SetExceptionObject(exceptionObject)
HW_SetExceptionObject = _hardwareInterfaceFTDI.HW_SetExceptionObject

def HW_CallException(message):
    return _hardwareInterfaceFTDI.HW_CallException(message)
HW_CallException = _hardwareInterfaceFTDI.HW_CallException

def HW_Device_FullName(adapterNumber):
    return _hardwareInterfaceFTDI.HW_Device_FullName(adapterNumber)
HW_Device_FullName = _hardwareInterfaceFTDI.HW_Device_FullName

def HW_Device_Revision(adapterNumber):
    return _hardwareInterfaceFTDI.HW_Device_Revision(adapterNumber)
HW_Device_Revision = _hardwareInterfaceFTDI.HW_Device_Revision

def HW_SetDeviceParameters(adapterNumber, param, value):
    return _hardwareInterfaceFTDI.HW_SetDeviceParameters(adapterNumber, param, value)
HW_SetDeviceParameters = _hardwareInterfaceFTDI.HW_SetDeviceParameters

def HW_GetDeviceParameters(adapterNumber, param):
    return _hardwareInterfaceFTDI.HW_GetDeviceParameters(adapterNumber, param)
HW_GetDeviceParameters = _hardwareInterfaceFTDI.HW_GetDeviceParameters
MAX_BLOCK_OPERATION_SIZE = _hardwareInterfaceFTDI.MAX_BLOCK_OPERATION_SIZE
HW_Write8_cb = _hardwareInterfaceFTDI.HW_Write8_cb

def HW_Write8(adapterNumber, DEV_ID, address, data):
    return _hardwareInterfaceFTDI.HW_Write8(adapterNumber, DEV_ID, address, data)
HW_Write8 = _hardwareInterfaceFTDI.HW_Write8
HW_Write16_cb = _hardwareInterfaceFTDI.HW_Write16_cb

def HW_Write16(adapterNumber, DEV_ID, address, data):
    return _hardwareInterfaceFTDI.HW_Write16(adapterNumber, DEV_ID, address, data)
HW_Write16 = _hardwareInterfaceFTDI.HW_Write16
HW_Write32_cb = _hardwareInterfaceFTDI.HW_Write32_cb

def HW_Write32(adapterNumber, DEV_ID, address, data):
    return _hardwareInterfaceFTDI.HW_Write32(adapterNumber, DEV_ID, address, data)
HW_Write32 = _hardwareInterfaceFTDI.HW_Write32
HW_Write64_cb = _hardwareInterfaceFTDI.HW_Write64_cb

def HW_Write64(adapterNumber, DEV_ID, address, data):
    return _hardwareInterfaceFTDI.HW_Write64(adapterNumber, DEV_ID, address, data)
HW_Write64 = _hardwareInterfaceFTDI.HW_Write64
HW_Read8_cb = _hardwareInterfaceFTDI.HW_Read8_cb

def HW_Read8(adapterNumber, DEV_ID, address):
    return _hardwareInterfaceFTDI.HW_Read8(adapterNumber, DEV_ID, address)
HW_Read8 = _hardwareInterfaceFTDI.HW_Read8
HW_Read16_cb = _hardwareInterfaceFTDI.HW_Read16_cb

def HW_Read16(adapterNumber, DEV_ID, address):
    return _hardwareInterfaceFTDI.HW_Read16(adapterNumber, DEV_ID, address)
HW_Read16 = _hardwareInterfaceFTDI.HW_Read16
HW_Read32_cb = _hardwareInterfaceFTDI.HW_Read32_cb

def HW_Read32(adapterNumber, DEV_ID, address):
    return _hardwareInterfaceFTDI.HW_Read32(adapterNumber, DEV_ID, address)
HW_Read32 = _hardwareInterfaceFTDI.HW_Read32
HW_Read64_cb = _hardwareInterfaceFTDI.HW_Read64_cb

def HW_Read64(adapterNumber, DEV_ID, address):
    return _hardwareInterfaceFTDI.HW_Read64(adapterNumber, DEV_ID, address)
HW_Read64 = _hardwareInterfaceFTDI.HW_Read64
HW_BlockRead32_cb = _hardwareInterfaceFTDI.HW_BlockRead32_cb

def HW_BlockRead32(DEV_ID, address):
    return _hardwareInterfaceFTDI.HW_BlockRead32(DEV_ID, address)
HW_BlockRead32 = _hardwareInterfaceFTDI.HW_BlockRead32
HW_BlockRead64_cb = _hardwareInterfaceFTDI.HW_BlockRead64_cb

def HW_BlockRead64(DEV_ID, address):
    return _hardwareInterfaceFTDI.HW_BlockRead64(DEV_ID, address)
HW_BlockRead64 = _hardwareInterfaceFTDI.HW_BlockRead64
HW_BlockWrite32_cb = _hardwareInterfaceFTDI.HW_BlockWrite32_cb

def HW_BlockWrite32(DEV_ID, address, data):
    return _hardwareInterfaceFTDI.HW_BlockWrite32(DEV_ID, address, data)
HW_BlockWrite32 = _hardwareInterfaceFTDI.HW_BlockWrite32
HW_BlockWrite64_cb = _hardwareInterfaceFTDI.HW_BlockWrite64_cb

def HW_BlockWrite64(DEV_ID, address, data):
    return _hardwareInterfaceFTDI.HW_BlockWrite64(DEV_ID, address, data)
HW_BlockWrite64 = _hardwareInterfaceFTDI.HW_BlockWrite64
HW_BlockRead32Adapter_cb = _hardwareInterfaceFTDI.HW_BlockRead32Adapter_cb

def HW_BlockRead32Adapter(adapterNumber, DEV_ID, address):
    return _hardwareInterfaceFTDI.HW_BlockRead32Adapter(adapterNumber, DEV_ID, address)
HW_BlockRead32Adapter = _hardwareInterfaceFTDI.HW_BlockRead32Adapter
HW_BlockRead64Adapter_cb = _hardwareInterfaceFTDI.HW_BlockRead64Adapter_cb

def HW_BlockRead64Adapter(adapterNumber, DEV_ID, address):
    return _hardwareInterfaceFTDI.HW_BlockRead64Adapter(adapterNumber, DEV_ID, address)
HW_BlockRead64Adapter = _hardwareInterfaceFTDI.HW_BlockRead64Adapter
HW_BlockWrite32Adapter_cb = _hardwareInterfaceFTDI.HW_BlockWrite32Adapter_cb

def HW_BlockWrite32Adapter(adapterNumber, DEV_ID, address, data):
    return _hardwareInterfaceFTDI.HW_BlockWrite32Adapter(adapterNumber, DEV_ID, address, data)
HW_BlockWrite32Adapter = _hardwareInterfaceFTDI.HW_BlockWrite32Adapter
HW_BlockWrite64Adapter_cb = _hardwareInterfaceFTDI.HW_BlockWrite64Adapter_cb

def HW_BlockWrite64Adapter(adapterNumber, DEV_ID, address, data):
    return _hardwareInterfaceFTDI.HW_BlockWrite64Adapter(adapterNumber, DEV_ID, address, data)
HW_BlockWrite64Adapter = _hardwareInterfaceFTDI.HW_BlockWrite64Adapter
HW_API_Write8_cb = _hardwareInterfaceFTDI.HW_API_Write8_cb

def HW_API_Write8(DEV_ID, address, data):
    return _hardwareInterfaceFTDI.HW_API_Write8(DEV_ID, address, data)
HW_API_Write8 = _hardwareInterfaceFTDI.HW_API_Write8
HW_API_Write16_cb = _hardwareInterfaceFTDI.HW_API_Write16_cb

def HW_API_Write16(DEV_ID, address, data):
    return _hardwareInterfaceFTDI.HW_API_Write16(DEV_ID, address, data)
HW_API_Write16 = _hardwareInterfaceFTDI.HW_API_Write16
HW_API_Write32_cb = _hardwareInterfaceFTDI.HW_API_Write32_cb

def HW_API_Write32(DEV_ID, address, data):
    return _hardwareInterfaceFTDI.HW_API_Write32(DEV_ID, address, data)
HW_API_Write32 = _hardwareInterfaceFTDI.HW_API_Write32
HW_API_Write64_cb = _hardwareInterfaceFTDI.HW_API_Write64_cb

def HW_API_Write64(DEV_ID, address, data):
    return _hardwareInterfaceFTDI.HW_API_Write64(DEV_ID, address, data)
HW_API_Write64 = _hardwareInterfaceFTDI.HW_API_Write64
HW_API_Read8_cb = _hardwareInterfaceFTDI.HW_API_Read8_cb

def HW_API_Read8(DEV_ID, address):
    return _hardwareInterfaceFTDI.HW_API_Read8(DEV_ID, address)
HW_API_Read8 = _hardwareInterfaceFTDI.HW_API_Read8
HW_API_Read16_cb = _hardwareInterfaceFTDI.HW_API_Read16_cb

def HW_API_Read16(DEV_ID, address):
    return _hardwareInterfaceFTDI.HW_API_Read16(DEV_ID, address)
HW_API_Read16 = _hardwareInterfaceFTDI.HW_API_Read16
HW_API_Read32_cb = _hardwareInterfaceFTDI.HW_API_Read32_cb

def HW_API_Read32(DEV_ID, address):
    return _hardwareInterfaceFTDI.HW_API_Read32(DEV_ID, address)
HW_API_Read32 = _hardwareInterfaceFTDI.HW_API_Read32
HW_API_Read64_cb = _hardwareInterfaceFTDI.HW_API_Read64_cb

def HW_API_Read64(DEV_ID, address):
    return _hardwareInterfaceFTDI.HW_API_Read64(DEV_ID, address)
HW_API_Read64 = _hardwareInterfaceFTDI.HW_API_Read64
AQ_API_BlockWrite32_cb = _hardwareInterfaceFTDI.AQ_API_BlockWrite32_cb

def AQ_API_BlockWrite32(DEV_ID, address, data):
    return _hardwareInterfaceFTDI.AQ_API_BlockWrite32(DEV_ID, address, data)
AQ_API_BlockWrite32 = _hardwareInterfaceFTDI.AQ_API_BlockWrite32
AQ_API_BlockRead32_cb = _hardwareInterfaceFTDI.AQ_API_BlockRead32_cb

def AQ_API_BlockRead32(DEV_ID, address):
    return _hardwareInterfaceFTDI.AQ_API_BlockRead32(DEV_ID, address)
AQ_API_BlockRead32 = _hardwareInterfaceFTDI.AQ_API_BlockRead32
class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _hardwareInterfaceFTDI.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _hardwareInterfaceFTDI.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _hardwareInterfaceFTDI.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _hardwareInterfaceFTDI.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _hardwareInterfaceFTDI.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _hardwareInterfaceFTDI.SwigPyIterator_equal(self, x)

    def copy(self):
        return _hardwareInterfaceFTDI.SwigPyIterator_copy(self)

    def next(self):
        return _hardwareInterfaceFTDI.SwigPyIterator_next(self)

    def __next__(self):
        return _hardwareInterfaceFTDI.SwigPyIterator___next__(self)

    def previous(self):
        return _hardwareInterfaceFTDI.SwigPyIterator_previous(self)

    def advance(self, n):
        return _hardwareInterfaceFTDI.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _hardwareInterfaceFTDI.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _hardwareInterfaceFTDI.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _hardwareInterfaceFTDI.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _hardwareInterfaceFTDI.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _hardwareInterfaceFTDI.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _hardwareInterfaceFTDI.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _hardwareInterfaceFTDI.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class UnsignedCharVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnsignedCharVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UnsignedCharVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _hardwareInterfaceFTDI.UnsignedCharVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _hardwareInterfaceFTDI.UnsignedCharVector___nonzero__(self)

    def __bool__(self):
        return _hardwareInterfaceFTDI.UnsignedCharVector___bool__(self)

    def __len__(self):
        return _hardwareInterfaceFTDI.UnsignedCharVector___len__(self)

    def __getslice__(self, i, j):
        return _hardwareInterfaceFTDI.UnsignedCharVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _hardwareInterfaceFTDI.UnsignedCharVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _hardwareInterfaceFTDI.UnsignedCharVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _hardwareInterfaceFTDI.UnsignedCharVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _hardwareInterfaceFTDI.UnsignedCharVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _hardwareInterfaceFTDI.UnsignedCharVector___setitem__(self, *args)

    def pop(self):
        return _hardwareInterfaceFTDI.UnsignedCharVector_pop(self)

    def append(self, x):
        return _hardwareInterfaceFTDI.UnsignedCharVector_append(self, x)

    def empty(self):
        return _hardwareInterfaceFTDI.UnsignedCharVector_empty(self)

    def size(self):
        return _hardwareInterfaceFTDI.UnsignedCharVector_size(self)

    def swap(self, v):
        return _hardwareInterfaceFTDI.UnsignedCharVector_swap(self, v)

    def begin(self):
        return _hardwareInterfaceFTDI.UnsignedCharVector_begin(self)

    def end(self):
        return _hardwareInterfaceFTDI.UnsignedCharVector_end(self)

    def rbegin(self):
        return _hardwareInterfaceFTDI.UnsignedCharVector_rbegin(self)

    def rend(self):
        return _hardwareInterfaceFTDI.UnsignedCharVector_rend(self)

    def clear(self):
        return _hardwareInterfaceFTDI.UnsignedCharVector_clear(self)

    def get_allocator(self):
        return _hardwareInterfaceFTDI.UnsignedCharVector_get_allocator(self)

    def pop_back(self):
        return _hardwareInterfaceFTDI.UnsignedCharVector_pop_back(self)

    def erase(self, *args):
        return _hardwareInterfaceFTDI.UnsignedCharVector_erase(self, *args)

    def __init__(self, *args):
        this = _hardwareInterfaceFTDI.new_UnsignedCharVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _hardwareInterfaceFTDI.UnsignedCharVector_push_back(self, x)

    def front(self):
        return _hardwareInterfaceFTDI.UnsignedCharVector_front(self)

    def back(self):
        return _hardwareInterfaceFTDI.UnsignedCharVector_back(self)

    def assign(self, n, x):
        return _hardwareInterfaceFTDI.UnsignedCharVector_assign(self, n, x)

    def resize(self, *args):
        return _hardwareInterfaceFTDI.UnsignedCharVector_resize(self, *args)

    def insert(self, *args):
        return _hardwareInterfaceFTDI.UnsignedCharVector_insert(self, *args)

    def reserve(self, n):
        return _hardwareInterfaceFTDI.UnsignedCharVector_reserve(self, n)

    def capacity(self):
        return _hardwareInterfaceFTDI.UnsignedCharVector_capacity(self)
    __swig_destroy__ = _hardwareInterfaceFTDI.delete_UnsignedCharVector
    __del__ = lambda self: None
UnsignedCharVector_swigregister = _hardwareInterfaceFTDI.UnsignedCharVector_swigregister
UnsignedCharVector_swigregister(UnsignedCharVector)


def HW_GpioSetAdapter(adapterNumber, pinNumber, setValue):
    return _hardwareInterfaceFTDI.HW_GpioSetAdapter(adapterNumber, pinNumber, setValue)
HW_GpioSetAdapter = _hardwareInterfaceFTDI.HW_GpioSetAdapter

def HW_GpioGetAdapter(adapterNumber, pinNumber):
    return _hardwareInterfaceFTDI.HW_GpioGetAdapter(adapterNumber, pinNumber)
HW_GpioGetAdapter = _hardwareInterfaceFTDI.HW_GpioGetAdapter

def i2c_WriteAdapter(adapterNumber, address, data):
    return _hardwareInterfaceFTDI.i2c_WriteAdapter(adapterNumber, address, data)
i2c_WriteAdapter = _hardwareInterfaceFTDI.i2c_WriteAdapter

def i2c_ReadAdapter(adapterNumber, address, reg, regLength, numBytes):
    return _hardwareInterfaceFTDI.i2c_ReadAdapter(adapterNumber, address, reg, regLength, numBytes)
i2c_ReadAdapter = _hardwareInterfaceFTDI.i2c_ReadAdapter
# This file is compatible with both classic and new-style classes.


