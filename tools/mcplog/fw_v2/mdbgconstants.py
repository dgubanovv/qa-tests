#!/usr/local/bin/python2.7
#
#                    Copyright 2008-2013 Aquantia Corporation
#                    Confidential and Proprietary
#
# This file was auto-generated by ./scripts/mdbggen.py using this command:
#      ./scripts/mdbggen.py -i ./include/dbgMsgs.h -o ./include/dbgMsgArgs.h -p ./scripts/mdbgconstants.py
#

# VERSION = 2.11.7


def DBG_ID_USX(args):
    numargs = 4
    format  = "%s\n"
    result = format % (formatUSXMsg(args[0], args[1], args[2], args[3]))

    return result
    # end of function DBG_ID_USX

def DBG_ID_PROV_CHANGE(args):
    numargs = 2
    format  = "%s\n"
    result = format % (provVarLogger(args[0], args[1]))

    return result
    # end of function DBG_ID_PROV_CHANGE

def DBG_ID_ETH_WITHOUT_IPV4(args):
    numargs = 0
    format  = "DRV EthConfig without ipv4\n"
    result = format % ()

    return result
    # end of function DBG_ID_ETH_WITHOUT_IPV4

def DBG_ID_ETH_PRINT_CONFIG(args):
    numargs = 4
    format  = "DRV EthConfig, ipv4: %d.%d.%d.%d, mask: %d.%d.%d.%d\n"
    result = format % (getLowerByteFromShort(args[0]), getUpperByteFromShort(args[0]), getLowerByteFromShort(args[1]), getUpperByteFromShort(args[1]), getLowerByteFromShort(args[2]), getUpperByteFromShort(args[2]), getLowerByteFromShort(args[3]), getUpperByteFromShort(args[3]))

    return result
    # end of function DBG_ID_ETH_PRINT_CONFIG

def DBG_ID_ETH_ADD_IPV4(args):
    numargs = 4
    format  = "DRV Add IPv4 address, ipv4: %d.%d.%d.%d, mask: %d.%d.%d.%d\n"
    result = format % (getLowerByteFromShort(args[0]), getUpperByteFromShort(args[0]), getLowerByteFromShort(args[1]), getUpperByteFromShort(args[1]), getLowerByteFromShort(args[2]), getUpperByteFromShort(args[2]), getLowerByteFromShort(args[3]), getUpperByteFromShort(args[3]))

    return result
    # end of function DBG_ID_ETH_ADD_IPV4

def DBG_ID_ETH_ADD_IPV6(args):
    numargs = 8
    format  = "DRV Add IPv6 address, ipv6: %08X:%08X:%08X:%08X\n"
    result = format % (makeDword(args[0], args[1]), makeDword(args[2], args[3]), makeDword(args[4], args[5]), makeDword(args[6], args[7]))

    return result
    # end of function DBG_ID_ETH_ADD_IPV6

def DBG_ID_ETH_NETIF_NO_PBUFS(args):
    numargs = 1
    format  = "netif %d Could not allocate pbufs\n"
    result = format % (args[0])

    return result
    # end of function DBG_ID_ETH_NETIF_NO_PBUFS

def DBG_ID_ETH_NETIF_NOT_ALIGNED_BUFFER(args):
    numargs = 3
    format  = "netif %d Allocated not aligned buffer %08X\n"
    result = format % (args[0], makeDword(args[1], args[2]))

    return result
    # end of function DBG_ID_ETH_NETIF_NOT_ALIGNED_BUFFER

def DBG_ID_ETH_EXTRACT_FAILED(args):
    numargs = 1
    format  = "ETH%d extract failed\n"
    result = format % (args[0])

    return result
    # end of function DBG_ID_ETH_EXTRACT_FAILED

def DBG_ID_ETH_RECEIVE_BIG_PACKET(args):
    numargs = 0
    format  = "Received big packet. Update MDIO timeout\n"
    result = format % ()

    return result
    # end of function DBG_ID_ETH_RECEIVE_BIG_PACKET

def DBG_ID_ETH_RECEIVE_TRUNCATED_PACKET_1(args):
    numargs = 0
    format  = "MDIO truncated packet received. Enable serdes\n"
    result = format % ()

    return result
    # end of function DBG_ID_ETH_RECEIVE_TRUNCATED_PACKET_1

def DBG_ID_ETH_RECEIVE_TRUNCATED_PACKET_2(args):
    numargs = 0
    format  = "MDIO truncated packet received. Ignore\n"
    result = format % ()

    return result
    # end of function DBG_ID_ETH_RECEIVE_TRUNCATED_PACKET_2

def DBG_ID_ETH_ENDIS_MDIO_DATAPATH(args):
    numargs = 1
    format  = "%s MDIO Datapath\n"
    result = format % (shortToEnableStatus(args[0], 0))

    return result
    # end of function DBG_ID_ETH_ENDIS_MDIO_DATAPATH

def DBG_ID_ETH_MDNS_WAKEUP(args):
    numargs = 0
    format  = "ETH MDNS wakeup\n"
    result = format % ()

    return result
    # end of function DBG_ID_ETH_MDNS_WAKEUP

def DBG_ID_ETH_UP(args):
    numargs = 0
    format  = "ETH up\n"
    result = format % ()

    return result
    # end of function DBG_ID_ETH_UP

def DBG_ID_ETH_DOWN(args):
    numargs = 0
    format  = "ETH down\n"
    result = format % ()

    return result
    # end of function DBG_ID_ETH_DOWN

def DBG_ID_ETH_RESTART(args):
    numargs = 0
    format  = "ETH restart\n"
    result = format % ()

    return result
    # end of function DBG_ID_ETH_RESTART

def DBG_ID_ETH_SEND_BIG_PACKET(args):
    numargs = 0
    format  = "ETH Sending big packet. Update MDIO timeout\n"
    result = format % ()

    return result
    # end of function DBG_ID_ETH_SEND_BIG_PACKET

def DBG_ID_ETH_INJECT_FAILED(args):
    numargs = 1
    format  = "ETH%d Inject failed\n"
    result = format % (args[0])

    return result
    # end of function DBG_ID_ETH_INJECT_FAILED

def DBG_ID_ETH_NETIF_SUBINIT(args):
    numargs = 1
    format  = "ETH netif%d sub init\n"
    result = format % (args[0])

    return result
    # end of function DBG_ID_ETH_NETIF_SUBINIT

def DBG_ID_ETH_CONFIG(args):
    numargs = 0
    format  = "ETH Config\n"
    result = format % ()

    return result
    # end of function DBG_ID_ETH_CONFIG

def DBG_ID_ETH_ERROR_NETIF_ADD_1(args):
    numargs = 1
    format  = "ETH Error adding netif, no more slots. Used slots count: %d\n"
    result = format % (args[0])

    return result
    # end of function DBG_ID_ETH_ERROR_NETIF_ADD_1

def DBG_ID_ETH_ERROR_NETIF_ADD_2(args):
    numargs = 0
    format  = "ETH Error adding netif\n"
    result = format % ()

    return result
    # end of function DBG_ID_ETH_ERROR_NETIF_ADD_2

def DBG_ID_ETH_INIT(args):
    numargs = 0
    format  = "ETH init\n"
    result = format % ()

    return result
    # end of function DBG_ID_ETH_INIT

def DBG_ID_ETH_CLEAN_UP(args):
    numargs = 0
    format  = "ETH clean up\n"
    result = format % ()

    return result
    # end of function DBG_ID_ETH_CLEAN_UP

def DBG_ID_ETH_ENABLE_MAGIC_PACKET_DETECTION(args):
    numargs = 3
    format  = "ETH Enable magic packet detection: %02X-%02X-%02X-%02X-%02X-%02X\n"
    result = format % (getLowerByteFromShort(args[2]), getUpperByteFromShort(args[2]), getLowerByteFromShort(args[3]), getUpperByteFromShort(args[3]), getLowerByteFromShort(args[4]), getUpperByteFromShort(args[4]))

    return result
    # end of function DBG_ID_ETH_ENABLE_MAGIC_PACKET_DETECTION

def DBG_ID_ETH_DISABLE_MAGIC_PACKET_DETECTION(args):
    numargs = 0
    format  = "ETH Disable magic packet detection\n"
    result = format % ()

    return result
    # end of function DBG_ID_ETH_DISABLE_MAGIC_PACKET_DETECTION

def DBG_ID_ETH_ACTIVATE_WOL_HOOK(args):
    numargs = 0
    format  = "ETH Activate WoL Hook\n"
    result = format % ()

    return result
    # end of function DBG_ID_ETH_ACTIVATE_WOL_HOOK

def DBG_ID_ETH_DEACTIVATE_WOL_HOOK(args):
    numargs = 0
    format  = "ETH Deactivate WoL Hook\n"
    result = format % ()

    return result
    # end of function DBG_ID_ETH_DEACTIVATE_WOL_HOOK

def DBG_ID_ETH_ACTIVATE_WOL_PATTERN(args):
    numargs = 0
    format  = "ETH Activate WoL pattern #%d, crc: 0x%04X\n"
    result = format % (args[0], args[1])

    return result
    # end of function DBG_ID_ETH_ACTIVATE_WOL_PATTERN

def DBG_ID_ETH_DEACTIVATE_WOL_PATTERN(args):
    numargs = 1
    format  = "ETH Deactivate WoL pattern #%d\n"
    result = format % (args[0])

    return result
    # end of function DBG_ID_ETH_DEACTIVATE_WOL_PATTERN

def DBG_ID_ETH_ENABLE_SERDES(args):
    numargs = 2
    format  = "ETH Enable serdes for %dmS\n"
    result = format % (makeDword(args[0], args[1]))

    return result
    # end of function DBG_ID_ETH_ENABLE_SERDES

def DBG_ID_NUMBERED_ETH_UP(args):
    numargs = 1
    format  = "ETH%d up\n"
    result = format % (args[0])

    return result
    # end of function DBG_ID_NUMBERED_ETH_UP

def DBG_ID_NUMBERED_ETH_DOWN(args):
    numargs = 1
    format  = "ETH%d down\n"
    result = format % (args[0])

    return result
    # end of function DBG_ID_NUMBERED_ETH_DOWN

def DBG_ID_NUMBERED_ETH_REMOVED(args):
    numargs = 1
    format  = "ETH%d Removed\n"
    result = format % (args[0])

    return result
    # end of function DBG_ID_NUMBERED_ETH_REMOVED

def DBG_ID_ETH_CANNOT_ADD_IPV6_ADDR1(args):
    numargs = 0
    format  = "ETH could not add IPv6 link local address due to no net IF configured\n"
    result = format % ()

    return result
    # end of function DBG_ID_ETH_CANNOT_ADD_IPV6_ADDR1

def DBG_ID_ETH_CANNOT_ADD_IPV6_ADDR2(args):
    numargs = 0
    format  = "ETH could not add IPv6 address due to no net IF configured\n"
    result = format % ()

    return result
    # end of function DBG_ID_ETH_CANNOT_ADD_IPV6_ADDR2

def DBG_ID_ETH_CANNOT_ADD_IPV6_ADDR3(args):
    numargs = 1
    format  = "ETH could not add IPv6 address with error %d\n"
    result = format % (args[0])

    return result
    # end of function DBG_ID_ETH_CANNOT_ADD_IPV6_ADDR3

def DBG_ID_TCPKA_WAKE_ACK_RESEND_COUNT(args):
    numargs = 0
    format  = "TCPKA wake due to ack resend count\n"
    result = format % ()

    return result
    # end of function DBG_ID_TCPKA_WAKE_ACK_RESEND_COUNT

def DBG_ID_TCPKA_WAKE_PROB_PACKET(args):
    numargs = 0
    format  = "TCPKA wake due to not prob packet\n"
    result = format % ()

    return result
    # end of function DBG_ID_TCPKA_WAKE_PROB_PACKET

def DBG_ID_TCPKA_NO_SLOT_FOR_IPV6(args):
    numargs = 0
    format  = "tcpka - no tcpka slot for IPv6\n"
    result = format % ()

    return result
    # end of function DBG_ID_TCPKA_NO_SLOT_FOR_IPV6

def DBG_ID_TCPKA_ADD_IPV6_LOG1(args):
    numargs = 18
    format  = "tcpka add IPv6. Local: %08X:%08X:%08X:%08X : %d. Remote: %08X:%08X:%08X:%08X : %d\n"
    result = format % (makeDword(args[0], args[1]), makeDword(args[2], args[3]), makeDword(args[4], args[5]), makeDword(args[6], args[7]), args[8], makeDword(args[9], args[10]), makeDword(args[11], args[12]), makeDword(args[13], args[14]), makeDword(args[15], args[16]), args[17])

    return result
    # end of function DBG_ID_TCPKA_ADD_IPV6_LOG1

def DBG_ID_TCPKA_ADD_IPV6_LOG2(args):
    numargs = 11
    format  = "tcpka add IPv6. i %d s, rc %d, ri %d ms, sn %d, an %d, ws %d\n"
    result = format % (makeDword(args[0], args[1]), makeDword(args[2], args[3]), makeDword(args[4], args[5]), makeDword(args[6], args[7]), makeDword(args[8], args[9]), args[10])

    return result
    # end of function DBG_ID_TCPKA_ADD_IPV6_LOG2

def DBG_ID_TCPKA_NO_SLOT_FOR_IPV4(args):
    numargs = 0
    format  = "tcpka - no tcpka slot for IPv4\n"
    result = format % ()

    return result
    # end of function DBG_ID_TCPKA_NO_SLOT_FOR_IPV4

def DBG_ID_TCPKA_ADD_IPV4(args):
    numargs = 17
    format  = "tcpka add IPv4 - %08X : %d, %08X : %d, i %d s, rc %d, ri %d ms, sn %d, an %d, ws %d\n"
    result = format % (makeDword(args[0], args[1]), args[2], makeDword(args[3], args[4]), args[5], makeDword(args[6], args[7]), makeDword(args[8], args[9]), makeDword(args[10], args[11]), makeDword(args[12], args[13]), makeDword(args[14], args[15]), args[16])

    return result
    # end of function DBG_ID_TCPKA_ADD_IPV4

def DBG_ID_WAKE_WAKE_ON_PING_ICMP_TYPE_128(args):
    numargs = 0
    format  = "wake on ping (ICMP6 type - 128)\n"
    result = format % ()

    return result
    # end of function DBG_ID_WAKE_WAKE_ON_PING_ICMP_TYPE_128

def DBG_ID_WAKE_WAKE_ON_PING_ICMP_TYPE_8(args):
    numargs = 0
    format  = "wake on ping (ICMP6 type - 8)\n"
    result = format % ()

    return result
    # end of function DBG_ID_WAKE_WAKE_ON_PING_ICMP_TYPE_8

def DBG_ID_WAKE_WAKE_ON_TCP_SYN(args):
    numargs = 0
    format  = "wake on TCP SYN\n"
    result = format % ()

    return result
    # end of function DBG_ID_WAKE_WAKE_ON_TCP_SYN

def DBG_ID_WAKE_WAKE_ON_UDP(args):
    numargs = 0
    format  = "%d wake on UDP\n"
    result = format % ()

    return result
    # end of function DBG_ID_WAKE_WAKE_ON_UDP

def DBG_ID_WAKE_WAKE_ON_IPV6_ADDRESS_GUARD(args):
    numargs = 0
    format  = "wake on IPv6 address guard\n"
    result = format % ()

    return result
    # end of function DBG_ID_WAKE_WAKE_ON_IPV6_ADDRESS_GUARD

def DBG_ID_WAKE_WAKE_ON_IPV4_ADDRESS_GUARD(args):
    numargs = 2
    format  = "wake on IPv4 address guard, ip: %d.%d.%d.%d\n"
    result = format % (getLowerByteFromShort(args[0]), getUpperByteFromShort(args[0]), getLowerByteFromShort(args[1]), getUpperByteFromShort(args[1]))

    return result
    # end of function DBG_ID_WAKE_WAKE_ON_IPV4_ADDRESS_GUARD

def DBG_ID_WAKE_NO_SLOT_FOR_IPV6(args):
    numargs = 0
    format  = "wake - no wake slot for IPv6\n"
    result = format % ()

    return result
    # end of function DBG_ID_WAKE_NO_SLOT_FOR_IPV6

def DBG_ID_WAKE_ADD_IPV6(args):
    numargs = 10
    format  = "wake add IPv6 - %08X:%08X:%08X:%08X : %d %d\n"
    result = format % (makeDword(args[0], args[1]), makeDword(args[2], args[3]), makeDword(args[4], args[5]), makeDword(args[6], args[7]), args[8], args[9])

    return result
    # end of function DBG_ID_WAKE_ADD_IPV6

def DBG_ID_WAKE_NO_SLOT_FOR_IPV4(args):
    numargs = 0
    format  = "wake - no wake slot for IPv4\n"
    result = format % ()

    return result
    # end of function DBG_ID_WAKE_NO_SLOT_FOR_IPV4

def DBG_ID_WAKE_ADD_IPV4(args):
    numargs = 4
    format  = "wake add IPv4 - %08X : %d %d\n"
    result = format % (makeDword(args[0], args[1]), args[2], args[3])

    return result
    # end of function DBG_ID_WAKE_ADD_IPV4

def DBG_ID_WAKE_NO_SLOT_FOR_IPV4_GUARD(args):
    numargs = 0
    format  = "wake - no wake slot for IPv4 guard\n"
    result = format % ()

    return result
    # end of function DBG_ID_WAKE_NO_SLOT_FOR_IPV4_GUARD

def DBG_ID_WAKE_ADD_IPV4_GUARD(args):
    numargs = 2
    format  = "wake add IPv4 address guard, addr: %d.%d.%d.%d\n"
    result = format % (getLowerByteFromShort(args[0]), getUpperByteFromShort(args[0]), getLowerByteFromShort(args[1]), getUpperByteFromShort(args[1]))

    return result
    # end of function DBG_ID_WAKE_ADD_IPV4_GUARD

def DBG_ID_WAKE_NO_SLOT_FOR_IPV6_GUARD(args):
    numargs = 0
    format  = "wake - no wake slot for IPv6 guard\n"
    result = format % ()

    return result
    # end of function DBG_ID_WAKE_NO_SLOT_FOR_IPV6_GUARD

def DBG_ID_WAKE_ADD_IPV6_GUARD(args):
    numargs = 8
    format  = "wake add IPv6 address guard, addr: %08X:%08X:%08X:%08X\n"
    result = format % (makeDword(args[0], args[1]), makeDword(args[2], args[3]), makeDword(args[4], args[5]), makeDword(args[6], args[7]))

    return result
    # end of function DBG_ID_WAKE_ADD_IPV6_GUARD

def DBG_ID_WOL_MAGIC_PACKET_DETECTED(args):
    numargs = 0
    format  = "ETH WoL Magic packet detected\n"
    result = format % ()

    return result
    # end of function DBG_ID_WOL_MAGIC_PACKET_DETECTED

def DBG_ID_WOL_FILTER_PACKET_DETECTED(args):
    numargs = 0
    format  = "ETH WoL Filter packet detected\n"
    result = format % ()

    return result
    # end of function DBG_ID_WOL_FILTER_PACKET_DETECTED

def DBG_ID_PHY_ADVERTISE_LOW_POWER(args):
    numargs = 0
    format  = "phyAdvertise: Low Power\n"
    result = format % ()

    return result
    # end of function DBG_ID_PHY_ADVERTISE_LOW_POWER

def DBG_ID_PHY_ADVERTISE_RATES_MASK(args):
    numargs = 3
    format  = "phyAdvertise: %02X %d\n"
    result = format % (args[0], makeDword(args[1], args[2]))

    return result
    # end of function DBG_ID_PHY_ADVERTISE_RATES_MASK

def DBG_ID_PHY_RESTART_ANEG(args):
    numargs = 0
    format  = "PHY restart aneg\n"
    result = format % ()

    return result
    # end of function DBG_ID_PHY_RESTART_ANEG

def DBG_ID_CABLE_DIAG_PAIR(args):
    numargs = 4
    format  = "Cable diag. Pair: %d, status: %d, dist: %d, value: %d\n"
    result = format % (args[0], args[1], args[2], args[3])

    return result
    # end of function DBG_ID_CABLE_DIAG_PAIR

def DBG_ID_CABLE_DIAG_START(args):
    numargs = 0
    format  = "Cable diag start\n"
    result = format % ()

    return result
    # end of function DBG_ID_CABLE_DIAG_START

def DBG_ID_CABLE_DIAG_DONE(args):
    numargs = 0
    format  = "Cable diag done\n"
    result = format % ()

    return result
    # end of function DBG_ID_CABLE_DIAG_DONE

def DBG_ID_FLASH_LOAD(args):
    numargs = 4
    format  = "Flash load, addr: 0x%08X, size: 0x%08X\n"
    result = format % (makeDword(args[0], args[1]), makeDword(args[2], args[3]))

    return result
    # end of function DBG_ID_FLASH_LOAD

def DBG_ID_PHY_HASH_VALIDATION_FAILED(args):
    numargs = 0
    format  = "PHY Hash validation failed\n"
    result = format % ()

    return result
    # end of function DBG_ID_PHY_HASH_VALIDATION_FAILED

def DBG_ID_PHY_HASH_VALIDATION_PASSED(args):
    numargs = 0
    format  = "PHY Hash validated\n"
    result = format % ()

    return result
    # end of function DBG_ID_PHY_HASH_VALIDATION_PASSED

def DBG_ID_PHY_HASH_VALIDATION_SKIPPED(args):
    numargs = 0
    format  = "PHY Hash validation skipped\n"
    result = format % ()

    return result
    # end of function DBG_ID_PHY_HASH_VALIDATION_SKIPPED

def DBG_ID_PHY_READ_FROM_FLASH_REPORT(args):
    numargs = 2
    format  = "PHY read from flash report: calculated Crc16: 0x%04X, expected Crc16: 0x%04X\n"
    result = format % (args[0], args[1])

    return result
    # end of function DBG_ID_PHY_READ_FROM_FLASH_REPORT

def DBG_ID_PHY_MDIO_WRITE_REPORT(args):
    numargs = 2
    format  = "PHY mdio write report: calculated Crc16: 0x%04X, expected Crc16: 0x%04X\n"
    result = format % (args[0], args[1])

    return result
    # end of function DBG_ID_PHY_MDIO_WRITE_REPORT

def DBG_ID_PHY_LOAD_ERROR_MDIO_CRC16(args):
    numargs = 0
    format  = "PHY loading error. MDIO Crc16 validation failed\n"
    result = format % ()

    return result
    # end of function DBG_ID_PHY_LOAD_ERROR_MDIO_CRC16

def DBG_ID_PHY_LOAD_ERROR_FLASH_CRC16(args):
    numargs = 0
    format  = "PHY loading error. Flash Crc16 validation failed\n"
    result = format % ()

    return result
    # end of function DBG_ID_PHY_LOAD_ERROR_FLASH_CRC16

def DBG_ID_PHY_EUROPA_LOAD_FROM_MDIO_MAX_ATTEMPTS(args):
    numargs = 2
    format  = "%d Europa load from mdio, max attempts: %u\n"
    result = format % (makeDword(args[0], args[1]))

    return result
    # end of function DBG_ID_PHY_EUROPA_LOAD_FROM_MDIO_MAX_ATTEMPTS

def DBG_ID_PHY_EUROPA_MDIO_LOAD_DONE(args):
    numargs = 0
    format  = "Europa mdio load done\n"
    result = format % ()

    return result
    # end of function DBG_ID_PHY_EUROPA_MDIO_LOAD_DONE

def DBG_ID_PHY_EUROPA_READY(args):
    numargs = 0
    format  = "Europa ready\n"
    result = format % ()

    return result
    # end of function DBG_ID_PHY_EUROPA_READY

def DBG_ID_PHY_EUROPA_FW_DIDNT_START(args):
    numargs = 0
    format  = "Europa FW didn't start\n"
    result = format % ()

    return result
    # end of function DBG_ID_PHY_EUROPA_FW_DIDNT_START

def DBG_ID_PHY_EUROPA_MDIO_LOAD_FAILED(args):
    numargs = 0
    format  = "Europa mdio load failed\n"
    result = format % ()

    return result
    # end of function DBG_ID_PHY_EUROPA_MDIO_LOAD_FAILED

def DBG_ID_PHY_EUROPA_LOAD_FROM_DAISY_CHAIN(args):
    numargs = 0
    format  = "Europa load from daisy chain\n"
    result = format % ()

    return result
    # end of function DBG_ID_PHY_EUROPA_LOAD_FROM_DAISY_CHAIN

def DBG_ID_PHY_EUROPA_DAISY_CHAIN_DONE(args):
    numargs = 0
    format  = "Daisy chain done\n"
    result = format % ()

    return result
    # end of function DBG_ID_PHY_EUROPA_DAISY_CHAIN_DONE

def DBG_ID_PHY_EUROPA_DAISY_CHAIN_TIMEOUT(args):
    numargs = 0
    format  = "Europa daisy chain timeout\n"
    result = format % ()

    return result
    # end of function DBG_ID_PHY_EUROPA_DAISY_CHAIN_TIMEOUT

def DBG_ID_PHY_EUROPA_NOT_READY(args):
    numargs = 0
    format  = "Europa not ready\n"
    result = format % ()

    return result
    # end of function DBG_ID_PHY_EUROPA_NOT_READY

def DBG_ID_PHY_EUROPA_LOAD_FROM_HOST(args):
    numargs = 0
    format  = "Europa load from host\n"
    result = format % ()

    return result
    # end of function DBG_ID_PHY_EUROPA_LOAD_FROM_HOST

def DBG_ID_PHY_EUROPA_LOAD_FROM_HOST_DONE(args):
    numargs = 0
    format  = "Europa load from host done\n"
    result = format % ()

    return result
    # end of function DBG_ID_PHY_EUROPA_LOAD_FROM_HOST_DONE

def DBG_ID_PHY_EUROPA_MCP_RUN_FAILED(args):
    numargs = 0
    format  = "Europa mcp run failed\n"
    result = format % ()

    return result
    # end of function DBG_ID_PHY_EUROPA_MCP_RUN_FAILED

def DBG_ID_PHY_EUROPA_LOAD_FROM_HOST_FAILED(args):
    numargs = 2
    format  = "Europa load from host failed, err: %d\n"
    result = format % (makeDword(args[0], args[1]))

    return result
    # end of function DBG_ID_PHY_EUROPA_LOAD_FROM_HOST_FAILED

def DBG_ID_EUROPA_POLL_PHY_MAGIC_PACKET_DETECTED(args):
    numargs = 0
    format  = "PHY Magic packet detected\n"
    result = format % ()

    return result
    # end of function DBG_ID_EUROPA_POLL_PHY_MAGIC_PACKET_DETECTED

def DBG_ID_EUROPA_POLL_WAKE_UP_FRAME_DETECTED(args):
    numargs = 0
    format  = "Wake up frame detected\n"
    result = format % ()

    return result
    # end of function DBG_ID_EUROPA_POLL_WAKE_UP_FRAME_DETECTED

def DBG_ID_EUROPA_POLL_REG_FAILED(args):
    numargs = 2
    format  = "Europa 0x%02X.0x%04X failed\n"
    result = format % (args[0], args[1])

    return result
    # end of function DBG_ID_EUROPA_POLL_REG_FAILED

def DBG_ID_EUROPA_POLL_PHY_SIF_RATE_TRANSITION(args):
    numargs = 1
    format  = "PHY SIF RATE TRANSITION %x\n"
    result = format % (args[0])

    return result
    # end of function DBG_ID_EUROPA_POLL_PHY_SIF_RATE_TRANSITION

def DBG_ID_EUROPA_POLL_PHY_SIF_MODE_TRANSITION(args):
    numargs = 1
    format  = "PHY SIF MODE TRANSITION %x\n"
    result = format % (args[0])

    return result
    # end of function DBG_ID_EUROPA_POLL_PHY_SIF_MODE_TRANSITION

def DBG_ID_EUROPA_POLL_PHY_LINK_DOWN(args):
    numargs = 0
    format  = "PHY LINK DOWN\n"
    result = format % ()

    return result
    # end of function DBG_ID_EUROPA_POLL_PHY_LINK_DOWN

def DBG_ID_EUROPA_POLL_PHY_LINK_UP(args):
    numargs = 0
    format  = "PHY LINK UP\n"
    result = format % ()

    return result
    # end of function DBG_ID_EUROPA_POLL_PHY_LINK_UP

def DBG_ID_EUROPA_POLL_COPPER_CONNECTED(args):
    numargs = 1
    format  = "PHY COPPER CONNECTED, CABLE LEN: %d\n"
    result = format % (args[0])

    return result
    # end of function DBG_ID_EUROPA_POLL_COPPER_CONNECTED

def DBG_ID_EUROPA_POLL_COPPER_RATE_CHANGED(args):
    numargs = 1
    format  = "PHY COPPER RATE CHANGED %x\n"
    result = format % (args[0])

    return result
    # end of function DBG_ID_EUROPA_POLL_COPPER_RATE_CHANGED

def DBG_ID_EUROPA_POLL_OPTIONS_POLL_FAILED(args):
    numargs = 0
    format  = "Europa options poll failed\n"
    result = format % ()

    return result
    # end of function DBG_ID_EUROPA_POLL_OPTIONS_POLL_FAILED

def DBG_ID_EUROPA_POLL_COPPER_DISCONNECTED(args):
    numargs = 1
    format  = "PHY COPPER DISCONNECTED %x\n"
    result = format % (args[0])

    return result
    # end of function DBG_ID_EUROPA_POLL_COPPER_DISCONNECTED

def DBG_ID_EUROPA_POLL_TEMPERATURE_POLL_FAILED(args):
    numargs = 0
    format  = "Europa temperature poll failed\n"
    result = format % ()

    return result
    # end of function DBG_ID_EUROPA_POLL_TEMPERATURE_POLL_FAILED

def DBG_ID_EUROPA_POLL_PHY_GLOBAL_FAULT(args):
    numargs = 1
    format  = "PHY GLOBAL FAULT 0x%04x\n"
    result = format % (args[0])

    return result
    # end of function DBG_ID_EUROPA_POLL_PHY_GLOBAL_FAULT

def DBG_ID_EUROPA_POLL_FAST_RETRAIN_STARTED(args):
    numargs = 0
    format  = "PHY fast retrain started\n"
    result = format % ()

    return result
    # end of function DBG_ID_EUROPA_POLL_FAST_RETRAIN_STARTED

def DBG_ID_EUROPA_POLL_MINIMAL_SPEED_LINK_POLL_FAILED(args):
    numargs = 0
    format  = "Europa minimal link speed poll failed\n"
    result = format % ()

    return result
    # end of function DBG_ID_EUROPA_POLL_MINIMAL_SPEED_LINK_POLL_FAILED

def DBG_ID_EUROPA_POLL_PHY_BREAK_ON_ALARM(args):
    numargs = 0
    format  = "PHY BREAK ON ALARM\n"
    result = format % ()

    return result
    # end of function DBG_ID_EUROPA_POLL_PHY_BREAK_ON_ALARM

def DBG_ID_EUROPA_POLL_MDIO_FAILURE(args):
    numargs = 0
    format  = "MDIO failure\n"
    result = format % ()

    return result
    # end of function DBG_ID_EUROPA_POLL_MDIO_FAILURE

def DBG_ID_LOOPBACK_INTERNAL_LOOPBACK_STATUS(args):
    numargs = 1
    format  = "Internal loopback status: %s\n"
    result = format % (shortToEnableStatus(args[0], 1))

    return result
    # end of function DBG_ID_LOOPBACK_INTERNAL_LOOPBACK_STATUS

def DBG_ID_LOOPBACK_EXTERNAL_LOOPBACK_AT_1G_NOT_SUPPORTED(args):
    numargs = 0
    format  = "WARNING!!! External loopback at 1G is not supported\n"
    result = format % ()

    return result
    # end of function DBG_ID_LOOPBACK_EXTERNAL_LOOPBACK_AT_1G_NOT_SUPPORTED

def DBG_ID_LOOPBACK_EXTERNAL_LOOPBACK_ENABLED(args):
    numargs = 0
    format  = "External loopback status: enabled\n"
    result = format % ()

    return result
    # end of function DBG_ID_LOOPBACK_EXTERNAL_LOOPBACK_ENABLED

def DBG_ID_LOOPBACK_EXTERNAL_LOOPBACK_DISABLED(args):
    numargs = 0
    format  = "External loopback status: disabled\n"
    result = format % ()

    return result
    # end of function DBG_ID_LOOPBACK_EXTERNAL_LOOPBACK_DISABLED

def DBG_ID_LOOPBACK_STATE_TRANSITION(args):
    numargs = 2
    format  = "loopbackSmc state transition: %d -> %d\n"
    result = format % (args[0], args[1])

    return result
    # end of function DBG_ID_LOOPBACK_STATE_TRANSITION

def DBG_ID_MDIO_INJECT_SIZE(args):
    numargs = 2
    format  = "MDIO inject. Size: %04X, Aligned size: %04X\n"
    result = format % (args[0], args[1])

    return result
    # end of function DBG_ID_MDIO_INJECT_SIZE

def DBG_ID_MDIO_INJECT_HEAD_TAIL(args):
    numargs = 2
    format  = "MDIO inject. Head: %04X, Tail: %04X\n"
    result = format % (args[0], args[1])

    return result
    # end of function DBG_ID_MDIO_INJECT_HEAD_TAIL

def DBG_ID_MDIO_NO_FREE_SPACE(args):
    numargs = 0
    format  = "No free space\n"
    result = format % ()

    return result
    # end of function DBG_ID_MDIO_NO_FREE_SPACE

def DBG_ID_MDIO_BUFFER_NOT_EMPTY(args):
    numargs = 0
    format  = "Buffer not empty, only one packet in queue allowed\n"
    result = format % ()

    return result
    # end of function DBG_ID_MDIO_BUFFER_NOT_EMPTY

def DBG_ID_MDIO_BOUNDARY_CROSS(args):
    numargs = 2
    format  = "Boundary cross, new addr: %08X\n"
    result = format % (makeDword(args[0], args[1]))

    return result
    # end of function DBG_ID_MDIO_BOUNDARY_CROSS

def DBG_ID_MDIO_NEW_HEAD(args):
    numargs = 1
    format  = "New head: %04X\n"
    result = format % (args[0])

    return result
    # end of function DBG_ID_MDIO_NEW_HEAD

def DBG_ID_MDIO_NEW_PACKET_HEAD_TAIL(args):
    numargs = 2
    format  = "New packet. Head: %04X, Tail: %04X\n"
    result = format % (args[0], args[1])

    return result
    # end of function DBG_ID_MDIO_NEW_PACKET_HEAD_TAIL

def DBG_ID_MDIO_SET_ADDRESS(args):
    numargs = 2
    format  = "Set address %08X\n"
    result = format % (makeDword(args[0], args[1]))

    return result
    # end of function DBG_ID_MDIO_SET_ADDRESS

def DBG_ID_MDIO_PACKET_LENGTH(args):
    numargs = 2
    format  = "Packet len: %04X (invalid: %d)\n"
    result = format % (args[0], args[1])

    return result
    # end of function DBG_ID_MDIO_PACKET_LENGTH

def DBG_ID_MDIO_CORRUPTED_PACKET(args):
    numargs = 0
    format  = "CORRUPTED PACKET\n"
    result = format % ()

    return result
    # end of function DBG_ID_MDIO_CORRUPTED_PACKET

def DBG_ID_MDIO_NEW_TAIL(args):
    numargs = 1
    format  = "%d Done, new tail: %04X\n"
    result = format % (args[0])

    return result
    # end of function DBG_ID_MDIO_NEW_TAIL

def DBG_ID_MDIO_OVERFLOW(args):
    numargs = 0
    format  = "Overflow\n"
    result = format % ()

    return result
    # end of function DBG_ID_MDIO_OVERFLOW

def DBG_ID_MDIO_ADDRESS(args):
    numargs = 1
    format  = "PHY MDIO Address: %d\n"
    result = format % (args[0])

    return result
    # end of function DBG_ID_MDIO_ADDRESS

def DBG_ID_MDIO_PREAMBLE_ENABLED(args):
    numargs = 0
    format  = "MDIO Preamble is enabled\n"
    result = format % ()

    return result
    # end of function DBG_ID_MDIO_PREAMBLE_ENABLED

def DBG_ID_MDIO_PREAMBLE_DISABLED(args):
    numargs = 0
    format  = "MDIO Preamble is disabled\n"
    result = format % ()

    return result
    # end of function DBG_ID_MDIO_PREAMBLE_DISABLED

def DBG_ID_PHY_PM_REQUEST_WOL_MODE(args):
    numargs = 0
    format  = "Phy request WoL mode\n"
    result = format % ()

    return result
    # end of function DBG_ID_PHY_PM_REQUEST_WOL_MODE

def DBG_ID_PHY_PM_REQUEST_NORMAL_MODE(args):
    numargs = 0
    format  = "Phy request normal mode\n"
    result = format % ()

    return result
    # end of function DBG_ID_PHY_PM_REQUEST_NORMAL_MODE

def DBG_ID_PM_DRAM_SIZE(args):
    numargs = 2
    format  = "DT: dram_size: 0x%x bytes\n"
    result = format % (makeDword(args[0], args[1]))

    return result
    # end of function DBG_ID_PM_DRAM_SIZE

def DBG_ID_PM_IRAM_SIZE(args):
    numargs = 2
    format  = "DT: iram_size: 0x%x bytes\n"
    result = format % (makeDword(args[0], args[1]))

    return result
    # end of function DBG_ID_PM_IRAM_SIZE

def DBG_ID_PM_DRAM_VAL(args):
    numargs = 1
    format  = "DT: dram_val == 0x%x\n"
    result = format % (args[0])

    return result
    # end of function DBG_ID_PM_DRAM_VAL

def DBG_ID_PM_IRAM_VAL(args):
    numargs = 1
    format  = "DT: iram_val == 0x%x\n"
    result = format % (args[0])

    return result
    # end of function DBG_ID_PM_IRAM_VAL

def DBG_ID_PM_DRAM_IRAM_VAL(args):
    numargs = 1
    format  = "DT: (dram_val << 0x10) | iram_val == 0x%x\n"
    result = format % (args[0])

    return result
    # end of function DBG_ID_PM_DRAM_IRAM_VAL

def DBG_ID_PM_NORMAL_MODE_BY_HOST(args):
    numargs = 0
    format  = "PM normal mode by host\n"
    result = format % ()

    return result
    # end of function DBG_ID_PM_NORMAL_MODE_BY_HOST

def DBG_ID_PM_SLEEP_PROXY_BY_HOST(args):
    numargs = 0
    format  = "PM sleep proxy by host\n"
    result = format % ()

    return result
    # end of function DBG_ID_PM_SLEEP_PROXY_BY_HOST

def DBG_ID_PM_SLEEP_DEEP_BY_HOST(args):
    numargs = 0
    format  = "PM sleep deep by host\n"
    result = format % ()

    return result
    # end of function DBG_ID_PM_SLEEP_DEEP_BY_HOST

def DBG_ID_TEMPERATURE_HIGH_TEMP_WARNING(args):
    numargs = 0
    format  = "PHY High temperature warning\n"
    result = format % ()

    return result
    # end of function DBG_ID_TEMPERATURE_HIGH_TEMP_WARNING

def DBG_ID_TEMPERATURE_LOW_TEMP_WARNING(args):
    numargs = 0
    format  = "PHY Low temperature warning\n"
    result = format % ()

    return result
    # end of function DBG_ID_TEMPERATURE_LOW_TEMP_WARNING

def DBG_ID_EEE_DISABLE(args):
    numargs = 0
    format  = "EEE Disable\n"
    result = format % ()

    return result
    # end of function DBG_ID_EEE_DISABLE

def DBG_ID_EEE_ENABLE(args):
    numargs = 0
    format  = "EEE Enable\n"
    result = format % ()

    return result
    # end of function DBG_ID_EEE_ENABLE

def DBG_ID_EEE_RESET(args):
    numargs = 0
    format  = "EEE reset\n"
    result = format % ()

    return result
    # end of function DBG_ID_EEE_RESET

def DBG_ID_EEE_LINK_LOST(args):
    numargs = 0
    format  = "eee link has been active long enough, assume valid link lost\n"
    result = format % ()

    return result
    # end of function DBG_ID_EEE_LINK_LOST

def DBG_ID_EEE_LINK_DROP(args):
    numargs = 2
    format  = "eee assume link drop due to EEE issues, failures to disable: %d\n"
    result = format % (makeDword(args[0], args[1]))

    return result
    # end of function DBG_ID_EEE_LINK_DROP

def DBG_ID_EEE_OPERATION_FAILED(args):
    numargs = 1
    format  = "eee operation failed, disabling feature for SIf rate %d\n"
    result = format % (args[0])

    return result
    # end of function DBG_ID_EEE_OPERATION_FAILED

def DBG_ID_EEE_STATE_TRANSITION(args):
    numargs = 2
    format  = "eeeSmc state transition: %d -> %d\n"
    result = format % (args[0], args[1])

    return result
    # end of function DBG_ID_EEE_STATE_TRANSITION

def DBG_ID_EEE_CONFIG(args):
    numargs = 8
    format  = "eee configure, linkDownTimeout: %d, linkUpTimeout: %d, maxLinkDrops: %d, ratesMask: 0x%04X\n"
    result = format % (makeDword(args[0], args[1]), makeDword(args[2], args[3]), makeDword(args[4], args[5]), makeDword(args[6], args[7]))

    return result
    # end of function DBG_ID_EEE_CONFIG

def DBG_ID_EFUSE_OVERRIDE_FAILURE(args):
    numargs = 0
    format  = "eFUSE override failure\n"
    result = format % ()

    return result
    # end of function DBG_ID_EFUSE_OVERRIDE_FAILURE

def DBG_ID_PCIE_DISABLE_LANE(args):
    numargs = 1
    format  = "PCIe: Disable lane %d\n"
    result = format % (args[0])

    return result
    # end of function DBG_ID_PCIE_DISABLE_LANE

def DBG_ID_PCIE_L2_ENTER(args):
    numargs = 2
    format  = "PCIe: L2 Enter, %x\n"
    result = format % (makeDword(args[0], args[1]))

    return result
    # end of function DBG_ID_PCIE_L2_ENTER

def DBG_ID_PCIE_L2_EXIT(args):
    numargs = 0
    format  = "PCIe: L2 Exit\n"
    result = format % ()

    return result
    # end of function DBG_ID_PCIE_L2_EXIT

def DBG_ID_PCIE_WAKEUP_DONE(args):
    numargs = 0
    format  = "PCIe: Wakeup done\n"
    result = format % ()

    return result
    # end of function DBG_ID_PCIE_WAKEUP_DONE

def DBG_ID_PCIE_WAKEUP_TIMEOUT(args):
    numargs = 0
    format  = "PCIe: Wakeup timeout\n"
    result = format % ()

    return result
    # end of function DBG_ID_PCIE_WAKEUP_TIMEOUT

def DBG_ID_PCIE_PERST_LOW_1(args):
    numargs = 0
    format  = "PCIe: PERST LOW, D3coldExit Active\n"
    result = format % ()

    return result
    # end of function DBG_ID_PCIE_PERST_LOW_1

def DBG_ID_PCIE_PERST_LOW_2(args):
    numargs = 0
    format  = "PCIe: PERST LOW\n"
    result = format % ()

    return result
    # end of function DBG_ID_PCIE_PERST_LOW_2

def DBG_ID_PCIE_PERST_HIGH(args):
    numargs = 0
    format  = "PCIe: PERST is high\n"
    result = format % ()

    return result
    # end of function DBG_ID_PCIE_PERST_HIGH

def DBG_ID_PCIE_WAKEUP_REASON(args):
    numargs = 1
    format  = "PCIe wakeup reason: %d\n"
    result = format % (args[0])

    return result
    # end of function DBG_ID_PCIE_WAKEUP_REASON

def DBG_ID_MDNS_OUT_PACKET_ALLOCATION_FAILS(args):
    numargs = 0
    format  = "MDNS out packet allocation fails\n"
    result = format % ()

    return result
    # end of function DBG_ID_MDNS_OUT_PACKET_ALLOCATION_FAILS

def DBG_ID_MDNS_RR_EMPTY_ARGS(args):
    numargs = 4
    format  = "MDNS RR empty args : rrCount %d rrBufSize %d\n"
    result = format % (makeDword(args[0], args[1]), makeDword(args[2], args[3]))

    return result
    # end of function DBG_ID_MDNS_RR_EMPTY_ARGS

def DBG_ID_MDNS_RR_BUF_TOO_BIG(args):
    numargs = 4
    format  = "MDNS RR buf is too big : rrCount %d rrBufSize %d\n"
    result = format % (makeDword(args[0], args[1]), makeDword(args[2], args[3]))

    return result
    # end of function DBG_ID_MDNS_RR_BUF_TOO_BIG

def DBG_ID_MDNS_RR_ADDED(args):
    numargs = 2
    format  = "MDNS %d RRs added\n"
    result = format % (makeDword(args[0], args[1]))

    return result
    # end of function DBG_ID_MDNS_RR_ADDED

def DBG_ID_MDNS_RR_PTR(args):
    numargs = 4
    format  = "MDNS RR %d PTR(%d) :\n"
    result = format % (makeDword(args[0], args[1]), makeDword(args[2], args[3]))

    return result
    # end of function DBG_ID_MDNS_RR_PTR

def DBG_ID_MDNS_RR_TXT(args):
    numargs = 4
    format  = "MDNS RR %d TXT(%d) :\n"
    result = format % (makeDword(args[0], args[1]), makeDword(args[2], args[3]))

    return result
    # end of function DBG_ID_MDNS_RR_TXT

def DBG_ID_MDNS_RR_SRV(args):
    numargs = 4
    format  = "MDNS RR %d SRV(%d) :\n"
    result = format % (makeDword(args[0], args[1]), makeDword(args[2], args[3]))

    return result
    # end of function DBG_ID_MDNS_RR_SRV

def DBG_ID_MDNS_RR_TYPE_UNKNOWN(args):
    numargs = 4
    format  = "MDNS: RR %d type unknown %d\n"
    result = format % (makeDword(args[0], args[1]), makeDword(args[2], args[3]))

    return result
    # end of function DBG_ID_MDNS_RR_TYPE_UNKNOWN

def DBG_ID_MDNS_RR_CLASS(args):
    numargs = 1
    format  = "- class %d\n"
    result = format % (args[0])

    return result
    # end of function DBG_ID_MDNS_RR_CLASS

def DBG_ID_MDNS_RR_TTL(args):
    numargs = 2
    format  = "- ttl %d\n"
    result = format % (makeDword(args[0], args[1]))

    return result
    # end of function DBG_ID_MDNS_RR_TTL

def DBG_ID_MDNS_RR_PRIORITY(args):
    numargs = 2
    format  = "- priority %d\n"
    result = format % (makeDword(args[0], args[1]))

    return result
    # end of function DBG_ID_MDNS_RR_PRIORITY

def DBG_ID_MDNS_RR_WEIGHT(args):
    numargs = 2
    format  = "- weight %d\n"
    result = format % (makeDword(args[0], args[1]))

    return result
    # end of function DBG_ID_MDNS_RR_WEIGHT

def DBG_ID_MDNS_RR_PORT(args):
    numargs = 2
    format  = "- port %d\n"
    result = format % (makeDword(args[0], args[1]))

    return result
    # end of function DBG_ID_MDNS_RR_PORT

def DBG_ID_MDNS_DOMAIN_NAME(args):
    numargs = 0
    format  = "MDNS domain name : "
    result = format % ()

    return result
    # end of function DBG_ID_MDNS_DOMAIN_NAME

def DBG_ID_CAPS_RATES(args):
    numargs = 2
    format  = "Capabilities: Rates - 0x%08X\n"
    result = format % (makeDword(args[0], args[1]))

    return result
    # end of function DBG_ID_CAPS_RATES

def DBG_ID_CAPS_EEE_RATES(args):
    numargs = 2
    format  = "Capabilities: EEE Rates - 0x%08X\n"
    result = format % (makeDword(args[0], args[1]))

    return result
    # end of function DBG_ID_CAPS_EEE_RATES

def DBG_ID_CAPS_PAUSE(args):
    numargs = 2
    format  = "Capabilities: Pause - 0x%08X\n"
    result = format % (makeDword(args[0], args[1]))

    return result
    # end of function DBG_ID_CAPS_PAUSE

def DBG_ID_CAPS_ASYMMETRIC_PAUSE(args):
    numargs = 2
    format  = "Capabilities: Asymmetric pause - 0x%08X\n"
    result = format % (makeDword(args[0], args[1]))

    return result
    # end of function DBG_ID_CAPS_ASYMMETRIC_PAUSE

def DBG_ID_CAPS_MAX_RATE(args):
    numargs = 0
    format  = "Capabilities: Max rate - "
    result = format % ()

    return result
    # end of function DBG_ID_CAPS_MAX_RATE

def DBG_ID_HOST_WOL_CONFIG(args):
    numargs = 0
    format  = "HOST WoL config\n"
    result = format % ()

    return result
    # end of function DBG_ID_HOST_WOL_CONFIG

def DBG_ID_HOST_WOL_ENABLE_WITH_LINK_ON_COPPER(args):
    numargs = 0
    format  = "HOST Wake On Link enable with link on copper\n"
    result = format % ()

    return result
    # end of function DBG_ID_HOST_WOL_ENABLE_WITH_LINK_ON_COPPER

def DBG_ID_HOST_WOL_ENABLE_WITHOUT_LINK_ON_COPPER(args):
    numargs = 0
    format  = "HOST Wake On Link enable without actual link on copper\n"
    result = format % ()

    return result
    # end of function DBG_ID_HOST_WOL_ENABLE_WITHOUT_LINK_ON_COPPER

def DBG_ID_HOST_ENABLE_PHY_LOGS(args):
    numargs = 0
    format  = "HOST Enable PHY logs\n"
    result = format % ()

    return result
    # end of function DBG_ID_HOST_ENABLE_PHY_LOGS

def DBG_ID_HOST_DISABLE_PHY_LOGS(args):
    numargs = 0
    format  = "HOST Disable PHY logs\n"
    result = format % ()

    return result
    # end of function DBG_ID_HOST_DISABLE_PHY_LOGS

def DBG_ID_HOST_ENABLE_THERMAL_SHUTDOWN(args):
    numargs = 6
    format  = "Enable thermal shutdown, cold: %d, warm: %d, hot: %d\n"
    result = format % (makeDword(args[0], args[1]), makeDword(args[2], args[3]), makeDword(args[4], args[5]))

    return result
    # end of function DBG_ID_HOST_ENABLE_THERMAL_SHUTDOWN

def DBG_ID_HOST_DISABLE_THERMAL_SHUTDOWN(args):
    numargs = 0
    format  = "Disable thermal shutdown\n"
    result = format % ()

    return result
    # end of function DBG_ID_HOST_DISABLE_THERMAL_SHUTDOWN

def DBG_ID_HOST_LINK_DROP_TRANSACTION_COMPLETE(args):
    numargs = 0
    format  = "Link drop transaction complete\n"
    result = format % ()

    return result
    # end of function DBG_ID_HOST_LINK_DROP_TRANSACTION_COMPLETE

def DBG_ID_HOST_WAKE_ON_LINK(args):
    numargs = 0
    format  = "HOST Wake On Link\n"
    result = format % ()

    return result
    # end of function DBG_ID_HOST_WAKE_ON_LINK

def DBG_ID_HOST_REPORT_LINK_UP_100M(args):
    numargs = 0
    format  = "HOST report link up at 100M\n"
    result = format % ()

    return result
    # end of function DBG_ID_HOST_REPORT_LINK_UP_100M

def DBG_ID_HOST_REPORT_LINK_UP_1G(args):
    numargs = 0
    format  = "HOST report link up at 1G\n"
    result = format % ()

    return result
    # end of function DBG_ID_HOST_REPORT_LINK_UP_1G

def DBG_ID_HOST_REPORT_LINK_UP_2G5(args):
    numargs = 0
    format  = "HOST report link up at 2.5G\n"
    result = format % ()

    return result
    # end of function DBG_ID_HOST_REPORT_LINK_UP_2G5

def DBG_ID_HOST_REPORT_LINK_UP_5G(args):
    numargs = 0
    format  = "HOST report link up at 5G\n"
    result = format % ()

    return result
    # end of function DBG_ID_HOST_REPORT_LINK_UP_5G

def DBG_ID_HOST_REPORT_LINK_UP_10G(args):
    numargs = 0
    format  = "HOST report link up at 10G\n"
    result = format % ()

    return result
    # end of function DBG_ID_HOST_REPORT_LINK_UP_10G

def DBG_ID_HOST_REPORT_LINK_LOST(args):
    numargs = 0
    format  = "HOST report link lost\n"
    result = format % ()

    return result
    # end of function DBG_ID_HOST_REPORT_LINK_LOST

def DBG_ID_MAIN_FW_VERSION(args):
    numargs = 3
    format  = "Aquantia Jamaica F/W version: %d.%d.%d\n"
    result = format % (args[0], args[1], args[2])

    return result
    # end of function DBG_ID_MAIN_FW_VERSION

def DBG_ID_MAIN_MAC(args):
    numargs = 3
    format  = "MAC: %02X-%02X-%02X-%02X-%02X-%02X\n"
    result = format % (getLowerByteFromShort(args[0]), getUpperByteFromShort(args[0]), getLowerByteFromShort(args[1]), getUpperByteFromShort(args[1]), getLowerByteFromShort(args[2]), getUpperByteFromShort(args[2]))

    return result
    # end of function DBG_ID_MAIN_MAC

def DBG_ID_MAIN_FLASH_MODE(args):
    numargs = 1
    format  = "MODE: %s\n"
    result = format % (shortToFlashModeStr(args[0]))

    return result
    # end of function DBG_ID_MAIN_FLASH_MODE

def DBG_ID_MAIN_PHY_LOAD_FAILED(args):
    numargs = 0
    format  = "PHY Load failed\n"
    result = format % ()

    return result
    # end of function DBG_ID_MAIN_PHY_LOAD_FAILED

def DBG_ID_MAIN_GLOBAL_SOFTWARE_RESET(args):
    numargs = 0
    format  = "GLOBAL SOFTWARE RESET\n"
    result = format % ()

    return result
    # end of function DBG_ID_MAIN_GLOBAL_SOFTWARE_RESET

def DBG_ID_WOL_ENABLE_WAKE_TIMER_WITH_TIMEOUT(args):
    numargs = 2
    format  = "WoL Enable wake timer with timeout = %d\n"
    result = format % (makeDword(args[0], args[1]))

    return result
    # end of function DBG_ID_WOL_ENABLE_WAKE_TIMER_WITH_TIMEOUT

def DBG_ID_WOL_DISABLE_WAKE_TIMER(args):
    numargs = 0
    format  = "WoL Disable wake timer\n"
    result = format % ()

    return result
    # end of function DBG_ID_WOL_DISABLE_WAKE_TIMER

def DBG_ID_WOL_LINK_UP_TIMER(args):
    numargs = 0
    format  = "WoL Link up timer\n"
    result = format % ()

    return result
    # end of function DBG_ID_WOL_LINK_UP_TIMER

def DBG_ID_WOL_LINK_DOWN_TIMER(args):
    numargs = 0
    format  = "WoL Link down timer\n"
    result = format % ()

    return result
    # end of function DBG_ID_WOL_LINK_DOWN_TIMER

def DBG_ID_WOL_ENABLE_LINK_UP_WITH_TIMEOUT(args):
    numargs = 2
    format  = "WoL Enable link up with timeout %dms\n"
    result = format % (makeDword(args[0], args[1]))

    return result
    # end of function DBG_ID_WOL_ENABLE_LINK_UP_WITH_TIMEOUT

def DBG_ID_WOL_ENABLE_LINK_DOWN_WITH_TIMEOUT(args):
    numargs = 2
    format  = "WoL Enable link down with timeout %dms\n"
    result = format % (makeDword(args[0], args[1]))

    return result
    # end of function DBG_ID_WOL_ENABLE_LINK_DOWN_WITH_TIMEOUT

def DBG_ID_WOL_DISABLE_LINK_UP(args):
    numargs = 0
    format  = "WoL Disable link up\n"
    result = format % ()

    return result
    # end of function DBG_ID_WOL_DISABLE_LINK_UP

def DBG_ID_WOL_DISABLE_LINK_DOWN(args):
    numargs = 0
    format  = "WoL Disable link down\n"
    result = format % ()

    return result
    # end of function DBG_ID_WOL_DISABLE_LINK_DOWN

def DBG_ID_WOL_LINK_LATCH(args):
    numargs = 0
    format  = "WoL Link latch\n"
    result = format % ()

    return result
    # end of function DBG_ID_WOL_LINK_LATCH

def DBG_ID_WOL_WAKE_TIMER_EXPIRED(args):
    numargs = 0
    format  = "WoL wake timer expired\n"
    result = format % ()

    return result
    # end of function DBG_ID_WOL_WAKE_TIMER_EXPIRED

def DBG_ID_WOL_START_WAKE_TIMER_COUNTER(args):
    numargs = 0
    format  = "WoL Start wake timer counter\n"
    result = format % ()

    return result
    # end of function DBG_ID_WOL_START_WAKE_TIMER_COUNTER

def DBG_ID_MPI_RATE_STATE_ANEG_DISABLE(args):
    numargs = 3
    format  = "SYS_RATE_ADAPT_ANEG_STATE_DISABLE: MAC %04X: %x\n"
    result = format % (args[0], makeDword(args[1], args[2]))

    return result
    # end of function DBG_ID_MPI_RATE_STATE_ANEG_DISABLE

def DBG_ID_MPI_USX_AUTONEG_TIMEOUT(args):
    numargs = 3
    format  = "USX autoneg timeout: MAC %04X: %x\n"
    result = format % (args[0], makeDword(args[1], args[2]))

    return result
    # end of function DBG_ID_MPI_USX_AUTONEG_TIMEOUT

def DBG_ID_MPI_RATE_ADAPT_ANEG_MAC(args):
    numargs = 3
    format  = "mpiRateAdaptAneg: MAC %04X: %x\n"
    result = format % (args[0], makeDword(args[1], args[2]))

    return result
    # end of function DBG_ID_MPI_RATE_ADAPT_ANEG_MAC

def DBG_ID_MPI_RATE_ADAPT_ANEG_STATE_TRANSITION(args):
    numargs = 4
    format  = "mpiRateAdaptAneg state transition: %d -> %d\n"
    result = format % (makeDword(args[0], args[1]), makeDword(args[2], args[3]))

    return result
    # end of function DBG_ID_MPI_RATE_ADAPT_ANEG_STATE_TRANSITION

def DBG_ID_MPI_USX_AUTONEG_RESTARTED_WITH_CODE(args):
    numargs = 2
    format  = "USX autoneg restarted with rate code %d\n"
    result = format % (makeDword(args[0], args[1]))

    return result
    # end of function DBG_ID_MPI_USX_AUTONEG_RESTARTED_WITH_CODE

def DBG_ID_MPI_BEFORE_USXAUTONEGENABLE(args):
    numargs = 3
    format  = "before usxAutoNegEnable: MAC %04X: %x\n"
    result = format % (args[0], makeDword(args[1], args[2]))

    return result
    # end of function DBG_ID_MPI_BEFORE_USXAUTONEGENABLE

def DBG_ID_MPI_SERDES_SM_ESD_MON_PHY_TXUP(args):
    numargs = 0
    format  = "eSD_MON_PHY_TXUP\n"
    result = format % ()

    return result
    # end of function DBG_ID_MPI_SERDES_SM_ESD_MON_PHY_TXUP

def DBG_ID_MPI_SERDES_SM_MAC_REG(args):
    numargs = 3
    format  = "\t\t MAC %04X: %x\n"
    result = format % (args[0], makeDword(args[1], args[2]))

    return result
    # end of function DBG_ID_MPI_SERDES_SM_MAC_REG

def DBG_ID_MPI_SERDES_SM_ESD_MON_PHY_TXUP_TIMEOUT(args):
    numargs = 0
    format  = "eSD_MON_PHY_TXUP timeout\n"
    result = format % ()

    return result
    # end of function DBG_ID_MPI_SERDES_SM_ESD_MON_PHY_TXUP_TIMEOUT

def DBG_ID_MPI_SERDES_SM_EYE_DIAG(args):
    numargs = 5
    format  = "Serdes Eye - %d:\n  0:0x%04X, 1:0x%04X, 2:0x%04X, 3:0x%04X\n"
    result = format % (args[0], args[1], args[2], args[3], args[4])

    return result
    # end of function DBG_ID_MPI_SERDES_SM_EYE_DIAG

def DBG_ID_MPI_SERDES_SM_HW_INIT_MAC_REG(args):
    numargs = 3
    format  = "SYS_HW_INITIALIZATION: MAC %04X: %x\n"
    result = format % (args[0], makeDword(args[1], args[2]))

    return result
    # end of function DBG_ID_MPI_SERDES_SM_HW_INIT_MAC_REG

def DBG_ID_MPI_SERDES_SM_PAUSE_RX_ENABLE(args):
    numargs = 0
    format  = "Pause RX enable\n"
    result = format % ()

    return result
    # end of function DBG_ID_MPI_SERDES_SM_PAUSE_RX_ENABLE

def DBG_ID_MPI_SERDES_SM_PAUSE_RX_DISABLE(args):
    numargs = 0
    format  = "Pause RX disable\n"
    result = format % ()

    return result
    # end of function DBG_ID_MPI_SERDES_SM_PAUSE_RX_DISABLE

def DBG_ID_MPI_SERDES_SM_STATE_TRANSITION(args):
    numargs = 2
    format  = "mpiSmc state transition: %d -> %d\n"
    result = format % (args[0], args[1])

    return result
    # end of function DBG_ID_MPI_SERDES_SM_STATE_TRANSITION

def DBG_ID_MPI_SERDES_WR_TOUT(args):
    numargs = 2
    format  = "MPI Indirect write timeout: addr=0x%08X data=0x%08X\n"
    result = format % (args[0], args[1])

    return result
    # end of function DBG_ID_MPI_SERDES_WR_TOUT

def DBG_ID_MPI_SERDES_RD_TOUT(args):
    numargs = 1
    format  = "MPI Indirect read timeout: addr=0x%08X\n"
    result = format % (args[0])

    return result
    # end of function DBG_ID_MPI_SERDES_RD_TOUT

def DBG_ID_ERRNO_1(args):
    numargs = 0
    format  = "ERROR("
    result = format % ()

    return result
    # end of function DBG_ID_ERRNO_1

def DBG_ID_ERRNO_2(args):
    numargs = 0
    format  = "): "
    result = format % ()

    return result
    # end of function DBG_ID_ERRNO_2

def DBG_ID_AVB_CFG(args):
    numargs = 4
    format  = "AVB cfg. Flush %d, new en %d, new link %d\n"
    result = format % (makeDword(args[0], args[1]), args[2], args[3])

    return result
    # end of function DBG_ID_AVB_CFG

def DBG_ID_PTP_AVB_ENABLE(args):
    numargs = 1
    format  = "PTP_AVB Enable. Link %d\n"
    result = format % (args[0])

    return result
    # end of function DBG_ID_PTP_AVB_ENABLE

def DBG_ID_PTP_AVB_DISABLE(args):
    numargs = 1
    format  = "PTP_AVB Disable. Link %d\n"
    result = format % (args[0])

    return result
    # end of function DBG_ID_PTP_AVB_DISABLE

def DBG_ID_PTP_AVB_RECONFIGURE(args):
    numargs = 0
    format  = "PTP_AVB Reconfigure\n"
    result = format % ()

    return result
    # end of function DBG_ID_PTP_AVB_RECONFIGURE

def DBG_ID_PTP_AVB_STOP(args):
    numargs = 0
    format  = "PTP_AVB Stop\n"
    result = format % ()

    return result
    # end of function DBG_ID_PTP_AVB_STOP

def DBG_ID_PTP_AVB_APPLY(args):
    numargs = 1
    format  = "PTP_AVB Apply. Link %d\n"
    result = format % (args[0])

    return result
    # end of function DBG_ID_PTP_AVB_APPLY

def DBG_ID_TRACE1(args):
    numargs = 2
    format  = "DEBUG TRACE1: %d\n"
    result = format % (makeDword(args[0], args[1]))

    return result
    # end of function DBG_ID_TRACE1

def DBG_ID_TRACE2(args):
    numargs = 4
    format  = "DEBUG TRACE2: %d  %d\n"
    result = format % (makeDword(args[0], args[1]), makeDword(args[2], args[3]))

    return result
    # end of function DBG_ID_TRACE2

def DBG_ID_TRACE3(args):
    numargs = 6
    format  = "DEBUG TRACE3: %d  %d  %d\n"
    result = format % (makeDword(args[0], args[1]), makeDword(args[2], args[3]), makeDword(args[4], args[5]))

    return result
    # end of function DBG_ID_TRACE3

def DBG_ID_TRACE4(args):
    numargs = 8
    format  = "DEBUG TRACE4: %d  %d  %d  %d\n"
    result = format % (makeDword(args[0], args[1]), makeDword(args[2], args[3]), makeDword(args[4], args[5]), makeDword(args[6], args[7]))

    return result
    # end of function DBG_ID_TRACE4

def DBG_ID_TRACE5(args):
    numargs = 10
    format  = "DEBUG TRACE5: %d  %d  %d  %d  %d\n"
    result = format % (makeDword(args[0], args[1]), makeDword(args[2], args[3]), makeDword(args[4], args[5]), makeDword(args[6], args[7]), makeDword(args[8], args[9]))

    return result
    # end of function DBG_ID_TRACE5



def DBG_ID_PRINTF(arg):
    result = list2str(arg[0:])
    return result

def DBG_ID_PHY_DBG_BUF_PART(arg):
    print ">>> DBG_ID_PHY_DBG_BUF_PART: {}, {}".format(
        ["0x{:04x}".format(a) for a in arg],
        None,
        # phy_dbg_trace.printTrace(None, arg)
    )
    return ">>> DBG_ID_PHY_DBG_BUF_PART\n"

def DBG_ID_STRING(arg):
    if(arg[0] > 0):
        result = list2str(arg[1:]) + "\n"
    else:
        result = list2str(arg[1:])
    return result


msgIds = [
    (0, 'DBG_ID_PRINTF', DBG_ID_PRINTF),
    (0, 'DBG_ID_STRING', DBG_ID_STRING),
    (0, 'DBG_ID_PHY_DBG_BUF_PART', DBG_ID_PHY_DBG_BUF_PART),
    (4, 'DBG_ID_USX', "%s\n"),
    (2, 'DBG_ID_PROV_CHANGE', "%s\n"),
    (0, 'DBG_ID_ETH_WITHOUT_IPV4', "DRV EthConfig without ipv4\n"),
    (4, 'DBG_ID_ETH_PRINT_CONFIG', "DRV EthConfig, ipv4: %d.%d.%d.%d, mask: %d.%d.%d.%d\n"),
    (4, 'DBG_ID_ETH_ADD_IPV4', "DRV Add IPv4 address, ipv4: %d.%d.%d.%d, mask: %d.%d.%d.%d\n"),
    (8, 'DBG_ID_ETH_ADD_IPV6', "DRV Add IPv6 address, ipv6: %08X:%08X:%08X:%08X\n"),
    (1, 'DBG_ID_ETH_NETIF_NO_PBUFS', "netif %d Could not allocate pbufs\n"),
    (3, 'DBG_ID_ETH_NETIF_NOT_ALIGNED_BUFFER', "netif %d Allocated not aligned buffer %08X\n"),
    (1, 'DBG_ID_ETH_EXTRACT_FAILED', "ETH%d extract failed\n"),
    (0, 'DBG_ID_ETH_RECEIVE_BIG_PACKET', "Received big packet. Update MDIO timeout\n"),
    (0, 'DBG_ID_ETH_RECEIVE_TRUNCATED_PACKET_1', "MDIO truncated packet received. Enable serdes\n"),
    (0, 'DBG_ID_ETH_RECEIVE_TRUNCATED_PACKET_2', "MDIO truncated packet received. Ignore\n"),
    (1, 'DBG_ID_ETH_ENDIS_MDIO_DATAPATH', "%s MDIO Datapath\n"),
    (0, 'DBG_ID_ETH_MDNS_WAKEUP', "ETH MDNS wakeup\n"),
    (0, 'DBG_ID_ETH_UP', "ETH up\n"),
    (0, 'DBG_ID_ETH_DOWN', "ETH down\n"),
    (0, 'DBG_ID_ETH_RESTART', "ETH restart\n"),
    (0, 'DBG_ID_ETH_SEND_BIG_PACKET', "ETH Sending big packet. Update MDIO timeout\n"),
    (1, 'DBG_ID_ETH_INJECT_FAILED', "ETH%d Inject failed\n"),
    (1, 'DBG_ID_ETH_NETIF_SUBINIT', "ETH netif%d sub init\n"),
    (0, 'DBG_ID_ETH_CONFIG', "ETH Config\n"),
    (1, 'DBG_ID_ETH_ERROR_NETIF_ADD_1', "ETH Error adding netif, no more slots. Used slots count: %d\n"),
    (0, 'DBG_ID_ETH_ERROR_NETIF_ADD_2', "ETH Error adding netif\n"),
    (0, 'DBG_ID_ETH_INIT', "ETH init\n"),
    (0, 'DBG_ID_ETH_CLEAN_UP', "ETH clean up\n"),
    (3, 'DBG_ID_ETH_ENABLE_MAGIC_PACKET_DETECTION', "ETH Enable magic packet detection: %02X-%02X-%02X-%02X-%02X-%02X\n"),
    (0, 'DBG_ID_ETH_DISABLE_MAGIC_PACKET_DETECTION', "ETH Disable magic packet detection\n"),
    (0, 'DBG_ID_ETH_ACTIVATE_WOL_HOOK', "ETH Activate WoL Hook\n"),
    (0, 'DBG_ID_ETH_DEACTIVATE_WOL_HOOK', "ETH Deactivate WoL Hook\n"),
    (0, 'DBG_ID_ETH_ACTIVATE_WOL_PATTERN', "ETH Activate WoL pattern #%d, crc: 0x%04X\n"),
    (1, 'DBG_ID_ETH_DEACTIVATE_WOL_PATTERN', "ETH Deactivate WoL pattern #%d\n"),
    (2, 'DBG_ID_ETH_ENABLE_SERDES', "ETH Enable serdes for %dmS\n"),
    (1, 'DBG_ID_NUMBERED_ETH_UP', "ETH%d up\n"),
    (1, 'DBG_ID_NUMBERED_ETH_DOWN', "ETH%d down\n"),
    (1, 'DBG_ID_NUMBERED_ETH_REMOVED', "ETH%d Removed\n"),
    (0, 'DBG_ID_ETH_CANNOT_ADD_IPV6_ADDR1', "ETH could not add IPv6 link local address due to no net IF configured\n"),
    (0, 'DBG_ID_ETH_CANNOT_ADD_IPV6_ADDR2', "ETH could not add IPv6 address due to no net IF configured\n"),
    (1, 'DBG_ID_ETH_CANNOT_ADD_IPV6_ADDR3', "ETH could not add IPv6 address with error %d\n"),
    (0, 'DBG_ID_TCPKA_WAKE_ACK_RESEND_COUNT', "TCPKA wake due to ack resend count\n"),
    (0, 'DBG_ID_TCPKA_WAKE_PROB_PACKET', "TCPKA wake due to not prob packet\n"),
    (0, 'DBG_ID_TCPKA_NO_SLOT_FOR_IPV6', "tcpka - no tcpka slot for IPv6\n"),
    (18, 'DBG_ID_TCPKA_ADD_IPV6_LOG1', "tcpka add IPv6. Local: %08X:%08X:%08X:%08X : %d. Remote: %08X:%08X:%08X:%08X : %d\n"),
    (11, 'DBG_ID_TCPKA_ADD_IPV6_LOG2', "tcpka add IPv6. i %d s, rc %d, ri %d ms, sn %d, an %d, ws %d\n"),
    (0, 'DBG_ID_TCPKA_NO_SLOT_FOR_IPV4', "tcpka - no tcpka slot for IPv4\n"),
    (17, 'DBG_ID_TCPKA_ADD_IPV4', "tcpka add IPv4 - %08X : %d, %08X : %d, i %d s, rc %d, ri %d ms, sn %d, an %d, ws %d\n"),
    (0, 'DBG_ID_WAKE_WAKE_ON_PING_ICMP_TYPE_128', "wake on ping (ICMP6 type - 128)\n"),
    (0, 'DBG_ID_WAKE_WAKE_ON_PING_ICMP_TYPE_8', "wake on ping (ICMP6 type - 8)\n"),
    (0, 'DBG_ID_WAKE_WAKE_ON_TCP_SYN', "wake on TCP SYN\n"),
    (0, 'DBG_ID_WAKE_WAKE_ON_UDP', "%d wake on UDP\n"),
    (0, 'DBG_ID_WAKE_WAKE_ON_IPV6_ADDRESS_GUARD', "wake on IPv6 address guard\n"),
    (2, 'DBG_ID_WAKE_WAKE_ON_IPV4_ADDRESS_GUARD', "wake on IPv4 address guard, ip: %d.%d.%d.%d\n"),
    (0, 'DBG_ID_WAKE_NO_SLOT_FOR_IPV6', "wake - no wake slot for IPv6\n"),
    (10, 'DBG_ID_WAKE_ADD_IPV6', "wake add IPv6 - %08X:%08X:%08X:%08X : %d %d\n"),
    (0, 'DBG_ID_WAKE_NO_SLOT_FOR_IPV4', "wake - no wake slot for IPv4\n"),
    (4, 'DBG_ID_WAKE_ADD_IPV4', "wake add IPv4 - %08X : %d %d\n"),
    (0, 'DBG_ID_WAKE_NO_SLOT_FOR_IPV4_GUARD', "wake - no wake slot for IPv4 guard\n"),
    (2, 'DBG_ID_WAKE_ADD_IPV4_GUARD', "wake add IPv4 address guard, addr: %d.%d.%d.%d\n"),
    (0, 'DBG_ID_WAKE_NO_SLOT_FOR_IPV6_GUARD', "wake - no wake slot for IPv6 guard\n"),
    (8, 'DBG_ID_WAKE_ADD_IPV6_GUARD', "wake add IPv6 address guard, addr: %08X:%08X:%08X:%08X\n"),
    (0, 'DBG_ID_WOL_MAGIC_PACKET_DETECTED', "ETH WoL Magic packet detected\n"),
    (0, 'DBG_ID_WOL_FILTER_PACKET_DETECTED', "ETH WoL Filter packet detected\n"),
    (0, 'DBG_ID_PHY_ADVERTISE_LOW_POWER', "phyAdvertise: Low Power\n"),
    (3, 'DBG_ID_PHY_ADVERTISE_RATES_MASK', "phyAdvertise: %02X %d\n"),
    (0, 'DBG_ID_PHY_RESTART_ANEG', "PHY restart aneg\n"),
    (4, 'DBG_ID_CABLE_DIAG_PAIR', "Cable diag. Pair: %d, status: %d, dist: %d, value: %d\n"),
    (0, 'DBG_ID_CABLE_DIAG_START', "Cable diag start\n"),
    (0, 'DBG_ID_CABLE_DIAG_DONE', "Cable diag done\n"),
    (4, 'DBG_ID_FLASH_LOAD', "Flash load, addr: 0x%08X, size: 0x%08X\n"),
    (0, 'DBG_ID_PHY_HASH_VALIDATION_FAILED', "PHY Hash validation failed\n"),
    (0, 'DBG_ID_PHY_HASH_VALIDATION_PASSED', "PHY Hash validated\n"),
    (0, 'DBG_ID_PHY_HASH_VALIDATION_SKIPPED', "PHY Hash validation skipped\n"),
    (2, 'DBG_ID_PHY_READ_FROM_FLASH_REPORT', "PHY read from flash report: calculated Crc16: 0x%04X, expected Crc16: 0x%04X\n"),
    (2, 'DBG_ID_PHY_MDIO_WRITE_REPORT', "PHY mdio write report: calculated Crc16: 0x%04X, expected Crc16: 0x%04X\n"),
    (0, 'DBG_ID_PHY_LOAD_ERROR_MDIO_CRC16', "PHY loading error. MDIO Crc16 validation failed\n"),
    (0, 'DBG_ID_PHY_LOAD_ERROR_FLASH_CRC16', "PHY loading error. Flash Crc16 validation failed\n"),
    (2, 'DBG_ID_PHY_EUROPA_LOAD_FROM_MDIO_MAX_ATTEMPTS', "%d Europa load from mdio, max attempts: %u\n"),
    (0, 'DBG_ID_PHY_EUROPA_MDIO_LOAD_DONE', "Europa mdio load done\n"),
    (0, 'DBG_ID_PHY_EUROPA_READY', "Europa ready\n"),
    (0, 'DBG_ID_PHY_EUROPA_FW_DIDNT_START', "Europa FW didn't start\n"),
    (0, 'DBG_ID_PHY_EUROPA_MDIO_LOAD_FAILED', "Europa mdio load failed\n"),
    (0, 'DBG_ID_PHY_EUROPA_LOAD_FROM_DAISY_CHAIN', "Europa load from daisy chain\n"),
    (0, 'DBG_ID_PHY_EUROPA_DAISY_CHAIN_DONE', "Daisy chain done\n"),
    (0, 'DBG_ID_PHY_EUROPA_DAISY_CHAIN_TIMEOUT', "Europa daisy chain timeout\n"),
    (0, 'DBG_ID_PHY_EUROPA_NOT_READY', "Europa not ready\n"),
    (0, 'DBG_ID_PHY_EUROPA_LOAD_FROM_HOST', "Europa load from host\n"),
    (0, 'DBG_ID_PHY_EUROPA_LOAD_FROM_HOST_DONE', "Europa load from host done\n"),
    (0, 'DBG_ID_PHY_EUROPA_MCP_RUN_FAILED', "Europa mcp run failed\n"),
    (2, 'DBG_ID_PHY_EUROPA_LOAD_FROM_HOST_FAILED', "Europa load from host failed, err: %d\n"),
    (0, 'DBG_ID_EUROPA_POLL_PHY_MAGIC_PACKET_DETECTED', "PHY Magic packet detected\n"),
    (0, 'DBG_ID_EUROPA_POLL_WAKE_UP_FRAME_DETECTED', "Wake up frame detected\n"),
    (2, 'DBG_ID_EUROPA_POLL_REG_FAILED', "Europa 0x%02X.0x%04X failed\n"),
    (1, 'DBG_ID_EUROPA_POLL_PHY_SIF_RATE_TRANSITION', "PHY SIF RATE TRANSITION %x\n"),
    (1, 'DBG_ID_EUROPA_POLL_PHY_SIF_MODE_TRANSITION', "PHY SIF MODE TRANSITION %x\n"),
    (0, 'DBG_ID_EUROPA_POLL_PHY_LINK_DOWN', "PHY LINK DOWN\n"),
    (0, 'DBG_ID_EUROPA_POLL_PHY_LINK_UP', "PHY LINK UP\n"),
    (1, 'DBG_ID_EUROPA_POLL_COPPER_CONNECTED', "PHY COPPER CONNECTED, CABLE LEN: %d\n"),
    (1, 'DBG_ID_EUROPA_POLL_COPPER_RATE_CHANGED', "PHY COPPER RATE CHANGED %x\n"),
    (0, 'DBG_ID_EUROPA_POLL_OPTIONS_POLL_FAILED', "Europa options poll failed\n"),
    (1, 'DBG_ID_EUROPA_POLL_COPPER_DISCONNECTED', "PHY COPPER DISCONNECTED %x\n"),
    (0, 'DBG_ID_EUROPA_POLL_TEMPERATURE_POLL_FAILED', "Europa temperature poll failed\n"),
    (1, 'DBG_ID_EUROPA_POLL_PHY_GLOBAL_FAULT', "PHY GLOBAL FAULT 0x%04x\n"),
    (0, 'DBG_ID_EUROPA_POLL_FAST_RETRAIN_STARTED', "PHY fast retrain started\n"),
    (0, 'DBG_ID_EUROPA_POLL_MINIMAL_SPEED_LINK_POLL_FAILED', "Europa minimal link speed poll failed\n"),
    (0, 'DBG_ID_EUROPA_POLL_PHY_BREAK_ON_ALARM', "PHY BREAK ON ALARM\n"),
    (0, 'DBG_ID_EUROPA_POLL_MDIO_FAILURE', "MDIO failure\n"),
    (1, 'DBG_ID_LOOPBACK_INTERNAL_LOOPBACK_STATUS', "Internal loopback status: %s\n"),
    (0, 'DBG_ID_LOOPBACK_EXTERNAL_LOOPBACK_AT_1G_NOT_SUPPORTED', "WARNING!!! External loopback at 1G is not supported\n"),
    (0, 'DBG_ID_LOOPBACK_EXTERNAL_LOOPBACK_ENABLED', "External loopback status: enabled\n"),
    (0, 'DBG_ID_LOOPBACK_EXTERNAL_LOOPBACK_DISABLED', "External loopback status: disabled\n"),
    (2, 'DBG_ID_LOOPBACK_STATE_TRANSITION', "loopbackSmc state transition: %d -> %d\n"),
    (2, 'DBG_ID_MDIO_INJECT_SIZE', "MDIO inject. Size: %04X, Aligned size: %04X\n"),
    (2, 'DBG_ID_MDIO_INJECT_HEAD_TAIL', "MDIO inject. Head: %04X, Tail: %04X\n"),
    (0, 'DBG_ID_MDIO_NO_FREE_SPACE', "No free space\n"),
    (0, 'DBG_ID_MDIO_BUFFER_NOT_EMPTY', "Buffer not empty, only one packet in queue allowed\n"),
    (2, 'DBG_ID_MDIO_BOUNDARY_CROSS', "Boundary cross, new addr: %08X\n"),
    (1, 'DBG_ID_MDIO_NEW_HEAD', "New head: %04X\n"),
    (2, 'DBG_ID_MDIO_NEW_PACKET_HEAD_TAIL', "New packet. Head: %04X, Tail: %04X\n"),
    (2, 'DBG_ID_MDIO_SET_ADDRESS', "Set address %08X\n"),
    (2, 'DBG_ID_MDIO_PACKET_LENGTH', "Packet len: %04X (invalid: %d)\n"),
    (0, 'DBG_ID_MDIO_CORRUPTED_PACKET', "CORRUPTED PACKET\n"),
    (1, 'DBG_ID_MDIO_NEW_TAIL', "%d Done, new tail: %04X\n"),
    (0, 'DBG_ID_MDIO_OVERFLOW', "Overflow\n"),
    (1, 'DBG_ID_MDIO_ADDRESS', "PHY MDIO Address: %d\n"),
    (0, 'DBG_ID_MDIO_PREAMBLE_ENABLED', "MDIO Preamble is enabled\n"),
    (0, 'DBG_ID_MDIO_PREAMBLE_DISABLED', "MDIO Preamble is disabled\n"),
    (0, 'DBG_ID_PHY_PM_REQUEST_WOL_MODE', "Phy request WoL mode\n"),
    (0, 'DBG_ID_PHY_PM_REQUEST_NORMAL_MODE', "Phy request normal mode\n"),
    (2, 'DBG_ID_PM_DRAM_SIZE', "DT: dram_size: 0x%x bytes\n"),
    (2, 'DBG_ID_PM_IRAM_SIZE', "DT: iram_size: 0x%x bytes\n"),
    (1, 'DBG_ID_PM_DRAM_VAL', "DT: dram_val == 0x%x\n"),
    (1, 'DBG_ID_PM_IRAM_VAL', "DT: iram_val == 0x%x\n"),
    (1, 'DBG_ID_PM_DRAM_IRAM_VAL', "DT: (dram_val << 0x10) | iram_val == 0x%x\n"),
    (0, 'DBG_ID_PM_NORMAL_MODE_BY_HOST', "PM normal mode by host\n"),
    (0, 'DBG_ID_PM_SLEEP_PROXY_BY_HOST', "PM sleep proxy by host\n"),
    (0, 'DBG_ID_PM_SLEEP_DEEP_BY_HOST', "PM sleep deep by host\n"),
    (0, 'DBG_ID_TEMPERATURE_HIGH_TEMP_WARNING', "PHY High temperature warning\n"),
    (0, 'DBG_ID_TEMPERATURE_LOW_TEMP_WARNING', "PHY Low temperature warning\n"),
    (0, 'DBG_ID_EEE_DISABLE', "EEE Disable\n"),
    (0, 'DBG_ID_EEE_ENABLE', "EEE Enable\n"),
    (0, 'DBG_ID_EEE_RESET', "EEE reset\n"),
    (0, 'DBG_ID_EEE_LINK_LOST', "eee link has been active long enough, assume valid link lost\n"),
    (2, 'DBG_ID_EEE_LINK_DROP', "eee assume link drop due to EEE issues, failures to disable: %d\n"),
    (1, 'DBG_ID_EEE_OPERATION_FAILED', "eee operation failed, disabling feature for SIf rate %d\n"),
    (2, 'DBG_ID_EEE_STATE_TRANSITION', "eeeSmc state transition: %d -> %d\n"),
    (8, 'DBG_ID_EEE_CONFIG', "eee configure, linkDownTimeout: %d, linkUpTimeout: %d, maxLinkDrops: %d, ratesMask: 0x%04X\n"),
    (0, 'DBG_ID_EFUSE_OVERRIDE_FAILURE', "eFUSE override failure\n"),
    (1, 'DBG_ID_PCIE_DISABLE_LANE', "PCIe: Disable lane %d\n"),
    (2, 'DBG_ID_PCIE_L2_ENTER', "PCIe: L2 Enter, %x\n"),
    (0, 'DBG_ID_PCIE_L2_EXIT', "PCIe: L2 Exit\n"),
    (0, 'DBG_ID_PCIE_WAKEUP_DONE', "PCIe: Wakeup done\n"),
    (0, 'DBG_ID_PCIE_WAKEUP_TIMEOUT', "PCIe: Wakeup timeout\n"),
    (0, 'DBG_ID_PCIE_PERST_LOW_1', "PCIe: PERST LOW, D3coldExit Active\n"),
    (0, 'DBG_ID_PCIE_PERST_LOW_2', "PCIe: PERST LOW\n"),
    (0, 'DBG_ID_PCIE_PERST_HIGH', "PCIe: PERST is high\n"),
    (1, 'DBG_ID_PCIE_WAKEUP_REASON', "PCIe wakeup reason: %d\n"),
    (0, 'DBG_ID_MDNS_OUT_PACKET_ALLOCATION_FAILS', "MDNS out packet allocation fails\n"),
    (4, 'DBG_ID_MDNS_RR_EMPTY_ARGS', "MDNS RR empty args : rrCount %d rrBufSize %d\n"),
    (4, 'DBG_ID_MDNS_RR_BUF_TOO_BIG', "MDNS RR buf is too big : rrCount %d rrBufSize %d\n"),
    (2, 'DBG_ID_MDNS_RR_ADDED', "MDNS %d RRs added\n"),
    (4, 'DBG_ID_MDNS_RR_PTR', "MDNS RR %d PTR(%d) :\n"),
    (4, 'DBG_ID_MDNS_RR_TXT', "MDNS RR %d TXT(%d) :\n"),
    (4, 'DBG_ID_MDNS_RR_SRV', "MDNS RR %d SRV(%d) :\n"),
    (4, 'DBG_ID_MDNS_RR_TYPE_UNKNOWN', "MDNS: RR %d type unknown %d\n"),
    (1, 'DBG_ID_MDNS_RR_CLASS', "- class %d\n"),
    (2, 'DBG_ID_MDNS_RR_TTL', "- ttl %d\n"),
    (2, 'DBG_ID_MDNS_RR_PRIORITY', "- priority %d\n"),
    (2, 'DBG_ID_MDNS_RR_WEIGHT', "- weight %d\n"),
    (2, 'DBG_ID_MDNS_RR_PORT', "- port %d\n"),
    (0, 'DBG_ID_MDNS_DOMAIN_NAME', "MDNS domain name : "),
    (2, 'DBG_ID_CAPS_RATES', "Capabilities: Rates - 0x%08X\n"),
    (2, 'DBG_ID_CAPS_EEE_RATES', "Capabilities: EEE Rates - 0x%08X\n"),
    (2, 'DBG_ID_CAPS_PAUSE', "Capabilities: Pause - 0x%08X\n"),
    (2, 'DBG_ID_CAPS_ASYMMETRIC_PAUSE', "Capabilities: Asymmetric pause - 0x%08X\n"),
    (0, 'DBG_ID_CAPS_MAX_RATE', "Capabilities: Max rate - "),
    (0, 'DBG_ID_HOST_WOL_CONFIG', "HOST WoL config\n"),
    (0, 'DBG_ID_HOST_WOL_ENABLE_WITH_LINK_ON_COPPER', "HOST Wake On Link enable with link on copper\n"),
    (0, 'DBG_ID_HOST_WOL_ENABLE_WITHOUT_LINK_ON_COPPER', "HOST Wake On Link enable without actual link on copper\n"),
    (0, 'DBG_ID_HOST_ENABLE_PHY_LOGS', "HOST Enable PHY logs\n"),
    (0, 'DBG_ID_HOST_DISABLE_PHY_LOGS', "HOST Disable PHY logs\n"),
    (6, 'DBG_ID_HOST_ENABLE_THERMAL_SHUTDOWN', "Enable thermal shutdown, cold: %d, warm: %d, hot: %d\n"),
    (0, 'DBG_ID_HOST_DISABLE_THERMAL_SHUTDOWN', "Disable thermal shutdown\n"),
    (0, 'DBG_ID_HOST_LINK_DROP_TRANSACTION_COMPLETE', "Link drop transaction complete\n"),
    (0, 'DBG_ID_HOST_WAKE_ON_LINK', "HOST Wake On Link\n"),
    (0, 'DBG_ID_HOST_REPORT_LINK_UP_100M', "HOST report link up at 100M\n"),
    (0, 'DBG_ID_HOST_REPORT_LINK_UP_1G', "HOST report link up at 1G\n"),
    (0, 'DBG_ID_HOST_REPORT_LINK_UP_2G5', "HOST report link up at 2.5G\n"),
    (0, 'DBG_ID_HOST_REPORT_LINK_UP_5G', "HOST report link up at 5G\n"),
    (0, 'DBG_ID_HOST_REPORT_LINK_UP_10G', "HOST report link up at 10G\n"),
    (0, 'DBG_ID_HOST_REPORT_LINK_LOST', "HOST report link lost\n"),
    (3, 'DBG_ID_MAIN_FW_VERSION', "Aquantia Jamaica F/W version: %d.%d.%d\n"),
    (3, 'DBG_ID_MAIN_MAC', "MAC: %02X-%02X-%02X-%02X-%02X-%02X\n"),
    (1, 'DBG_ID_MAIN_FLASH_MODE', "MODE: %s\n"),
    (0, 'DBG_ID_MAIN_PHY_LOAD_FAILED', "PHY Load failed\n"),
    (0, 'DBG_ID_MAIN_GLOBAL_SOFTWARE_RESET', "GLOBAL SOFTWARE RESET\n"),
    (2, 'DBG_ID_WOL_ENABLE_WAKE_TIMER_WITH_TIMEOUT', "WoL Enable wake timer with timeout = %d\n"),
    (0, 'DBG_ID_WOL_DISABLE_WAKE_TIMER', "WoL Disable wake timer\n"),
    (0, 'DBG_ID_WOL_LINK_UP_TIMER', "WoL Link up timer\n"),
    (0, 'DBG_ID_WOL_LINK_DOWN_TIMER', "WoL Link down timer\n"),
    (2, 'DBG_ID_WOL_ENABLE_LINK_UP_WITH_TIMEOUT', "WoL Enable link up with timeout %dms\n"),
    (2, 'DBG_ID_WOL_ENABLE_LINK_DOWN_WITH_TIMEOUT', "WoL Enable link down with timeout %dms\n"),
    (0, 'DBG_ID_WOL_DISABLE_LINK_UP', "WoL Disable link up\n"),
    (0, 'DBG_ID_WOL_DISABLE_LINK_DOWN', "WoL Disable link down\n"),
    (0, 'DBG_ID_WOL_LINK_LATCH', "WoL Link latch\n"),
    (0, 'DBG_ID_WOL_WAKE_TIMER_EXPIRED', "WoL wake timer expired\n"),
    (0, 'DBG_ID_WOL_START_WAKE_TIMER_COUNTER', "WoL Start wake timer counter\n"),
    (3, 'DBG_ID_MPI_RATE_STATE_ANEG_DISABLE', "SYS_RATE_ADAPT_ANEG_STATE_DISABLE: MAC %04X: %x\n"),
    (3, 'DBG_ID_MPI_USX_AUTONEG_TIMEOUT', "USX autoneg timeout: MAC %04X: %x\n"),
    (3, 'DBG_ID_MPI_RATE_ADAPT_ANEG_MAC', "mpiRateAdaptAneg: MAC %04X: %x\n"),
    (4, 'DBG_ID_MPI_RATE_ADAPT_ANEG_STATE_TRANSITION', "mpiRateAdaptAneg state transition: %d -> %d\n"),
    (2, 'DBG_ID_MPI_USX_AUTONEG_RESTARTED_WITH_CODE', "USX autoneg restarted with rate code %d\n"),
    (3, 'DBG_ID_MPI_BEFORE_USXAUTONEGENABLE', "before usxAutoNegEnable: MAC %04X: %x\n"),
    (0, 'DBG_ID_MPI_SERDES_SM_ESD_MON_PHY_TXUP', "eSD_MON_PHY_TXUP\n"),
    (3, 'DBG_ID_MPI_SERDES_SM_MAC_REG', "\t\t MAC %04X: %x\n"),
    (0, 'DBG_ID_MPI_SERDES_SM_ESD_MON_PHY_TXUP_TIMEOUT', "eSD_MON_PHY_TXUP timeout\n"),
    (5, 'DBG_ID_MPI_SERDES_SM_EYE_DIAG', "Serdes Eye - %d:\n  0:0x%04X, 1:0x%04X, 2:0x%04X, 3:0x%04X\n"),
    (3, 'DBG_ID_MPI_SERDES_SM_HW_INIT_MAC_REG', "SYS_HW_INITIALIZATION: MAC %04X: %x\n"),
    (0, 'DBG_ID_MPI_SERDES_SM_PAUSE_RX_ENABLE', "Pause RX enable\n"),
    (0, 'DBG_ID_MPI_SERDES_SM_PAUSE_RX_DISABLE', "Pause RX disable\n"),
    (2, 'DBG_ID_MPI_SERDES_SM_STATE_TRANSITION', "mpiSmc state transition: %d -> %d\n"),
    (2, 'DBG_ID_MPI_SERDES_WR_TOUT', "MPI Indirect write timeout: addr=0x%08X data=0x%08X\n"),
    (1, 'DBG_ID_MPI_SERDES_RD_TOUT', "MPI Indirect read timeout: addr=0x%08X\n"),
    (0, 'DBG_ID_ERRNO_1', "ERROR("),
    (0, 'DBG_ID_ERRNO_2', "): "),
    (4, 'DBG_ID_AVB_CFG', "AVB cfg. Flush %d, new en %d, new link %d\n"),
    (1, 'DBG_ID_PTP_AVB_ENABLE', "PTP_AVB Enable. Link %d\n"),
    (1, 'DBG_ID_PTP_AVB_DISABLE', "PTP_AVB Disable. Link %d\n"),
    (0, 'DBG_ID_PTP_AVB_RECONFIGURE', "PTP_AVB Reconfigure\n"),
    (0, 'DBG_ID_PTP_AVB_STOP', "PTP_AVB Stop\n"),
    (1, 'DBG_ID_PTP_AVB_APPLY', "PTP_AVB Apply. Link %d\n"),
    (2, 'DBG_ID_TRACE1', "DEBUG TRACE1: %d\n"),
    (4, 'DBG_ID_TRACE2', "DEBUG TRACE2: %d  %d\n"),
    (6, 'DBG_ID_TRACE3', "DEBUG TRACE3: %d  %d  %d\n"),
    (8, 'DBG_ID_TRACE4', "DEBUG TRACE4: %d  %d  %d  %d\n"),
    (10, 'DBG_ID_TRACE5', "DEBUG TRACE5: %d  %d  %d  %d  %d\n"),
]
